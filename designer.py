# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_designer')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_designer')
    _designer = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_designer', [dirname(__file__)])
        except ImportError:
            import _designer
            return _designer
        try:
            _mod = imp.load_module('_designer', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _designer = swig_import_helper()
    del swig_import_helper
else:
    import _designer
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _designer.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _designer.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _designer.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _designer.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _designer.SwigPyIterator_equal(self, x)

    def copy(self):
        return _designer.SwigPyIterator_copy(self)

    def next(self):
        return _designer.SwigPyIterator_next(self)

    def __next__(self):
        return _designer.SwigPyIterator___next__(self)

    def previous(self):
        return _designer.SwigPyIterator_previous(self)

    def advance(self, n):
        return _designer.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _designer.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _designer.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _designer.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _designer.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _designer.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _designer.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _designer.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _designer.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _designer.vectord___nonzero__(self)

    def __bool__(self):
        return _designer.vectord___bool__(self)

    def __len__(self):
        return _designer.vectord___len__(self)

    def __getslice__(self, i, j):
        return _designer.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _designer.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _designer.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _designer.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _designer.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _designer.vectord___setitem__(self, *args)

    def pop(self):
        return _designer.vectord_pop(self)

    def append(self, x):
        return _designer.vectord_append(self, x)

    def empty(self):
        return _designer.vectord_empty(self)

    def size(self):
        return _designer.vectord_size(self)

    def swap(self, v):
        return _designer.vectord_swap(self, v)

    def begin(self):
        return _designer.vectord_begin(self)

    def end(self):
        return _designer.vectord_end(self)

    def rbegin(self):
        return _designer.vectord_rbegin(self)

    def rend(self):
        return _designer.vectord_rend(self)

    def clear(self):
        return _designer.vectord_clear(self)

    def get_allocator(self):
        return _designer.vectord_get_allocator(self)

    def pop_back(self):
        return _designer.vectord_pop_back(self)

    def erase(self, *args):
        return _designer.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _designer.new_vectord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _designer.vectord_push_back(self, x)

    def front(self):
        return _designer.vectord_front(self)

    def back(self):
        return _designer.vectord_back(self)

    def assign(self, n, x):
        return _designer.vectord_assign(self, n, x)

    def resize(self, *args):
        return _designer.vectord_resize(self, *args)

    def insert(self, *args):
        return _designer.vectord_insert(self, *args)

    def reserve(self, n):
        return _designer.vectord_reserve(self, n)

    def capacity(self):
        return _designer.vectord_capacity(self)
    __swig_destroy__ = _designer.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _designer.vectord_swigregister
vectord_swigregister(vectord)

class matrixd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrixd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrixd, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _designer.matrixd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _designer.matrixd___nonzero__(self)

    def __bool__(self):
        return _designer.matrixd___bool__(self)

    def __len__(self):
        return _designer.matrixd___len__(self)

    def __getslice__(self, i, j):
        return _designer.matrixd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _designer.matrixd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _designer.matrixd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _designer.matrixd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _designer.matrixd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _designer.matrixd___setitem__(self, *args)

    def pop(self):
        return _designer.matrixd_pop(self)

    def append(self, x):
        return _designer.matrixd_append(self, x)

    def empty(self):
        return _designer.matrixd_empty(self)

    def size(self):
        return _designer.matrixd_size(self)

    def swap(self, v):
        return _designer.matrixd_swap(self, v)

    def begin(self):
        return _designer.matrixd_begin(self)

    def end(self):
        return _designer.matrixd_end(self)

    def rbegin(self):
        return _designer.matrixd_rbegin(self)

    def rend(self):
        return _designer.matrixd_rend(self)

    def clear(self):
        return _designer.matrixd_clear(self)

    def get_allocator(self):
        return _designer.matrixd_get_allocator(self)

    def pop_back(self):
        return _designer.matrixd_pop_back(self)

    def erase(self, *args):
        return _designer.matrixd_erase(self, *args)

    def __init__(self, *args):
        this = _designer.new_matrixd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _designer.matrixd_push_back(self, x)

    def front(self):
        return _designer.matrixd_front(self)

    def back(self):
        return _designer.matrixd_back(self)

    def assign(self, n, x):
        return _designer.matrixd_assign(self, n, x)

    def resize(self, *args):
        return _designer.matrixd_resize(self, *args)

    def insert(self, *args):
        return _designer.matrixd_insert(self, *args)

    def reserve(self, n):
        return _designer.matrixd_reserve(self, n)

    def capacity(self):
        return _designer.matrixd_capacity(self)
    __swig_destroy__ = _designer.delete_matrixd
    __del__ = lambda self: None
matrixd_swigregister = _designer.matrixd_swigregister
matrixd_swigregister(matrixd)

class vectorui(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorui, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _designer.vectorui_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _designer.vectorui___nonzero__(self)

    def __bool__(self):
        return _designer.vectorui___bool__(self)

    def __len__(self):
        return _designer.vectorui___len__(self)

    def __getslice__(self, i, j):
        return _designer.vectorui___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _designer.vectorui___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _designer.vectorui___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _designer.vectorui___delitem__(self, *args)

    def __getitem__(self, *args):
        return _designer.vectorui___getitem__(self, *args)

    def __setitem__(self, *args):
        return _designer.vectorui___setitem__(self, *args)

    def pop(self):
        return _designer.vectorui_pop(self)

    def append(self, x):
        return _designer.vectorui_append(self, x)

    def empty(self):
        return _designer.vectorui_empty(self)

    def size(self):
        return _designer.vectorui_size(self)

    def swap(self, v):
        return _designer.vectorui_swap(self, v)

    def begin(self):
        return _designer.vectorui_begin(self)

    def end(self):
        return _designer.vectorui_end(self)

    def rbegin(self):
        return _designer.vectorui_rbegin(self)

    def rend(self):
        return _designer.vectorui_rend(self)

    def clear(self):
        return _designer.vectorui_clear(self)

    def get_allocator(self):
        return _designer.vectorui_get_allocator(self)

    def pop_back(self):
        return _designer.vectorui_pop_back(self)

    def erase(self, *args):
        return _designer.vectorui_erase(self, *args)

    def __init__(self, *args):
        this = _designer.new_vectorui(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _designer.vectorui_push_back(self, x)

    def front(self):
        return _designer.vectorui_front(self)

    def back(self):
        return _designer.vectorui_back(self)

    def assign(self, n, x):
        return _designer.vectorui_assign(self, n, x)

    def resize(self, *args):
        return _designer.vectorui_resize(self, *args)

    def insert(self, *args):
        return _designer.vectorui_insert(self, *args)

    def reserve(self, n):
        return _designer.vectorui_reserve(self, n)

    def capacity(self):
        return _designer.vectorui_capacity(self)
    __swig_destroy__ = _designer.delete_vectorui
    __del__ = lambda self: None
vectorui_swigregister = _designer.vectorui_swigregister
vectorui_swigregister(vectorui)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _designer.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _designer.vectori___nonzero__(self)

    def __bool__(self):
        return _designer.vectori___bool__(self)

    def __len__(self):
        return _designer.vectori___len__(self)

    def __getslice__(self, i, j):
        return _designer.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _designer.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _designer.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _designer.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _designer.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _designer.vectori___setitem__(self, *args)

    def pop(self):
        return _designer.vectori_pop(self)

    def append(self, x):
        return _designer.vectori_append(self, x)

    def empty(self):
        return _designer.vectori_empty(self)

    def size(self):
        return _designer.vectori_size(self)

    def swap(self, v):
        return _designer.vectori_swap(self, v)

    def begin(self):
        return _designer.vectori_begin(self)

    def end(self):
        return _designer.vectori_end(self)

    def rbegin(self):
        return _designer.vectori_rbegin(self)

    def rend(self):
        return _designer.vectori_rend(self)

    def clear(self):
        return _designer.vectori_clear(self)

    def get_allocator(self):
        return _designer.vectori_get_allocator(self)

    def pop_back(self):
        return _designer.vectori_pop_back(self)

    def erase(self, *args):
        return _designer.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _designer.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _designer.vectori_push_back(self, x)

    def front(self):
        return _designer.vectori_front(self)

    def back(self):
        return _designer.vectori_back(self)

    def assign(self, n, x):
        return _designer.vectori_assign(self, n, x)

    def resize(self, *args):
        return _designer.vectori_resize(self, *args)

    def insert(self, *args):
        return _designer.vectori_insert(self, *args)

    def reserve(self, n):
        return _designer.vectori_reserve(self, n)

    def capacity(self):
        return _designer.vectori_capacity(self)
    __swig_destroy__ = _designer.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _designer.vectori_swigregister
vectori_swigregister(vectori)


import designer_remote


def MsgBox(msg):
    return _designer.MsgBox(msg)
MsgBox = _designer.MsgBox
class ScriptFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptFunction, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _designer.new_ScriptFunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Pause(self):
        return _designer.ScriptFunction_Pause(self)

    def Print(self, text):
        return _designer.ScriptFunction_Print(self, text)
    __swig_destroy__ = _designer.delete_ScriptFunction
    __del__ = lambda self: None
ScriptFunction_swigregister = _designer.ScriptFunction_swigregister
ScriptFunction_swigregister(ScriptFunction)


def GetScriptFunctionInstance():
    return _designer.GetScriptFunctionInstance()
GetScriptFunctionInstance = _designer.GetScriptFunctionInstance
class KeyValueDatabase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyValueDatabase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyValueDatabase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _designer.new_KeyValueDatabase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _designer.delete_KeyValueDatabase
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.KeyValueDatabase_IsValid(self)

    def GetValue(self, name):
        return _designer.KeyValueDatabase_GetValue(self, name)

    def HasValue(self, name):
        return _designer.KeyValueDatabase_HasValue(self, name)

    def SetValue(self, name, value):
        return _designer.KeyValueDatabase_SetValue(self, name, value)
KeyValueDatabase_swigregister = _designer.KeyValueDatabase_swigregister
KeyValueDatabase_swigregister(KeyValueDatabase)


def GetKeyValueDatabase():
    return _designer.GetKeyValueDatabase()
GetKeyValueDatabase = _designer.GetKeyValueDatabase

def GetApplication():
    return _designer.GetApplication()
GetApplication = _designer.GetApplication
class ViewController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewController, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ViewController
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ViewController_IsValid(self)

    def Xy(self):
        return _designer.ViewController_Xy(self)

    def Xz(self):
        return _designer.ViewController_Xz(self)

    def Yz(self):
        return _designer.ViewController_Yz(self)

    def Yx(self):
        return _designer.ViewController_Yx(self)

    def Zx(self):
        return _designer.ViewController_Zx(self)

    def Zy(self):
        return _designer.ViewController_Zy(self)

    def Iso(self):
        return _designer.ViewController_Iso(self)

    def SetView(self, name):
        return _designer.ViewController_SetView(self, name)

    def SetViewByIndex(self, index):
        return _designer.ViewController_SetViewByIndex(self, index)

    def SetAllView(self, name):
        return _designer.ViewController_SetAllView(self, name)

    def SetAllViewByIndex(self, index):
        return _designer.ViewController_SetAllViewByIndex(self, index)

    def CreateView(self, name):
        return _designer.ViewController_CreateView(self, name)

    def DeleteView(self, name):
        return _designer.ViewController_DeleteView(self, name)

    def DeleteViewByIndex(self, index):
        return _designer.ViewController_DeleteViewByIndex(self, index)

    def RenameView(self, index, name):
        return _designer.ViewController_RenameView(self, index, name)

    def GetStep(self):
        return _designer.ViewController_GetStep(self)

    def SetStep(self, step):
        return _designer.ViewController_SetStep(self, step)

    def GetPhase(self):
        return _designer.ViewController_GetPhase(self)

    def SetPhase(self, phase):
        return _designer.ViewController_SetPhase(self, phase)

    def GetCurrentCase(self):
        return _designer.ViewController_GetCurrentCase(self)

    def SetCurrentCase(self, currentCase):
        return _designer.ViewController_SetCurrentCase(self, currentCase)

    def SetContourView(self, flag):
        return _designer.ViewController_SetContourView(self, flag)

    def SetVectorView(self, flag):
        return _designer.ViewController_SetVectorView(self, flag)

    def SetFluxLineView(self, flag):
        return _designer.ViewController_SetFluxLineView(self, flag)

    def SetCompositeView(self, flag):
        return _designer.ViewController_SetCompositeView(self, flag)

    def SetModelCopyView(self, flag):
        return _designer.ViewController_SetModelCopyView(self, flag)

    def SetOriginalModelView(self, flag):
        return _designer.ViewController_SetOriginalModelView(self, flag)

    def SetScaledDisplacementView(self, flag):
        return _designer.ViewController_SetScaledDisplacementView(self, flag)

    def Pan(self, deltax, deltay):
        return _designer.ViewController_Pan(self, deltax, deltay)

    def Zoom(self, zoomfactor):
        return _designer.ViewController_Zoom(self, zoomfactor)

    def Rotate(self, degree_x, degree_y):
        return _designer.ViewController_Rotate(self, degree_x, degree_y)

    def Roll(self, degree):
        return _designer.ViewController_Roll(self, degree)

    def RotateTo(self, degree_x, degree_y, degree_z):
        return _designer.ViewController_RotateTo(self, degree_x, degree_y, degree_z)

    def SetOnlyCutFacesView(self, flag):
        return _designer.ViewController_SetOnlyCutFacesView(self, flag)

    def SetCutPlanesOutLinesView(self, flag):
        return _designer.ViewController_SetCutPlanesOutLinesView(self, flag)

    def GetCutPlanesOutLinesView(self):
        return _designer.ViewController_GetCutPlanesOutLinesView(self)

    def ContourMaxValue(self):
        return _designer.ViewController_ContourMaxValue(self)

    def ContourMinValue(self):
        return _designer.ViewController_ContourMinValue(self)

    def VectorMaxValue(self):
        return _designer.ViewController_VectorMaxValue(self)

    def VectorMinValue(self):
        return _designer.ViewController_VectorMinValue(self)

    def GetContourView(self):
        return _designer.ViewController_GetContourView(self)

    def GetVectorView(self):
        return _designer.ViewController_GetVectorView(self)

    def GetFluxLineView(self):
        return _designer.ViewController_GetFluxLineView(self)

    def GetCompositeView(self):
        return _designer.ViewController_GetCompositeView(self)

    def GetModelCopyView(self):
        return _designer.ViewController_GetModelCopyView(self)

    def GetOriginalModelView(self):
        return _designer.ViewController_GetOriginalModelView(self)

    def GetScaledDisplacementView(self):
        return _designer.ViewController_GetScaledDisplacementView(self)

    def GetOnlyCutFacesView(self):
        return _designer.ViewController_GetOnlyCutFacesView(self)

    def ShowModel(self):
        return _designer.ViewController_ShowModel(self)

    def ShowMeshGeometry(self):
        return _designer.ViewController_ShowMeshGeometry(self)

    def ShowMesh(self):
        return _designer.ViewController_ShowMesh(self)

    def Shaded(self):
        return _designer.ViewController_Shaded(self)

    def Hiddenline(self):
        return _designer.ViewController_Hiddenline(self)

    def Wireframe(self):
        return _designer.ViewController_Wireframe(self)

    def CaptureResultView(self, title, comment):
        return _designer.ViewController_CaptureResultView(self, title, comment)

    def Fit(self):
        return _designer.ViewController_Fit(self)

    def ShowAll(self):
        return _designer.ViewController_ShowAll(self)

    def HideAll(self):
        return _designer.ViewController_HideAll(self)

    def ShowAllAirRegions(self):
        return _designer.ViewController_ShowAllAirRegions(self)

    def HideAllAirRegions(self):
        return _designer.ViewController_HideAllAirRegions(self)

    def ShowAllShells(self):
        return _designer.ViewController_ShowAllShells(self)

    def HideAllShells(self):
        return _designer.ViewController_HideAllShells(self)

    def ShowMorphing(self):
        return _designer.ViewController_ShowMorphing(self)

    def HideMorphing(self):
        return _designer.ViewController_HideMorphing(self)

    def SelectEdge(self):
        return _designer.ViewController_SelectEdge(self)

    def SelectFace(self):
        return _designer.ViewController_SelectFace(self)

    def SelectPart(self):
        return _designer.ViewController_SelectPart(self)

    def SelectVertex(self):
        return _designer.ViewController_SelectVertex(self)

    def SelectElement(self):
        return _designer.ViewController_SelectElement(self)

    def SelectElementFace(self):
        return _designer.ViewController_SelectElementFace(self)

    def SelectElementEdge(self):
        return _designer.ViewController_SelectElementEdge(self)

    def SelectElementVertex(self):
        return _designer.ViewController_SelectElementVertex(self)

    def SetExtendedSelection(self, flag):
        return _designer.ViewController_SetExtendedSelection(self, flag)

    def SetSightThrough(self, flag):
        return _designer.ViewController_SetSightThrough(self, flag)

    def SetVertexVisibility(self, flag):
        return _designer.ViewController_SetVertexVisibility(self, flag)

    def SetActiveSubWindow(self, index):
        return _designer.ViewController_SetActiveSubWindow(self, index)

    def SetActiveSubWindowSize(self, width, height):
        return _designer.ViewController_SetActiveSubWindowSize(self, width, height)

    def MaximizeActiveSubWindow(self):
        return _designer.ViewController_MaximizeActiveSubWindow(self)

    def NumSubWindows(self):
        return _designer.ViewController_NumSubWindows(self)

    def ActiveSubWindowIndex(self):
        return _designer.ViewController_ActiveSubWindowIndex(self)

    def TileSubWindows(self):
        return _designer.ViewController_TileSubWindows(self)

    def CascadeSubWindows(self):
        return _designer.ViewController_CascadeSubWindows(self)

    def CloseActiveSubWindow(self):
        return _designer.ViewController_CloseActiveSubWindow(self)

    def NewSubWindow(self):
        return _designer.ViewController_NewSubWindow(self)

    def CloseNotActiveSubWindows(self):
        return _designer.ViewController_CloseNotActiveSubWindows(self)

    def UpdateView(self):
        return _designer.ViewController_UpdateView(self)

    def SetCamera(self, pos_x, pos_y, pos_z, tar_x, tar_y, tar_z, up_x, up_y, up_z, width, height):
        return _designer.ViewController_SetCamera(self, pos_x, pos_y, pos_z, tar_x, tar_y, tar_z, up_x, up_y, up_z, width, height)

    def SelectWorldPos(self, x, y, z, type):
        return _designer.ViewController_SelectWorldPos(self, x, y, z, type)

    def SelectPixelPos(self, x, y, type):
        return _designer.ViewController_SelectPixelPos(self, x, y, type)

    def SelectByRectanglePixelPos(self, x1, y1, x2, y2, type):
        return _designer.ViewController_SelectByRectanglePixelPos(self, x1, y1, x2, y2, type)

    def SelectByRectangleWorldPos(self, x1, y1, z1, x2, y2, z2, type):
        return _designer.ViewController_SelectByRectangleWorldPos(self, x1, y1, z1, x2, y2, z2, type)

    def SelectByCirclePixelPos(self, x1, y1, x2, y2, type):
        return _designer.ViewController_SelectByCirclePixelPos(self, x1, y1, x2, y2, type)

    def SelectByCircleWorldPos(self, x1, y1, z1, x2, y2, z2, type):
        return _designer.ViewController_SelectByCircleWorldPos(self, x1, y1, z1, x2, y2, z2, type)

    def SelectByPolylinePixelPosByVector(self, pos, type):
        return _designer.ViewController_SelectByPolylinePixelPosByVector(self, pos, type)

    def SelectByPolylineWorldPosByVector(self, pos, type):
        return _designer.ViewController_SelectByPolylineWorldPosByVector(self, pos, type)

    def SelectByRange(self, lower, upper, visible):
        return _designer.ViewController_SelectByRange(self, lower, upper, visible)

    def SelectByCylinder(self, cylinder, visible):
        return _designer.ViewController_SelectByCylinder(self, cylinder, visible)

    def SelectByPosition(self, x, y, z, visible):
        return _designer.ViewController_SelectByPosition(self, x, y, z, visible)

    def SelectByID(self, index):
        return _designer.ViewController_SelectByID(self, index)

    def ClearSelect(self):
        return _designer.ViewController_ClearSelect(self)

    def GetCurrentSelection(self):
        return _designer.ViewController_GetCurrentSelection(self)

    def ImportViewpoints(self, filename):
        return _designer.ViewController_ImportViewpoints(self, filename)

    def ExportViewpoints(self, filename, viewpoints):
        return _designer.ViewController_ExportViewpoints(self, filename, viewpoints)
ViewController_swigregister = _designer.ViewController_swigregister
ViewController_swigregister(ViewController)

class Message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Message
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Message_IsValid(self)

    def GetCode(self):
        return _designer.Message_GetCode(self)

    def GetTitle(self):
        return _designer.Message_GetTitle(self)

    def GetText(self):
        return _designer.Message_GetText(self)

    def GetType(self):
        return _designer.Message_GetType(self)

    def __init__(self):
        this = _designer.new_Message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Message_swigregister = _designer.Message_swigregister
Message_swigregister(Message)

class Report(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Report, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Report, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Report
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Report_IsValid(self)

    def NumMessages(self):
        return _designer.Report_NumMessages(self)

    def HasErrorMessage(self):
        return _designer.Report_HasErrorMessage(self)

    def HasWarningMessage(self):
        return _designer.Report_HasWarningMessage(self)

    def NumErrorMessages(self):
        return _designer.Report_NumErrorMessages(self)

    def NumWarningMessages(self):
        return _designer.Report_NumWarningMessages(self)

    def NumElements(self):
        return _designer.Report_NumElements(self)

    def NumVertices(self):
        return _designer.Report_NumVertices(self)

    def NumViewCapture(self):
        return _designer.Report_NumViewCapture(self)

    def GetCalculationFolder(self):
        return _designer.Report_GetCalculationFolder(self)

    def GetMessageObject(self, index):
        return _designer.Report_GetMessageObject(self, index)

    def GetErrorMessage(self, index):
        return _designer.Report_GetErrorMessage(self, index)

    def GetWarningMessage(self, index):
        return _designer.Report_GetWarningMessage(self, index)

    def GetPropertyNames(self):
        return _designer.Report_GetPropertyNames(self)

    def GetValue(self, *args):
        return _designer.Report_GetValue(self, *args)

    def SetValue(self, propName, val):
        return _designer.Report_SetValue(self, propName, val)

    def WriteCaseReport(self, filename):
        return _designer.Report_WriteCaseReport(self, filename)

    def WriteParametricReport(self, filename):
        return _designer.Report_WriteParametricReport(self, filename)

    def GetGraphNames(self):
        return _designer.Report_GetGraphNames(self)

    def SetGraphDescription(self, graphName, description):
        return _designer.Report_SetGraphDescription(self, graphName, description)

    def GetGraphDescription(self, graphName):
        return _designer.Report_GetGraphDescription(self, graphName)

    def RemoveViewCapture(self, val):
        return _designer.Report_RemoveViewCapture(self, val)

    def SetViewCaptureTitle(self, val, newTitle):
        return _designer.Report_SetViewCaptureTitle(self, val, newTitle)

    def SetViewCaptureComment(self, val, comment):
        return _designer.Report_SetViewCaptureComment(self, val, comment)

    def ExportMessagesForAllCases(self, filename):
        return _designer.Report_ExportMessagesForAllCases(self, filename)

    def __init__(self):
        this = _designer.new_Report()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Report_swigregister = _designer.Report_swigregister
Report_swigregister(Report)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _designer.new_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _designer.delete_Point
    __del__ = lambda self: None

    def x(self):
        return _designer.Point_x(self)

    def y(self):
        return _designer.Point_y(self)

    def z(self):
        return _designer.Point_z(self)

    def GetX(self):
        return _designer.Point_GetX(self)

    def GetY(self):
        return _designer.Point_GetY(self)

    def GetZ(self):
        return _designer.Point_GetZ(self)

    def SetX(self, x):
        return _designer.Point_SetX(self, x)

    def SetY(self, y):
        return _designer.Point_SetY(self, y)

    def SetZ(self, z):
        return _designer.Point_SetZ(self, z)

    def Set(self, x, y, z):
        return _designer.Point_Set(self, x, y, z)

    def ToString(self):
        return _designer.Point_ToString(self)

    def Value(self):
        return _designer.Point_Value(self)
Point_swigregister = _designer.Point_swigregister
Point_swigregister(Point)

class DataSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSet, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_DataSet
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.DataSet_IsValid(self)

    def GetRows(self):
        return _designer.DataSet_GetRows(self)

    def GetCols(self):
        return _designer.DataSet_GetCols(self)

    def NumCrossPoints(self, constantComponent, ref, col):
        return _designer.DataSet_NumCrossPoints(self, constantComponent, ref, col)

    def GetColumn(self, j):
        return _designer.DataSet_GetColumn(self, j)

    def GetRange(self, x1, y1, x2, y2):
        return _designer.DataSet_GetRange(self, x1, y1, x2, y2)

    def GetCrossPoints(self, constantComponent, ref, col):
        return _designer.DataSet_GetCrossPoints(self, constantComponent, ref, col)

    def GetCrossPointValue(self, constantComponent, ref, col, i):
        return _designer.DataSet_GetCrossPointValue(self, constantComponent, ref, col, i)

    def GetColumnName(self, i):
        return _designer.DataSet_GetColumnName(self, i)

    def GetName(self):
        return _designer.DataSet_GetName(self)

    def GetGroupName(self):
        return _designer.DataSet_GetGroupName(self)

    def GetValue(self, i, j):
        return _designer.DataSet_GetValue(self, i, j)

    def SetName(self, name):
        return _designer.DataSet_SetName(self, name)

    def SetValue(self, i, j, value):
        return _designer.DataSet_SetValue(self, i, j, value)

    def ReadFromFile(self, filename):
        return _designer.DataSet_ReadFromFile(self, filename)

    def SetColumn(self, col, vector):
        return _designer.DataSet_SetColumn(self, col, vector)

    def SetTable(self, mat):
        return _designer.DataSet_SetTable(self, mat)

    def WriteTable(self, filename):
        return _designer.DataSet_WriteTable(self, filename)

    def SaveGraphImage(self, filename, width, height):
        return _designer.DataSet_SaveGraphImage(self, filename, width, height)

    def SetColumnUnit(self, col, unitname):
        return _designer.DataSet_SetColumnUnit(self, col, unitname)

    def WriteColumn(self, filename, val):
        return _designer.DataSet_WriteColumn(self, filename, val)

    def GetXAxisUnit(self):
        return _designer.DataSet_GetXAxisUnit(self)

    def GetYAxisUnit(self):
        return _designer.DataSet_GetYAxisUnit(self)

    def GetXAxisTitle(self):
        return _designer.DataSet_GetXAxisTitle(self)

    def GetYAxisTitle(self):
        return _designer.DataSet_GetYAxisTitle(self)

    def __init__(self):
        this = _designer.new_DataSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DataSet_swigregister = _designer.DataSet_swigregister
DataSet_swigregister(DataSet)

class DataSetList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSetList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSetList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_DataSetList
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.DataSetList_IsValid(self)

    def GetName(self):
        return _designer.DataSetList_GetName(self)

    def SetName(self, name):
        return _designer.DataSetList_SetName(self, name)

    def NumTable(self):
        return _designer.DataSetList_NumTable(self)

    def GetTable(self, index):
        return _designer.DataSetList_GetTable(self, index)

    def SetTable(self, primaryKey, primaryUnitName, mat):
        return _designer.DataSetList_SetTable(self, primaryKey, primaryUnitName, mat)

    def SetTableWithDualKey(self, primaryKey, primaryUnitName, secondaryKey, secondaryUnitName, mat):
        return _designer.DataSetList_SetTableWithDualKey(self, primaryKey, primaryUnitName, secondaryKey, secondaryUnitName, mat)
DataSetList_swigregister = _designer.DataSetList_swigregister
DataSetList_swigregister(DataSetList)

class DataManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_DataManager
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.DataManager_IsValid(self)

    def NumSets(self):
        return _designer.DataManager_NumSets(self)

    def NumGraphs(self):
        return _designer.DataManager_NumGraphs(self)

    def GetName(self, setIndex):
        return _designer.DataManager_GetName(self, setIndex)

    def GetGraphName(self, setIndex):
        return _designer.DataManager_GetGraphName(self, setIndex)

    def GetAllNames(self):
        return _designer.DataManager_GetAllNames(self)

    def GetDataSet(self, val):
        return _designer.DataManager_GetDataSet(self, val)

    def GetGraphModel(self, val):
        return _designer.DataManager_GetGraphModel(self, val)

    def DeleteDataSet(self, val):
        return _designer.DataManager_DeleteDataSet(self, val)

    def DeleteDataSetObject(self, dataset):
        return _designer.DataManager_DeleteDataSetObject(self, dataset)

    def CreateUserSet(self, title, xtitle, ytitle):
        return _designer.DataManager_CreateUserSet(self, title, xtitle, ytitle)

    def CreatePointArray(self, *args):
        return _designer.DataManager_CreatePointArray(self, *args)

    def CreateFromFile(self, filename, title, xtitle, ytitle):
        return _designer.DataManager_CreateFromFile(self, filename, title, xtitle, ytitle)

    def CreateFromDataSet(self, title, xtitle, ytitle, mat):
        return _designer.DataManager_CreateFromDataSet(self, title, xtitle, ytitle, mat)

    def CreateFromStudy(self, parameter):
        return _designer.DataManager_CreateFromStudy(self, parameter)

    def CreateGraphModel(self, *args):
        return _designer.DataManager_CreateGraphModel(self, *args)

    def CreateAllCasesGraphModel(self, *args):
        return _designer.DataManager_CreateAllCasesGraphModel(self, *args)

    def CreateAllCasesProbeGraphModel(self, *args):
        return _designer.DataManager_CreateAllCasesProbeGraphModel(self, *args)

    def CreateAllCasesCalculationGraphModel(self, *args):
        return _designer.DataManager_CreateAllCasesCalculationGraphModel(self, *args)

    def CreateAllCasesSectionGraphModel(self, *args):
        return _designer.DataManager_CreateAllCasesSectionGraphModel(self, *args)

    def CreateAllCasesVectorExpressionGraphModel(self, *args):
        return _designer.DataManager_CreateAllCasesVectorExpressionGraphModel(self, *args)

    def DeleteGraphModelObject(self, graph):
        return _designer.DataManager_DeleteGraphModelObject(self, graph)

    def CreateFilterGraphModel(self, *args):
        return _designer.DataManager_CreateFilterGraphModel(self, *args)

    def CreateFilterProbeGraphModel(self, *args):
        return _designer.DataManager_CreateFilterProbeGraphModel(self, *args)

    def CreateFilterCalculationGraphModel(self, *args):
        return _designer.DataManager_CreateFilterCalculationGraphModel(self, *args)

    def CreateFilterSectionGraphModel(self, *args):
        return _designer.DataManager_CreateFilterSectionGraphModel(self, *args)

    def CreateSkewGraph(self, dataset, col, skew, period, step):
        return _designer.DataManager_CreateSkewGraph(self, dataset, col, skew, period, step)

    def CreateSkewGraphWithUnit(self, dataset, col, skew, skewunit, period, periodunit, step):
        return _designer.DataManager_CreateSkewGraphWithUnit(self, dataset, col, skew, skewunit, period, periodunit, step)

    def CombineSets(self, *args):
        return _designer.DataManager_CombineSets(self, *args)

    def SaveGraphImage(self, val, filename, width, height):
        return _designer.DataManager_SaveGraphImage(self, val, filename, width, height)

    def CreateParametricData(self, *args):
        return _designer.DataManager_CreateParametricData(self, *args)

    def CreateParametricDataWithName(self, *args):
        return _designer.DataManager_CreateParametricDataWithName(self, *args)

    def CreateParametricDataWithParameter(self, dataset, parameter):
        return _designer.DataManager_CreateParametricDataWithParameter(self, dataset, parameter)

    def CreateFFT(self, dataset, col, type, multiplier, min, max, createGraph=False):
        return _designer.DataManager_CreateFFT(self, dataset, col, type, multiplier, min, max, createGraph)

    def CreateFFTWithParameter(self, parameter):
        return _designer.DataManager_CreateFFTWithParameter(self, parameter)

    def CreateMovingAverage(self, *args):
        return _designer.DataManager_CreateMovingAverage(self, *args)

    def CreateExtractFrequency(self, parameter):
        return _designer.DataManager_CreateExtractFrequency(self, parameter)

    def CreateLoopIntegral(self, parameter):
        return _designer.DataManager_CreateLoopIntegral(self, parameter)

    def CreateAverageVersusDepth(self, parameter):
        return _designer.DataManager_CreateAverageVersusDepth(self, parameter)

    def Show(self, val):
        return _designer.DataManager_Show(self, val)

    def Hide(self, val):
        return _designer.DataManager_Hide(self, val)

    def GetAllXAxisTypes(self, val):
        return _designer.DataManager_GetAllXAxisTypes(self, val)

    def GetXAxisType(self, val):
        return _designer.DataManager_GetXAxisType(self, val)

    def SetXAxisType(self, val, type):
        return _designer.DataManager_SetXAxisType(self, val, type)
DataManager_swigregister = _designer.DataManager_swigregister
DataManager_swigregister(DataManager)

class Selection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Selection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Selection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Selection
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Selection_IsValid(self)

    def IsAttached(self):
        return _designer.Selection_IsAttached(self)

    def NumParts(self):
        return _designer.Selection_NumParts(self)

    def NumFaces(self):
        return _designer.Selection_NumFaces(self)

    def NumEdges(self):
        return _designer.Selection_NumEdges(self)

    def NumVertices(self):
        return _designer.Selection_NumVertices(self)

    def NumElements(self):
        return _designer.Selection_NumElements(self)

    def NumElementFaces(self):
        return _designer.Selection_NumElementFaces(self)

    def NumElementEdges(self):
        return _designer.Selection_NumElementEdges(self)

    def NumNodes(self):
        return _designer.Selection_NumNodes(self)

    def GetPart(self, index):
        return _designer.Selection_GetPart(self, index)

    def PartID(self, index):
        return _designer.Selection_PartID(self, index)

    def FaceID(self, index):
        return _designer.Selection_FaceID(self, index)

    def EdgeID(self, index):
        return _designer.Selection_EdgeID(self, index)

    def VertexID(self, index):
        return _designer.Selection_VertexID(self, index)

    def ElementID(self, index):
        return _designer.Selection_ElementID(self, index)

    def NodeID(self, index):
        return _designer.Selection_NodeID(self, index)

    def ElementFaceElementID(self, index):
        return _designer.Selection_ElementFaceElementID(self, index)

    def ElementFaceIndex(self, index):
        return _designer.Selection_ElementFaceIndex(self, index)

    def ElementEdgeElementID(self, index):
        return _designer.Selection_ElementEdgeElementID(self, index)

    def ElementEdgeIndex(self, index):
        return _designer.Selection_ElementEdgeIndex(self, index)

    def Clear(self):
        return _designer.Selection_Clear(self)

    def Detach(self):
        return _designer.Selection_Detach(self)

    def Attach(self):
        return _designer.Selection_Attach(self)

    def Add(self, selection):
        return _designer.Selection_Add(self, selection)

    def SelectPart(self, val):
        return _designer.Selection_SelectPart(self, val)

    def SelectFace(self, faceId):
        return _designer.Selection_SelectFace(self, faceId)

    def SelectEdge(self, edgeId):
        return _designer.Selection_SelectEdge(self, edgeId)

    def SelectVertex(self, vertexId):
        return _designer.Selection_SelectVertex(self, vertexId)

    def SelectElement(self, elementId):
        return _designer.Selection_SelectElement(self, elementId)

    def SelectNode(self, nodeId):
        return _designer.Selection_SelectNode(self, nodeId)

    def SelectElementFace(self, elementId, index):
        return _designer.Selection_SelectElementFace(self, elementId, index)

    def SelectElementEdge(self, elementId, index):
        return _designer.Selection_SelectElementEdge(self, elementId, index)

    def SelectPartByPosition(self, x, y, z):
        return _designer.Selection_SelectPartByPosition(self, x, y, z)

    def SelectFaceByPosition(self, x, y, z):
        return _designer.Selection_SelectFaceByPosition(self, x, y, z)

    def SelectEdgeByPosition(self, x, y, z):
        return _designer.Selection_SelectEdgeByPosition(self, x, y, z)

    def SelectVertexByPosition(self, x, y, z):
        return _designer.Selection_SelectVertexByPosition(self, x, y, z)

    def SelectElementByPosition(self, x, y, z):
        return _designer.Selection_SelectElementByPosition(self, x, y, z)

    def SelectElementFaceByPosition(self, x, y, z):
        return _designer.Selection_SelectElementFaceByPosition(self, x, y, z)

    def SelectElementEdgeByPosition(self, x, y, z):
        return _designer.Selection_SelectElementEdgeByPosition(self, x, y, z)

    def SelectNodeByPosition(self, x, y, z):
        return _designer.Selection_SelectNodeByPosition(self, x, y, z)

    def SelectPartByRange(self, lower, upper, visible):
        return _designer.Selection_SelectPartByRange(self, lower, upper, visible)

    def SelectFaceByRange(self, lower, upper, visible):
        return _designer.Selection_SelectFaceByRange(self, lower, upper, visible)

    def SelectEdgeByRange(self, lower, upper, visible):
        return _designer.Selection_SelectEdgeByRange(self, lower, upper, visible)

    def SelectVertexByRange(self, lower, upper, visible):
        return _designer.Selection_SelectVertexByRange(self, lower, upper, visible)

    def SelectElementByRange(self, lower, upper, visible):
        return _designer.Selection_SelectElementByRange(self, lower, upper, visible)

    def SelectElementFaceByRange(self, lower, upper, visible):
        return _designer.Selection_SelectElementFaceByRange(self, lower, upper, visible)

    def SelectElementEdgeByRange(self, lower, upper, visible):
        return _designer.Selection_SelectElementEdgeByRange(self, lower, upper, visible)

    def SelectNodeByRange(self, lower, upper, visible):
        return _designer.Selection_SelectNodeByRange(self, lower, upper, visible)

    def SelectPartByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible):
        return _designer.Selection_SelectPartByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible)

    def SelectFaceByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible):
        return _designer.Selection_SelectFaceByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible)

    def SelectEdgeByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible):
        return _designer.Selection_SelectEdgeByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible)

    def SelectVertexByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible):
        return _designer.Selection_SelectVertexByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible)

    def SelectElementByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible):
        return _designer.Selection_SelectElementByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible)

    def SelectElementFaceByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible):
        return _designer.Selection_SelectElementFaceByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible)

    def SelectElementEdgeByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible):
        return _designer.Selection_SelectElementEdgeByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible)

    def SelectNodeByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible):
        return _designer.Selection_SelectNodeByCylinder(self, center, center_axis, x_axis, inner, outer, startAngle, endAngle, is_useheight, top, bottom, visible)

    def SelectPartByCylinderObject(self, cylinder, visible):
        return _designer.Selection_SelectPartByCylinderObject(self, cylinder, visible)

    def SelectFaceByCylinderObject(self, cylinder, visible):
        return _designer.Selection_SelectFaceByCylinderObject(self, cylinder, visible)

    def SelectEdgeByCylinderObject(self, cylinder, visible):
        return _designer.Selection_SelectEdgeByCylinderObject(self, cylinder, visible)

    def SelectVertexByCylinderObject(self, cylinder, visible):
        return _designer.Selection_SelectVertexByCylinderObject(self, cylinder, visible)

    def SelectElementByCylinderObject(self, cylinder, visible):
        return _designer.Selection_SelectElementByCylinderObject(self, cylinder, visible)

    def SelectElementFaceByCylinderObject(self, cylinder, visible):
        return _designer.Selection_SelectElementFaceByCylinderObject(self, cylinder, visible)

    def SelectElementEdgeByCylinderObject(self, cylinder, visible):
        return _designer.Selection_SelectElementEdgeByCylinderObject(self, cylinder, visible)

    def SelectNodeByCylinderObject(self, cylinder, visible):
        return _designer.Selection_SelectNodeByCylinderObject(self, cylinder, visible)

    def SetBlockUpdateView(self, block):
        return _designer.Selection_SetBlockUpdateView(self, block)
Selection_swigregister = _designer.Selection_swigregister
Selection_swigregister(Selection)

class FunctionObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_FunctionObject
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.FunctionObject_IsValid(self)

    def GetParameters(self):
        return _designer.FunctionObject_GetParameters(self)

    def GetPropertyHelp(self, propName):
        return _designer.FunctionObject_GetPropertyHelp(self, propName)

    def GetParameterTable(self):
        return _designer.FunctionObject_GetParameterTable(self)

    def GetType(self):
        return _designer.FunctionObject_GetType(self)

    def GetValue(self, propName):
        return _designer.FunctionObject_GetValue(self, propName)

    def SetValue(self, propName, value):
        return _designer.FunctionObject_SetValue(self, propName, value)

    def SetValueWithUnit(self, propName, value, unitName):
        return _designer.FunctionObject_SetValueWithUnit(self, propName, value, unitName)

    def SetTableProperty(self, propName, set):
        return _designer.FunctionObject_SetTableProperty(self, propName, set)

    def NumFunctions(self):
        return _designer.FunctionObject_NumFunctions(self)

    def GetFunction(self, i):
        return _designer.FunctionObject_GetFunction(self, i)

    def AddFunction(self, function):
        return _designer.FunctionObject_AddFunction(self, function)

    def RemoveFunction(self, index):
        return _designer.FunctionObject_RemoveFunction(self, index)

    def SetTable(self, list):
        return _designer.FunctionObject_SetTable(self, list)

    def SetFlagByName(self, propName, scriptKeyName):
        return _designer.FunctionObject_SetFlagByName(self, propName, scriptKeyName)
FunctionObject_swigregister = _designer.FunctionObject_swigregister
FunctionObject_swigregister(FunctionObject)

class Condition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Condition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Condition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Condition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Condition_IsValid(self)

    def GetName(self):
        return _designer.Condition_GetName(self)

    def GetType(self):
        return _designer.Condition_GetType(self)

    def GetScriptTypeName(self):
        return _designer.Condition_GetScriptTypeName(self)

    def GetParts(self):
        return _designer.Condition_GetParts(self)

    def GetSecondaryParts(self):
        return _designer.Condition_GetSecondaryParts(self)

    def GetPartsByGroup(self, group):
        return _designer.Condition_GetPartsByGroup(self, group)

    def GetPartsByTargetType(self, targetTypeName):
        return _designer.Condition_GetPartsByTargetType(self, targetTypeName)

    def SetName(self, name):
        return _designer.Condition_SetName(self, name)

    def AddPart(self, val):
        return _designer.Condition_AddPart(self, val)

    def AddPartByGroup(self, val, group):
        return _designer.Condition_AddPartByGroup(self, val, group)

    def AddPartByTargetType(self, val, targetTypeName):
        return _designer.Condition_AddPartByTargetType(self, val, targetTypeName)

    def RemovePart(self, id):
        return _designer.Condition_RemovePart(self, id)

    def RemovePartByGroup(self, id, group):
        return _designer.Condition_RemovePartByGroup(self, id, group)

    def RemovePartByTargetType(self, id, targetTypeName):
        return _designer.Condition_RemovePartByTargetType(self, id, targetTypeName)

    def ClearParts(self):
        return _designer.Condition_ClearParts(self)

    def ClearPartsByGroup(self, group):
        return _designer.Condition_ClearPartsByGroup(self, group)

    def NumSets(self, group):
        return _designer.Condition_NumSets(self, group)

    def GetSet(self, index, group):
        return _designer.Condition_GetSet(self, index, group)

    def AddSet(self, set, group):
        return _designer.Condition_AddSet(self, set, group)

    def AddGroup(self, set, group):
        return _designer.Condition_AddGroup(self, set, group)

    def AddSetFromModel(self, val, group):
        return _designer.Condition_AddSetFromModel(self, val, group)

    def RemoveSet(self, val, group):
        return _designer.Condition_RemoveSet(self, val, group)

    def RemoveAllSets(self, group):
        return _designer.Condition_RemoveAllSets(self, group)

    def AddSelected(self, selection):
        return _designer.Condition_AddSelected(self, selection)

    def AddSelectedByGroup(self, Selection, group):
        return _designer.Condition_AddSelectedByGroup(self, Selection, group)

    def AddSecondaryPart(self, val):
        return _designer.Condition_AddSecondaryPart(self, val)

    def AddSecondarySelected(self, selection):
        return _designer.Condition_AddSecondarySelected(self, selection)

    def RemoveSecondaryPart(self, id):
        return _designer.Condition_RemoveSecondaryPart(self, id)

    def GetSelection(self):
        return _designer.Condition_GetSelection(self)

    def GetSecondarySelection(self):
        return _designer.Condition_GetSecondarySelection(self)

    def GetSelectionByGroup(self, group):
        return _designer.Condition_GetSelectionByGroup(self, group)

    def GetPropertyNames(self):
        return _designer.Condition_GetPropertyNames(self)

    def GetPropertyHelp(self, propName):
        return _designer.Condition_GetPropertyHelp(self, propName)

    def GetFlagPropertyHelp(self, propName, val):
        return _designer.Condition_GetFlagPropertyHelp(self, propName, val)

    def GetPropertyType(self, propName):
        return _designer.Condition_GetPropertyType(self, propName)

    def GetPropertyTable(self):
        return _designer.Condition_GetPropertyTable(self)

    def GetValue(self, propName):
        return _designer.Condition_GetValue(self, propName)

    def GetStringValue(self, propName):
        return _designer.Condition_GetStringValue(self, propName)

    def GetValueWithUnit(self, propName, unitName):
        return _designer.Condition_GetValueWithUnit(self, propName, unitName)

    def SetValue(self, propName, val):
        return _designer.Condition_SetValue(self, propName, val)

    def SetValueWithUnit(self, propName, value, unitName):
        return _designer.Condition_SetValueWithUnit(self, propName, value, unitName)

    def SetComplexValue(self, propName, real, imag):
        return _designer.Condition_SetComplexValue(self, propName, real, imag)

    def GetKeyNames(self, name):
        return _designer.Condition_GetKeyNames(self, name)

    def SetFlagByName(self, propName, scriptKeyName):
        return _designer.Condition_SetFlagByName(self, propName, scriptKeyName)

    def GetFlagAsString(self, name):
        return _designer.Condition_GetFlagAsString(self, name)

    def SetPoint(self, propName, value):
        return _designer.Condition_SetPoint(self, propName, value)

    def SetXYZPoint(self, propName, x, y, z):
        return _designer.Condition_SetXYZPoint(self, propName, x, y, z)

    def GetPoint(self, propName):
        return _designer.Condition_GetPoint(self, propName)

    def SetPointWithUnit(self, propName, value, unitName):
        return _designer.Condition_SetPointWithUnit(self, propName, value, unitName)

    def SetXYZPointWithUnit(self, propName, x, y, z, unitName):
        return _designer.Condition_SetXYZPointWithUnit(self, propName, x, y, z, unitName)

    def GetPointWithUnit(self, propName, unitName):
        return _designer.Condition_GetPointWithUnit(self, propName, unitName)

    def SetDirectionFromReferenceTarget(self, *args):
        return _designer.Condition_SetDirectionFromReferenceTarget(self, *args)

    def GetReferenceTarget(self, propName):
        return _designer.Condition_GetReferenceTarget(self, propName)

    def SetCoordinateSystem(self, propName, val):
        return _designer.Condition_SetCoordinateSystem(self, propName, val)

    def GetCoordinateSystemName(self, propName):
        return _designer.Condition_GetCoordinateSystemName(self, propName)

    def GetCoordinateSystemIndex(self, propName):
        return _designer.Condition_GetCoordinateSystemIndex(self, propName)

    def SetTableProperty(self, propName, set):
        return _designer.Condition_SetTableProperty(self, propName, set)

    def SetTableFromFile(self, propName, filename):
        return _designer.Condition_SetTableFromFile(self, propName, filename)

    def SetFunction(self, func):
        return _designer.Condition_SetFunction(self, func)

    def GetFunction(self):
        return _designer.Condition_GetFunction(self)

    def SetTable(self, propName, mat):
        return _designer.Condition_SetTable(self, propName, mat)

    def SetTableWithUnit(self, propName, mat, unitlist):
        return _designer.Condition_SetTableWithUnit(self, propName, mat, unitlist)

    def SetTextTable(self, propName, mat):
        return _designer.Condition_SetTextTable(self, propName, mat)

    def GetTable(self, propName):
        return _designer.Condition_GetTable(self, propName)

    def GetTableList(self, propName):
        return _designer.Condition_GetTableList(self, propName)

    def SetLink(self, name):
        return _designer.Condition_SetLink(self, name)

    def SetLinkWithType(self, type, val):
        return _designer.Condition_SetLinkWithType(self, type, val)

    def GetLink(self):
        return _designer.Condition_GetLink(self)

    def GetLinkWithType(self, type):
        return _designer.Condition_GetLinkWithType(self, type)

    def SetInstanceLink(self, propName, val):
        return _designer.Condition_SetInstanceLink(self, propName, val)

    def GetInstanceLink(self, propName):
        return _designer.Condition_GetInstanceLink(self, propName)

    def CreateSubCondition(self, typeName, name):
        return _designer.Condition_CreateSubCondition(self, typeName, name)

    def InsertSubCondition(self, condition, subIndex):
        return _designer.Condition_InsertSubCondition(self, condition, subIndex)

    def InsertSubConditionByIndex(self, conditionIndex, subIndex):
        return _designer.Condition_InsertSubConditionByIndex(self, conditionIndex, subIndex)

    def AddSubCondition(self, val, subIndex):
        return _designer.Condition_AddSubCondition(self, val, subIndex)

    def NumSubConditions(self):
        return _designer.Condition_NumSubConditions(self)

    def GetSubCondition(self, val):
        return _designer.Condition_GetSubCondition(self, val)

    def RemoveSubCondition(self, val):
        return _designer.Condition_RemoveSubCondition(self, val)

    def GetMaterial(self, propName):
        return _designer.Condition_GetMaterial(self, propName)

    def SetMaterial(self, propName, material):
        return _designer.Condition_SetMaterial(self, propName, material)

    def SetMaterialByName(self, propName, matname):
        return _designer.Condition_SetMaterialByName(self, propName, matname)

    def ClearTargets(self):
        return _designer.Condition_ClearTargets(self)

    def AddTarget(self, name):
        return _designer.Condition_AddTarget(self, name)

    def NodeIsOnTarget(self, *args):
        return _designer.Condition_NodeIsOnTarget(self, *args)

    def HasTargetOnXYPlane(self, *args):
        return _designer.Condition_HasTargetOnXYPlane(self, *args)

    def HasTargetOnYZPlane(self, *args):
        return _designer.Condition_HasTargetOnYZPlane(self, *args)

    def HasTargetOnZXPlane(self, *args):
        return _designer.Condition_HasTargetOnZXPlane(self, *args)
Condition_swigregister = _designer.Condition_swigregister
Condition_swigregister(Condition)

class Step(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Step, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Step, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Step
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Step_IsValid(self)

    def GetPropertyNames(self):
        return _designer.Step_GetPropertyNames(self)

    def GetPropertyHelp(self, propName):
        return _designer.Step_GetPropertyHelp(self, propName)

    def GetPropertyType(self, propName):
        return _designer.Step_GetPropertyType(self, propName)

    def GetPropertyTable(self):
        return _designer.Step_GetPropertyTable(self)

    def GetFlagPropertyHelp(self, propName, val):
        return _designer.Step_GetFlagPropertyHelp(self, propName, val)

    def GetValue(self, propName):
        return _designer.Step_GetValue(self, propName)

    def GetValueWithUnit(self, propName, unitName):
        return _designer.Step_GetValueWithUnit(self, propName, unitName)

    def SetValue(self, propName, val):
        return _designer.Step_SetValue(self, propName, val)

    def SetValueWithUnit(self, propName, value, unitName):
        return _designer.Step_SetValueWithUnit(self, propName, value, unitName)

    def GetKeyNames(self, name):
        return _designer.Step_GetKeyNames(self, name)

    def SetFlagByName(self, propName, scriptKeyName):
        return _designer.Step_SetFlagByName(self, propName, scriptKeyName)

    def GetFlagAsString(self, name):
        return _designer.Step_GetFlagAsString(self, name)

    def SetTableProperty(self, propName, set):
        return _designer.Step_SetTableProperty(self, propName, set)

    def SetTable(self, propName, mat):
        return _designer.Step_SetTable(self, propName, mat)

    def GetTable(self, propName):
        return _designer.Step_GetTable(self, propName)

    def GetTableList(self, propName):
        return _designer.Step_GetTableList(self, propName)

    def SetTableWithUnit(self, propName, mat, unitlist):
        return _designer.Step_SetTableWithUnit(self, propName, mat, unitlist)

    def SetMatrixWithUnit(self, propName, mat, unitlist):
        return _designer.Step_SetMatrixWithUnit(self, propName, mat, unitlist)

    def SetTableFromFile(self, propName, filename):
        return _designer.Step_SetTableFromFile(self, propName, filename)

    def SetComplexValue(self, propName, real, imag):
        return _designer.Step_SetComplexValue(self, propName, real, imag)

    def SetLinkWithType(self, type, val):
        return _designer.Step_SetLinkWithType(self, type, val)

    def GetLinkWithType(self, type):
        return _designer.Step_GetLinkWithType(self, type)

    def SetInstanceLink(self, propName, val):
        return _designer.Step_SetInstanceLink(self, propName, val)

    def GetInstanceLink(self, propName):
        return _designer.Step_GetInstanceLink(self, propName)
Step_swigregister = _designer.Step_swigregister
Step_swigregister(Step)

class MeshControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshControl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_MeshControl
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.MeshControl_IsValid(self)

    def SetValue(self, propName, val):
        return _designer.MeshControl_SetValue(self, propName, val)

    def SetValueWithUnit(self, propName, value, unitName):
        return _designer.MeshControl_SetValueWithUnit(self, propName, value, unitName)

    def GetValue(self, propName):
        return _designer.MeshControl_GetValue(self, propName)

    def GetValueWithUnit(self, propName, unitName):
        return _designer.MeshControl_GetValueWithUnit(self, propName, unitName)

    def SetPoint(self, propName, value):
        return _designer.MeshControl_SetPoint(self, propName, value)

    def SetXYZPoint(self, propName, x, y, z):
        return _designer.MeshControl_SetXYZPoint(self, propName, x, y, z)

    def GetPoint(self, propName):
        return _designer.MeshControl_GetPoint(self, propName)

    def SetCoordinateSystem(self, propName, val):
        return _designer.MeshControl_SetCoordinateSystem(self, propName, val)

    def GetCoordinateSystemName(self, propName):
        return _designer.MeshControl_GetCoordinateSystemName(self, propName)

    def GetCoordinateSystemIndex(self, propName):
        return _designer.MeshControl_GetCoordinateSystemIndex(self, propName)

    def SetFlagByName(self, propName, scriptKeyName):
        return _designer.MeshControl_SetFlagByName(self, propName, scriptKeyName)

    def GetKeyNames(self, name):
        return _designer.MeshControl_GetKeyNames(self, name)

    def GetFlagAsString(self, name):
        return _designer.MeshControl_GetFlagAsString(self, name)

    def NumConditions(self):
        return _designer.MeshControl_NumConditions(self)

    def GetCondition(self, val):
        return _designer.MeshControl_GetCondition(self, val)

    def CreateCondition(self, typeName, name):
        return _designer.MeshControl_CreateCondition(self, typeName, name)

    def DeleteCondition(self, val):
        return _designer.MeshControl_DeleteCondition(self, val)

    def GetPropertyNames(self):
        return _designer.MeshControl_GetPropertyNames(self)

    def GetPropertyHelp(self, propName):
        return _designer.MeshControl_GetPropertyHelp(self, propName)

    def GetPropertyType(self, propName):
        return _designer.MeshControl_GetPropertyType(self, propName)

    def GetPropertyTable(self):
        return _designer.MeshControl_GetPropertyTable(self)

    def GetConditionTypeNames(self):
        return _designer.MeshControl_GetConditionTypeNames(self)

    def CreateSizeCondition(self, typeName, selection, value):
        return _designer.MeshControl_CreateSizeCondition(self, typeName, selection, value)

    def CreateSizeConditionWithUnit(self, typeName, selection, value, unitName):
        return _designer.MeshControl_CreateSizeConditionWithUnit(self, typeName, selection, value, unitName)

    def CreateSkinDepthSize(self, typeName, selection, skinDepth, division):
        return _designer.MeshControl_CreateSkinDepthSize(self, typeName, selection, skinDepth, division)

    def CreateSkinDepthSizeWithUnit(self, typeName, selection, skinDepth, division, unitName):
        return _designer.MeshControl_CreateSkinDepthSizeWithUnit(self, typeName, selection, skinDepth, division, unitName)

    def CreateLayerMesh(self, selection, thickness, division, lamination):
        return _designer.MeshControl_CreateLayerMesh(self, selection, thickness, division, lamination)

    def CreateLayerMeshWithUnit(self, selection, thickness, division, lamination, unitName):
        return _designer.MeshControl_CreateLayerMeshWithUnit(self, selection, thickness, division, lamination, unitName)

    def NumConditionsByType(self, typeName):
        return _designer.MeshControl_NumConditionsByType(self, typeName)

    def GetConditionByType(self, typeName, val):
        return _designer.MeshControl_GetConditionByType(self, typeName, val)

    def DeleteConditionByType(self, typeName, val):
        return _designer.MeshControl_DeleteConditionByType(self, typeName, val)

    def GetTable(self, propName):
        return _designer.MeshControl_GetTable(self, propName)

    def SetTableProperty(self, propName, set):
        return _designer.MeshControl_SetTableProperty(self, propName, set)
MeshControl_swigregister = _designer.MeshControl_swigregister
MeshControl_swigregister(MeshControl)

class StudyProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StudyProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StudyProperties, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_StudyProperties
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.StudyProperties_IsValid(self)

    def GetPropertyNames(self):
        return _designer.StudyProperties_GetPropertyNames(self)

    def GetPropertyHelp(self, propName):
        return _designer.StudyProperties_GetPropertyHelp(self, propName)

    def GetFlagPropertyHelp(self, propName, val):
        return _designer.StudyProperties_GetFlagPropertyHelp(self, propName, val)

    def GetPropertyType(self, propName):
        return _designer.StudyProperties_GetPropertyType(self, propName)

    def GetPropertyTable(self):
        return _designer.StudyProperties_GetPropertyTable(self)

    def GetKeyNames(self, name):
        return _designer.StudyProperties_GetKeyNames(self, name)

    def SetFlagByName(self, propName, scriptKeyName):
        return _designer.StudyProperties_SetFlagByName(self, propName, scriptKeyName)

    def GetFlagAsString(self, name):
        return _designer.StudyProperties_GetFlagAsString(self, name)

    def GetValue(self, propName):
        return _designer.StudyProperties_GetValue(self, propName)

    def SetValue(self, propName, val):
        return _designer.StudyProperties_SetValue(self, propName, val)

    def SetValueWithUnit(self, propName, value, unitName):
        return _designer.StudyProperties_SetValueWithUnit(self, propName, value, unitName)

    def GetValueWithUnit(self, propName, unitName):
        return _designer.StudyProperties_GetValueWithUnit(self, propName, unitName)

    def GetStringValue(self, propName):
        return _designer.StudyProperties_GetStringValue(self, propName)

    def SetCoordinateSystem(self, propName, val):
        return _designer.StudyProperties_SetCoordinateSystem(self, propName, val)

    def GetCoordinateSystemName(self, propName):
        return _designer.StudyProperties_GetCoordinateSystemName(self, propName)

    def GetCoordinateSystemIndex(self, propName):
        return _designer.StudyProperties_GetCoordinateSystemIndex(self, propName)

    def SetTableProperty(self, propName, set):
        return _designer.StudyProperties_SetTableProperty(self, propName, set)

    def GetTable(self, propName):
        return _designer.StudyProperties_GetTable(self, propName)

    def GetTableList(self, propName):
        return _designer.StudyProperties_GetTableList(self, propName)

    def SetTable(self, propName, mat):
        return _designer.StudyProperties_SetTable(self, propName, mat)

    def SetTableWithUnit(self, propName, mat, unitlist):
        return _designer.StudyProperties_SetTableWithUnit(self, propName, mat, unitlist)

    def SetMatrixWithUnit(self, propName, mat, unitlist):
        return _designer.StudyProperties_SetMatrixWithUnit(self, propName, mat, unitlist)

    def SetTableFromFile(self, propName, filename):
        return _designer.StudyProperties_SetTableFromFile(self, propName, filename)

    def SetComplexValue(self, propName, real, imag):
        return _designer.StudyProperties_SetComplexValue(self, propName, real, imag)
StudyProperties_swigregister = _designer.StudyProperties_swigregister
StudyProperties_swigregister(StudyProperties)

class SectionGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SectionGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SectionGraph, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_SectionGraph
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.SectionGraph_IsValid(self)

    def GetDataSet(self):
        return _designer.SectionGraph_GetDataSet(self)

    def GetCaseDataSet(self, caseno):
        return _designer.SectionGraph_GetCaseDataSet(self, caseno)

    def SetName(self, title):
        return _designer.SectionGraph_SetName(self, title)

    def GetName(self):
        return _designer.SectionGraph_GetName(self)

    def SetResultType(self, *args):
        return _designer.SectionGraph_SetResultType(self, *args)

    def GetResultType(self):
        return _designer.SectionGraph_GetResultType(self)

    def GetResultTypeNames(self):
        return _designer.SectionGraph_GetResultTypeNames(self)

    def SetAbscissa(self, name):
        return _designer.SectionGraph_SetAbscissa(self, name)

    def SetResultUnit(self, name):
        return _designer.SectionGraph_SetResultUnit(self, name)

    def SetResultComponent(self, name):
        return _designer.SectionGraph_SetResultComponent(self, name)

    def GetResultComponent(self):
        return _designer.SectionGraph_GetResultComponent(self)

    def GetComponentNames(self):
        return _designer.SectionGraph_GetComponentNames(self)

    def GetSymmetries(self):
        return _designer.SectionGraph_GetSymmetries(self)

    def SetComponent(self, name):
        return _designer.SectionGraph_SetComponent(self, name)

    def GetComponent(self):
        return _designer.SectionGraph_GetComponent(self)

    def GetAbscissa(self):
        return _designer.SectionGraph_GetAbscissa(self)

    def GetResultUnit(self):
        return _designer.SectionGraph_GetResultUnit(self)

    def GetStart(self):
        return _designer.SectionGraph_GetStart(self)

    def GetEnd(self):
        return _designer.SectionGraph_GetEnd(self)

    def GetRadius(self):
        return _designer.SectionGraph_GetRadius(self)

    def GetAngle(self):
        return _designer.SectionGraph_GetAngle(self)

    def GetCenter(self):
        return _designer.SectionGraph_GetCenter(self)

    def GetAxis(self):
        return _designer.SectionGraph_GetAxis(self)

    def GetLineOffset(self):
        return _designer.SectionGraph_GetLineOffset(self)

    def GetLineOffsetWithUnit(self, unitName):
        return _designer.SectionGraph_GetLineOffsetWithUnit(self, unitName)

    def GetArcOffset(self):
        return _designer.SectionGraph_GetArcOffset(self)

    def GetArcOffsetWithUnit(self, unitName):
        return _designer.SectionGraph_GetArcOffsetWithUnit(self, unitName)

    def GetPhase(self):
        return _designer.SectionGraph_GetPhase(self)

    def SetLine(self, start, end):
        return _designer.SectionGraph_SetLine(self, start, end)

    def SetLineExpression(self, startX, startY, startZ, endX, endY, endZ):
        return _designer.SectionGraph_SetLineExpression(self, startX, startY, startZ, endX, endY, endZ)

    def SetLineWithUnit(self, start, end, unitName):
        return _designer.SectionGraph_SetLineWithUnit(self, start, end, unitName)

    def SetLineOffset(self, offset):
        return _designer.SectionGraph_SetLineOffset(self, offset)

    def SetLineOffsetWithUnit(self, offset, unitName):
        return _designer.SectionGraph_SetLineOffsetWithUnit(self, offset, unitName)

    def SetArc(self, origin, axis, start, angle):
        return _designer.SectionGraph_SetArc(self, origin, axis, start, angle)

    def SetArcExpression(self, *args):
        return _designer.SectionGraph_SetArcExpression(self, *args)

    def SetArcWithUnit(self, origin, axis, start, angle, unitName):
        return _designer.SectionGraph_SetArcWithUnit(self, origin, axis, start, angle, unitName)

    def SetArcByRadius(self, origin, axis, radius, angle):
        return _designer.SectionGraph_SetArcByRadius(self, origin, axis, radius, angle)

    def SetArcByRadiusWithUnit(self, origin, axis, radius, angle, unitName):
        return _designer.SectionGraph_SetArcByRadiusWithUnit(self, origin, axis, radius, angle, unitName)

    def SetArcOffset(self, offset):
        return _designer.SectionGraph_SetArcOffset(self, offset)

    def SetArcOffsetWithUnit(self, offset, unitName):
        return _designer.SectionGraph_SetArcOffsetWithUnit(self, offset, unitName)

    def GetUnit(self):
        return _designer.SectionGraph_GetUnit(self)

    def SetAirRegionSectionGraph(self, numPoints):
        return _designer.SectionGraph_SetAirRegionSectionGraph(self, numPoints)

    def SetSteps(self, steps):
        return _designer.SectionGraph_SetSteps(self, steps)

    def SetAllSteps(self):
        return _designer.SectionGraph_SetAllSteps(self)

    def SetStepsByString(self, str):
        return _designer.SectionGraph_SetStepsByString(self, str)

    def SetStepsByInterval(self, interval):
        return _designer.SectionGraph_SetStepsByInterval(self, interval)

    def SetHistorySteps(self, *args):
        return _designer.SectionGraph_SetHistorySteps(self, *args)

    def SetHistoryAllSteps(self):
        return _designer.SectionGraph_SetHistoryAllSteps(self)

    def SetHistoryStepsByString(self, str):
        return _designer.SectionGraph_SetHistoryStepsByString(self, str)

    def SetResultCoordinate(self, name):
        return _designer.SectionGraph_SetResultCoordinate(self, name)

    def GetResultCoordinateName(self):
        return _designer.SectionGraph_GetResultCoordinateName(self)

    def GetResultCoordinateNameList(self):
        return _designer.SectionGraph_GetResultCoordinateNameList(self)

    def SetBoundaryCoordinate(self, name):
        return _designer.SectionGraph_SetBoundaryCoordinate(self, name)

    def GetBoundaryCoordinateName(self):
        return _designer.SectionGraph_GetBoundaryCoordinateName(self)

    def GetBoundaryCoordinateNameList(self):
        return _designer.SectionGraph_GetBoundaryCoordinateNameList(self)

    def SetPhase(self, value):
        return _designer.SectionGraph_SetPhase(self, value)

    def SetPhaseType(self, value):
        return _designer.SectionGraph_SetPhaseType(self, value)

    def GetPhaseType(self):
        return _designer.SectionGraph_GetPhaseType(self)

    def SetSymmetry(self, xy, yz, zx):
        return _designer.SectionGraph_SetSymmetry(self, xy, yz, zx)

    def SetSymmetryYZ(self, yz):
        return _designer.SectionGraph_SetSymmetryYZ(self, yz)

    def SetSymmetryZX(self, zx):
        return _designer.SectionGraph_SetSymmetryZX(self, zx)

    def SetSymmetryXY(self, xy):
        return _designer.SectionGraph_SetSymmetryXY(self, xy)

    def GetSymmetryYZ(self):
        return _designer.SectionGraph_GetSymmetryYZ(self)

    def GetSymmetryZX(self):
        return _designer.SectionGraph_GetSymmetryZX(self)

    def GetSymmetryXY(self):
        return _designer.SectionGraph_GetSymmetryXY(self)

    def SetAirRegionFlag(self, use):
        return _designer.SectionGraph_SetAirRegionFlag(self, use)

    def GetSeparateLines(self):
        return _designer.SectionGraph_GetSeparateLines(self)

    def SetSeparateLines(self, use):
        return _designer.SectionGraph_SetSeparateLines(self, use)

    def Build(self):
        return _designer.SectionGraph_Build(self)

    def GetReferenceStep(self):
        return _designer.SectionGraph_GetReferenceStep(self)

    def SetReferenceStep(self, step):
        return _designer.SectionGraph_SetReferenceStep(self, step)

    def GetTemperature(self):
        return _designer.SectionGraph_GetTemperature(self)

    def SetTemperature(self, value):
        return _designer.SectionGraph_SetTemperature(self, value)

    def SetUserComponentType(self, name):
        return _designer.SectionGraph_SetUserComponentType(self, name)

    def GetUserComponentType(self):
        return _designer.SectionGraph_GetUserComponentType(self)

    def SetTruncationType(self, type):
        return _designer.SectionGraph_SetTruncationType(self, type)

    def GetTruncationType(self):
        return _designer.SectionGraph_GetTruncationType(self)

    def SetMaximumCopies(self, maximumCopies):
        return _designer.SectionGraph_SetMaximumCopies(self, maximumCopies)

    def GetMaximumCopies(self):
        return _designer.SectionGraph_GetMaximumCopies(self)

    def SetNumCopies(self, numCopies):
        return _designer.SectionGraph_SetNumCopies(self, numCopies)

    def GetNumCopies(self):
        return _designer.SectionGraph_GetNumCopies(self)

    def SetConvergenceTolerance(self, tolerance):
        return _designer.SectionGraph_SetConvergenceTolerance(self, tolerance)

    def GetConvergenceTolerance(self):
        return _designer.SectionGraph_GetConvergenceTolerance(self)

    def SetTargetAllParts(self, all):
        return _designer.SectionGraph_SetTargetAllParts(self, all)

    def TargetAllParts(self):
        return _designer.SectionGraph_TargetAllParts(self)

    def ClearParts(self):
        return _designer.SectionGraph_ClearParts(self)

    def NumParts(self):
        return _designer.SectionGraph_NumParts(self)

    def NumSets(self, group=0):
        return _designer.SectionGraph_NumSets(self, group)

    def AddSelected(self, selection):
        return _designer.SectionGraph_AddSelected(self, selection)

    def AddSet(self, set, group=0):
        return _designer.SectionGraph_AddSet(self, set, group)

    def GetSelection(self):
        return _designer.SectionGraph_GetSelection(self)

    def GetSet(self, index, group=0):
        return _designer.SectionGraph_GetSet(self, index, group)
SectionGraph_swigregister = _designer.SectionGraph_swigregister
SectionGraph_swigregister(SectionGraph)

class VectorDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_VectorDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.VectorDefinition_IsValid(self)

    def SetName(self, title):
        return _designer.VectorDefinition_SetName(self, title)

    def GetName(self):
        return _designer.VectorDefinition_GetName(self)

    def SetRange(self, min, max):
        return _designer.VectorDefinition_SetRange(self, min, max)

    def GetMax(self):
        return _designer.VectorDefinition_GetMax(self)

    def GetMin(self):
        return _designer.VectorDefinition_GetMin(self)

    def SetGradient(self, name, levels, smooth):
        return _designer.VectorDefinition_SetGradient(self, name, levels, smooth)

    def GetGradientName(self):
        return _designer.VectorDefinition_GetGradientName(self)

    def GetGradientNames(self):
        return _designer.VectorDefinition_GetGradientNames(self)

    def GetLevels(self):
        return _designer.VectorDefinition_GetLevels(self)

    def GetSmooth(self):
        return _designer.VectorDefinition_GetSmooth(self)

    def SetLogScale(self, logscale):
        return _designer.VectorDefinition_SetLogScale(self, logscale)

    def GetLogScale(self):
        return _designer.VectorDefinition_GetLogScale(self)

    def SetResultType(self, *args):
        return _designer.VectorDefinition_SetResultType(self, *args)

    def GetResultType(self):
        return _designer.VectorDefinition_GetResultType(self)

    def GetResultTypeNames(self):
        return _designer.VectorDefinition_GetResultTypeNames(self)

    def GetScaleByParts(self):
        return _designer.VectorDefinition_GetScaleByParts(self)

    def SetScaleByParts(self, scaleByParts):
        return _designer.VectorDefinition_SetScaleByParts(self, scaleByParts)

    def SetAutoScale(self, scale):
        return _designer.VectorDefinition_SetAutoScale(self, scale)

    def GetAutoScale(self):
        return _designer.VectorDefinition_GetAutoScale(self)

    def SetNumLabels(self, labels):
        return _designer.VectorDefinition_SetNumLabels(self, labels)

    def GetNumLabels(self):
        return _designer.VectorDefinition_GetNumLabels(self)

    def SetDisplayScaleBar(self, displayScaleBar):
        return _designer.VectorDefinition_SetDisplayScaleBar(self, displayScaleBar)

    def GetDisplayScaleBar(self):
        return _designer.VectorDefinition_GetDisplayScaleBar(self)

    def SetUseSpecifiedPosition(self, useSpecifiedPosition):
        return _designer.VectorDefinition_SetUseSpecifiedPosition(self, useSpecifiedPosition)

    def GetUseSpecifiedPosition(self):
        return _designer.VectorDefinition_GetUseSpecifiedPosition(self)

    def SetScaleBarPosition(self, leftPos, topPos):
        return _designer.VectorDefinition_SetScaleBarPosition(self, leftPos, topPos)

    def GetLeftPosition(self):
        return _designer.VectorDefinition_GetLeftPosition(self)

    def GetTopPosition(self):
        return _designer.VectorDefinition_GetTopPosition(self)

    def SetArrow(self, style, place, scale, length):
        return _designer.VectorDefinition_SetArrow(self, style, place, scale, length)

    def SetStyle(self, style):
        return _designer.VectorDefinition_SetStyle(self, style)

    def SetPlace(self, place):
        return _designer.VectorDefinition_SetPlace(self, place)

    def SetScaled(self, scale):
        return _designer.VectorDefinition_SetScaled(self, scale)

    def SetSize(self, length):
        return _designer.VectorDefinition_SetSize(self, length)

    def SetDisplayShellBeam(self, isChecked):
        return _designer.VectorDefinition_SetDisplayShellBeam(self, isChecked)

    def GetStyle(self):
        return _designer.VectorDefinition_GetStyle(self)

    def GetStyleNames(self):
        return _designer.VectorDefinition_GetStyleNames(self)

    def GetPlace(self):
        return _designer.VectorDefinition_GetPlace(self)

    def GetPlaceNames(self):
        return _designer.VectorDefinition_GetPlaceNames(self)

    def GetScaled(self):
        return _designer.VectorDefinition_GetScaled(self)

    def GetSize(self):
        return _designer.VectorDefinition_GetSize(self)

    def GetDisplayShellBeam(self):
        return _designer.VectorDefinition_GetDisplayShellBeam(self)

    def DigitsNotationTypeName(self):
        return _designer.VectorDefinition_DigitsNotationTypeName(self)

    def SetDigitsNotationType(self, type):
        return _designer.VectorDefinition_SetDigitsNotationType(self, type)

    def Precision(self):
        return _designer.VectorDefinition_Precision(self)

    def SetPrecision(self, precision):
        return _designer.VectorDefinition_SetPrecision(self, precision)

    def SetDisplayAllParts(self, use):
        return _designer.VectorDefinition_SetDisplayAllParts(self, use)

    def RemoveAllParts(self):
        return _designer.VectorDefinition_RemoveAllParts(self)

    def AddPart(self, partId):
        return _designer.VectorDefinition_AddPart(self, partId)

    def GetDisplayAllParts(self):
        return _designer.VectorDefinition_GetDisplayAllParts(self)

    def SetVectorType(self, type):
        return _designer.VectorDefinition_SetVectorType(self, type)

    def SetNumVectors(self, vectors):
        return _designer.VectorDefinition_SetNumVectors(self, vectors)

    def SetNumSkips(self, skip):
        return _designer.VectorDefinition_SetNumSkips(self, skip)

    def SetGridSize(self, size):
        return _designer.VectorDefinition_SetGridSize(self, size)

    def SetDynamicZoom(self, zoom):
        return _designer.VectorDefinition_SetDynamicZoom(self, zoom)

    def SetArrowCoordinate(self, name):
        return _designer.VectorDefinition_SetArrowCoordinate(self, name)

    def GetVectorType(self):
        return _designer.VectorDefinition_GetVectorType(self)

    def GetNumVectors(self):
        return _designer.VectorDefinition_GetNumVectors(self)

    def GetNumSkips(self):
        return _designer.VectorDefinition_GetNumSkips(self)

    def GetGridSize(self):
        return _designer.VectorDefinition_GetGridSize(self)

    def GetDynamicZoom(self):
        return _designer.VectorDefinition_GetDynamicZoom(self)

    def GetArrowCoordinateName(self):
        return _designer.VectorDefinition_GetArrowCoordinateName(self)

    def GetTransparencyNonTarget(self):
        return _designer.VectorDefinition_GetTransparencyNonTarget(self)

    def SetTransparencyNonTarget(self, on):
        return _designer.VectorDefinition_SetTransparencyNonTarget(self, on)

    def GetTransparencyValueNonTarget(self):
        return _designer.VectorDefinition_GetTransparencyValueNonTarget(self)

    def SetTransparencyValueNonTarget(self, value):
        return _designer.VectorDefinition_SetTransparencyValueNonTarget(self, value)

    def GetViewPoint(self):
        return _designer.VectorDefinition_GetViewPoint(self)

    def SetViewPoint(self, on):
        return _designer.VectorDefinition_SetViewPoint(self, on)

    def GetViewIndex(self):
        return _designer.VectorDefinition_GetViewIndex(self)

    def SetViewIndex(self, index):
        return _designer.VectorDefinition_SetViewIndex(self, index)

    def SetViewName(self, name):
        return _designer.VectorDefinition_SetViewName(self, name)

    def GetViewScale(self):
        return _designer.VectorDefinition_GetViewScale(self)

    def SetViewScale(self, on):
        return _designer.VectorDefinition_SetViewScale(self, on)

    def GetScalingFactor(self):
        return _designer.VectorDefinition_GetScalingFactor(self)

    def SetScalingFactor(self, cond):
        return _designer.VectorDefinition_SetScalingFactor(self, cond)

    def GetViewOriginalModel(self):
        return _designer.VectorDefinition_GetViewOriginalModel(self)

    def SetViewOriginalModel(self, on):
        return _designer.VectorDefinition_SetViewOriginalModel(self, on)

    def GetModelCopy(self):
        return _designer.VectorDefinition_GetModelCopy(self)

    def SetModelCopy(self, on):
        return _designer.VectorDefinition_SetModelCopy(self, on)

    def GetDisplayType(self):
        return _designer.VectorDefinition_GetDisplayType(self)

    def SetDisplayType(self, type):
        return _designer.VectorDefinition_SetDisplayType(self, type)

    def ClearCutPlanes(self):
        return _designer.VectorDefinition_ClearCutPlanes(self)

    def GetCutPlaneList(self):
        return _designer.VectorDefinition_GetCutPlaneList(self)

    def AddCutPlane(self, index):
        return _designer.VectorDefinition_AddCutPlane(self, index)
VectorDefinition_swigregister = _designer.VectorDefinition_swigregister
VectorDefinition_swigregister(VectorDefinition)

class ContourDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContourDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContourDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ContourDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ContourDefinition_IsValid(self)

    def SetName(self, title):
        return _designer.ContourDefinition_SetName(self, title)

    def GetName(self):
        return _designer.ContourDefinition_GetName(self)

    def SetRange(self, min, max):
        return _designer.ContourDefinition_SetRange(self, min, max)

    def GetMax(self):
        return _designer.ContourDefinition_GetMax(self)

    def GetMin(self):
        return _designer.ContourDefinition_GetMin(self)

    def SetGradient(self, name, levels, smooth):
        return _designer.ContourDefinition_SetGradient(self, name, levels, smooth)

    def GetGradientName(self):
        return _designer.ContourDefinition_GetGradientName(self)

    def GetGradientNames(self):
        return _designer.ContourDefinition_GetGradientNames(self)

    def GetLevels(self):
        return _designer.ContourDefinition_GetLevels(self)

    def GetSmooth(self):
        return _designer.ContourDefinition_GetSmooth(self)

    def SetLogScale(self, logscale):
        return _designer.ContourDefinition_SetLogScale(self, logscale)

    def GetLogScale(self):
        return _designer.ContourDefinition_GetLogScale(self)

    def SetResultType(self, *args):
        return _designer.ContourDefinition_SetResultType(self, *args)

    def GetResultType(self):
        return _designer.ContourDefinition_GetResultType(self)

    def GetResultTypeNames(self):
        return _designer.ContourDefinition_GetResultTypeNames(self)

    def SetResultUnit(self, name):
        return _designer.ContourDefinition_SetResultUnit(self, name)

    def GetResultUnit(self):
        return _designer.ContourDefinition_GetResultUnit(self)

    def GetScaleByParts(self):
        return _designer.ContourDefinition_GetScaleByParts(self)

    def SetScaleByParts(self, scaleByParts):
        return _designer.ContourDefinition_SetScaleByParts(self, scaleByParts)

    def GetReferenceStep(self):
        return _designer.ContourDefinition_GetReferenceStep(self)

    def SetReferenceStep(self, step):
        return _designer.ContourDefinition_SetReferenceStep(self, step)

    def GetTemperature(self):
        return _designer.ContourDefinition_GetTemperature(self)

    def SetTemperature(self, value):
        return _designer.ContourDefinition_SetTemperature(self, value)

    def SetDivideElements(self, divideElements):
        return _designer.ContourDefinition_SetDivideElements(self, divideElements)

    def GetDivideElements(self):
        return _designer.ContourDefinition_GetDivideElements(self)

    def SetAutoScale(self, scale):
        return _designer.ContourDefinition_SetAutoScale(self, scale)

    def GetAutoScale(self):
        return _designer.ContourDefinition_GetAutoScale(self)

    def SetNumLabels(self, labels):
        return _designer.ContourDefinition_SetNumLabels(self, labels)

    def GetNumLabels(self):
        return _designer.ContourDefinition_GetNumLabels(self)

    def SetDisplayScaleBar(self, displayScaleBar):
        return _designer.ContourDefinition_SetDisplayScaleBar(self, displayScaleBar)

    def GetDisplayScaleBar(self):
        return _designer.ContourDefinition_GetDisplayScaleBar(self)

    def SetUseSpecifiedPosition(self, useSpecifiedPosition):
        return _designer.ContourDefinition_SetUseSpecifiedPosition(self, useSpecifiedPosition)

    def GetUseSpecifiedPosition(self):
        return _designer.ContourDefinition_GetUseSpecifiedPosition(self)

    def SetDisplayMinimumLabel(self, displayLabel):
        return _designer.ContourDefinition_SetDisplayMinimumLabel(self, displayLabel)

    def GetDisplayMinimumLabel(self):
        return _designer.ContourDefinition_GetDisplayMinimumLabel(self)

    def SetDisplayMaximumLabel(self, displayLabel):
        return _designer.ContourDefinition_SetDisplayMaximumLabel(self, displayLabel)

    def GetDisplayMaximumLabel(self):
        return _designer.ContourDefinition_GetDisplayMaximumLabel(self)

    def SetScaleBarPosition(self, leftPos, topPos):
        return _designer.ContourDefinition_SetScaleBarPosition(self, leftPos, topPos)

    def GetLeftPosition(self):
        return _designer.ContourDefinition_GetLeftPosition(self)

    def GetTopPosition(self):
        return _designer.ContourDefinition_GetTopPosition(self)

    def SetComponent(self, name):
        return _designer.ContourDefinition_SetComponent(self, name)

    def GetComponent(self):
        return _designer.ContourDefinition_GetComponent(self)

    def GetComponentNames(self):
        return _designer.ContourDefinition_GetComponentNames(self)

    def SetIsolines(self, isoline):
        return _designer.ContourDefinition_SetIsolines(self, isoline)

    def GetIsolines(self):
        return _designer.ContourDefinition_GetIsolines(self)

    def SetContourType(self, val):
        return _designer.ContourDefinition_SetContourType(self, val)

    def GetContourType(self):
        return _designer.ContourDefinition_GetContourType(self)

    def SetResultCoordinate(self, name):
        return _designer.ContourDefinition_SetResultCoordinate(self, name)

    def GetResultCoordinateName(self):
        return _designer.ContourDefinition_GetResultCoordinateName(self)

    def GetResultCoordinateNameList(self):
        return _designer.ContourDefinition_GetResultCoordinateNameList(self)

    def SetUserComponentType(self, name):
        return _designer.ContourDefinition_SetUserComponentType(self, name)

    def GetUserComponentType(self):
        return _designer.ContourDefinition_GetUserComponentType(self)

    def DigitsNotationTypeName(self):
        return _designer.ContourDefinition_DigitsNotationTypeName(self)

    def SetDigitsNotationType(self, type):
        return _designer.ContourDefinition_SetDigitsNotationType(self, type)

    def Precision(self):
        return _designer.ContourDefinition_Precision(self)

    def SetPrecision(self, precision):
        return _designer.ContourDefinition_SetPrecision(self, precision)

    def SetDisplayAllParts(self, use):
        return _designer.ContourDefinition_SetDisplayAllParts(self, use)

    def RemoveAllParts(self):
        return _designer.ContourDefinition_RemoveAllParts(self)

    def AddPart(self, partId):
        return _designer.ContourDefinition_AddPart(self, partId)

    def SetDisplayShellBeam(self, isChecked):
        return _designer.ContourDefinition_SetDisplayShellBeam(self, isChecked)

    def GetDisplayShellBeam(self):
        return _designer.ContourDefinition_GetDisplayShellBeam(self)

    def GetDisplayAllParts(self):
        return _designer.ContourDefinition_GetDisplayAllParts(self)

    def SetHistorySteps(self, *args):
        return _designer.ContourDefinition_SetHistorySteps(self, *args)

    def SetHistoryAllSteps(self):
        return _designer.ContourDefinition_SetHistoryAllSteps(self)

    def SetHistoryStepsByString(self, str):
        return _designer.ContourDefinition_SetHistoryStepsByString(self, str)

    def GetTransparencyNonTarget(self):
        return _designer.ContourDefinition_GetTransparencyNonTarget(self)

    def SetTransparencyNonTarget(self, on):
        return _designer.ContourDefinition_SetTransparencyNonTarget(self, on)

    def GetTransparencyValueNonTarget(self):
        return _designer.ContourDefinition_GetTransparencyValueNonTarget(self)

    def SetTransparencyValueNonTarget(self, value):
        return _designer.ContourDefinition_SetTransparencyValueNonTarget(self, value)

    def GetViewPoint(self):
        return _designer.ContourDefinition_GetViewPoint(self)

    def SetViewPoint(self, on):
        return _designer.ContourDefinition_SetViewPoint(self, on)

    def GetViewIndex(self):
        return _designer.ContourDefinition_GetViewIndex(self)

    def SetViewIndex(self, index):
        return _designer.ContourDefinition_SetViewIndex(self, index)

    def SetViewName(self, name):
        return _designer.ContourDefinition_SetViewName(self, name)

    def GetViewScale(self):
        return _designer.ContourDefinition_GetViewScale(self)

    def SetViewScale(self, on):
        return _designer.ContourDefinition_SetViewScale(self, on)

    def GetScalingFactor(self):
        return _designer.ContourDefinition_GetScalingFactor(self)

    def SetScalingFactor(self, cond):
        return _designer.ContourDefinition_SetScalingFactor(self, cond)

    def GetViewOriginalModel(self):
        return _designer.ContourDefinition_GetViewOriginalModel(self)

    def SetViewOriginalModel(self, on):
        return _designer.ContourDefinition_SetViewOriginalModel(self, on)

    def GetModelCopy(self):
        return _designer.ContourDefinition_GetModelCopy(self)

    def SetModelCopy(self, on):
        return _designer.ContourDefinition_SetModelCopy(self, on)

    def ClearCutPlanes(self):
        return _designer.ContourDefinition_ClearCutPlanes(self)

    def GetCutPlaneList(self):
        return _designer.ContourDefinition_GetCutPlaneList(self)

    def AddCutPlane(self, index):
        return _designer.ContourDefinition_AddCutPlane(self, index)
ContourDefinition_swigregister = _designer.ContourDefinition_swigregister
ContourDefinition_swigregister(ContourDefinition)

class FluxLineDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FluxLineDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FluxLineDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_FluxLineDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.FluxLineDefinition_IsValid(self)

    def SetColor(self, color):
        return _designer.FluxLineDefinition_SetColor(self, color)

    def SetName(self, title):
        return _designer.FluxLineDefinition_SetName(self, title)

    def GetName(self):
        return _designer.FluxLineDefinition_GetName(self)

    def GetColor(self):
        return _designer.FluxLineDefinition_GetColor(self)

    def SetLines(self, lines):
        return _designer.FluxLineDefinition_SetLines(self, lines)

    def GetLines(self):
        return _designer.FluxLineDefinition_GetLines(self)

    def SetFluxValue(self, value):
        return _designer.FluxLineDefinition_SetFluxValue(self, value)

    def GetFluxValue(self):
        return _designer.FluxLineDefinition_GetFluxValue(self)

    def SetFluxLineType(self, var):
        return _designer.FluxLineDefinition_SetFluxLineType(self, var)

    def SetUseFluxValue(self, useFluxValue):
        return _designer.FluxLineDefinition_SetUseFluxValue(self, useFluxValue)

    def NumPoints(self):
        return _designer.FluxLineDefinition_NumPoints(self)

    def AddPoint(self, position, name):
        return _designer.FluxLineDefinition_AddPoint(self, position, name)

    def AddPointWithUnit(self, position, unitName, name):
        return _designer.FluxLineDefinition_AddPointWithUnit(self, position, unitName, name)

    def SetPoint(self, index, position):
        return _designer.FluxLineDefinition_SetPoint(self, index, position)

    def SetPointWithUnit(self, index, position, unitName):
        return _designer.FluxLineDefinition_SetPointWithUnit(self, index, position, unitName)

    def RenamePoint(self, index, name):
        return _designer.FluxLineDefinition_RenamePoint(self, index, name)

    def ClearPoints(self):
        return _designer.FluxLineDefinition_ClearPoints(self)

    def GetPoint(self, index):
        return _designer.FluxLineDefinition_GetPoint(self, index)

    def GetPointWithUnit(self, index, unitName):
        return _designer.FluxLineDefinition_GetPointWithUnit(self, index, unitName)

    def GetPointName(self, index):
        return _designer.FluxLineDefinition_GetPointName(self, index)

    def SetResultType(self, *args):
        return _designer.FluxLineDefinition_SetResultType(self, *args)

    def GetResultType(self):
        return _designer.FluxLineDefinition_GetResultType(self)

    def GetResultTypeNames(self):
        return _designer.FluxLineDefinition_GetResultTypeNames(self)

    def SetResultCoordinate(self, name):
        return _designer.FluxLineDefinition_SetResultCoordinate(self, name)

    def GetResultCoordinateName(self):
        return _designer.FluxLineDefinition_GetResultCoordinateName(self)

    def GetResultCoordinateNameList(self):
        return _designer.FluxLineDefinition_GetResultCoordinateNameList(self)

    def SetOrigin(self, x, y, z):
        return _designer.FluxLineDefinition_SetOrigin(self, x, y, z)

    def SetNormal(self, x, y, z):
        return _designer.FluxLineDefinition_SetNormal(self, x, y, z)

    def SetUseFinitePlane(self, use):
        return _designer.FluxLineDefinition_SetUseFinitePlane(self, use)

    def SetPlaneWidth(self, width):
        return _designer.FluxLineDefinition_SetPlaneWidth(self, width)

    def SetPlaneHeight(self, height):
        return _designer.FluxLineDefinition_SetPlaneHeight(self, height)

    def SetSeedLineAllParts(self, use):
        return _designer.FluxLineDefinition_SetSeedLineAllParts(self, use)

    def RemoveAllParts(self):
        return _designer.FluxLineDefinition_RemoveAllParts(self)

    def AddPart(self, partId):
        return _designer.FluxLineDefinition_AddPart(self, partId)

    def GetUseFinitePlane(self):
        return _designer.FluxLineDefinition_GetUseFinitePlane(self)

    def GetPlaneWidth(self):
        return _designer.FluxLineDefinition_GetPlaneWidth(self)

    def GetPlaneHeight(self):
        return _designer.FluxLineDefinition_GetPlaneHeight(self)

    def GetSeedLineAllParts(self):
        return _designer.FluxLineDefinition_GetSeedLineAllParts(self)

    def SetThickness(self, value):
        return _designer.FluxLineDefinition_SetThickness(self, value)

    def GetThickness(self):
        return _designer.FluxLineDefinition_GetThickness(self)

    def GetTransparencyNonTarget(self):
        return _designer.FluxLineDefinition_GetTransparencyNonTarget(self)

    def SetTransparencyNonTarget(self, on):
        return _designer.FluxLineDefinition_SetTransparencyNonTarget(self, on)

    def GetTransparencyValueNonTarget(self):
        return _designer.FluxLineDefinition_GetTransparencyValueNonTarget(self)

    def SetTransparencyValueNonTarget(self, value):
        return _designer.FluxLineDefinition_SetTransparencyValueNonTarget(self, value)

    def GetViewPoint(self):
        return _designer.FluxLineDefinition_GetViewPoint(self)

    def SetViewPoint(self, on):
        return _designer.FluxLineDefinition_SetViewPoint(self, on)

    def GetViewIndex(self):
        return _designer.FluxLineDefinition_GetViewIndex(self)

    def SetViewIndex(self, index):
        return _designer.FluxLineDefinition_SetViewIndex(self, index)

    def SetViewName(self, name):
        return _designer.FluxLineDefinition_SetViewName(self, name)

    def GetViewScale(self):
        return _designer.FluxLineDefinition_GetViewScale(self)

    def SetViewScale(self, on):
        return _designer.FluxLineDefinition_SetViewScale(self, on)

    def GetScalingFactor(self):
        return _designer.FluxLineDefinition_GetScalingFactor(self)

    def SetScalingFactor(self, cond):
        return _designer.FluxLineDefinition_SetScalingFactor(self, cond)

    def GetViewOriginalModel(self):
        return _designer.FluxLineDefinition_GetViewOriginalModel(self)

    def SetViewOriginalModel(self, on):
        return _designer.FluxLineDefinition_SetViewOriginalModel(self, on)

    def GetModelCopy(self):
        return _designer.FluxLineDefinition_GetModelCopy(self)

    def SetModelCopy(self, on):
        return _designer.FluxLineDefinition_SetModelCopy(self, on)

    def GetDisplayType(self):
        return _designer.FluxLineDefinition_GetDisplayType(self)

    def SetDisplayType(self, type):
        return _designer.FluxLineDefinition_SetDisplayType(self, type)

    def ClearCutPlanes(self):
        return _designer.FluxLineDefinition_ClearCutPlanes(self)

    def GetCutPlaneList(self):
        return _designer.FluxLineDefinition_GetCutPlaneList(self)

    def AddCutPlane(self, index):
        return _designer.FluxLineDefinition_AddCutPlane(self, index)

    def ExportFluxLines(self, filename, stepNum, phase, streamlineIndex, needsConverting):
        return _designer.FluxLineDefinition_ExportFluxLines(self, filename, stepNum, phase, streamlineIndex, needsConverting)

    def ExportFluxLinesWithInterval(self, filename, stepNum, phase, streamlineIndex, needsConverting, interval):
        return _designer.FluxLineDefinition_ExportFluxLinesWithInterval(self, filename, stepNum, phase, streamlineIndex, needsConverting, interval)

    def ExportLineIntegral(self, filename, stepNum, phase):
        return _designer.FluxLineDefinition_ExportLineIntegral(self, filename, stepNum, phase)

    def ExportAllStepsFluxLines(self, dir, filename, phase, streamlineIndex, needsConverting):
        return _designer.FluxLineDefinition_ExportAllStepsFluxLines(self, dir, filename, phase, streamlineIndex, needsConverting)

    def ExportAllStepsFluxLinesWithInterval(self, dir, filename, phase, streamlineIndex, needsConverting, interval):
        return _designer.FluxLineDefinition_ExportAllStepsFluxLinesWithInterval(self, dir, filename, phase, streamlineIndex, needsConverting, interval)

    def ExportAllStepsLineIntegral(self, dir, filename, phase):
        return _designer.FluxLineDefinition_ExportAllStepsLineIntegral(self, dir, filename, phase)
FluxLineDefinition_swigregister = _designer.FluxLineDefinition_swigregister
FluxLineDefinition_swigregister(FluxLineDefinition)

class ScalingFactor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalingFactor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalingFactor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ScalingFactor
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ScalingFactor_IsValid(self)

    def GetName(self):
        return _designer.ScalingFactor_GetName(self)

    def SetName(self, name):
        return _designer.ScalingFactor_SetName(self, name)

    def GetScalingType(self):
        return _designer.ScalingFactor_GetScalingType(self)

    def GetScalingTypeName(self):
        return _designer.ScalingFactor_GetScalingTypeName(self)

    def SetScalingType(self, value):
        return _designer.ScalingFactor_SetScalingType(self, value)

    def GetScalingFactor(self):
        return _designer.ScalingFactor_GetScalingFactor(self)

    def GetScalingFactorEachAxis(self):
        return _designer.ScalingFactor_GetScalingFactorEachAxis(self)

    def SetScalingFactor(self, factor):
        return _designer.ScalingFactor_SetScalingFactor(self, factor)

    def SetScalingFactorEachAxis(self, xfactor, yfactor, zfactor):
        return _designer.ScalingFactor_SetScalingFactorEachAxis(self, xfactor, yfactor, zfactor)
ScalingFactor_swigregister = _designer.ScalingFactor_swigregister
ScalingFactor_swigregister(ScalingFactor)

class CompositeResultDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeResultDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeResultDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CompositeResultDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CompositeResultDefinition_IsValid(self)

    def SetName(self, name):
        return _designer.CompositeResultDefinition_SetName(self, name)

    def GetName(self):
        return _designer.CompositeResultDefinition_GetName(self)

    def SetDisplayDefinition(self, var):
        return _designer.CompositeResultDefinition_SetDisplayDefinition(self, var)

    def ClearResults(self):
        return _designer.CompositeResultDefinition_ClearResults(self)

    def SetVectorDefinition(self, vector):
        return _designer.CompositeResultDefinition_SetVectorDefinition(self, vector)

    def SetContourDefinition(self, contour):
        return _designer.CompositeResultDefinition_SetContourDefinition(self, contour)

    def SetFluxLineDefinition(self, flux):
        return _designer.CompositeResultDefinition_SetFluxLineDefinition(self, flux)
CompositeResultDefinition_swigregister = _designer.CompositeResultDefinition_swigregister
CompositeResultDefinition_swigregister(CompositeResultDefinition)

class ProbeDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbeDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProbeDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ProbeDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ProbeDefinition_IsValid(self)

    def SetName(self, name):
        return _designer.ProbeDefinition_SetName(self, name)

    def GetName(self):
        return _designer.ProbeDefinition_GetName(self)

    def SetProbeType(self, name):
        return _designer.ProbeDefinition_SetProbeType(self, name)

    def GetProbeType(self):
        return _designer.ProbeDefinition_GetProbeType(self)

    def GetProbeTypeNames(self):
        return _designer.ProbeDefinition_GetProbeTypeNames(self)

    def GetUseElementValue(self):
        return _designer.ProbeDefinition_GetUseElementValue(self)

    def SetUseElementValue(self, use):
        return _designer.ProbeDefinition_SetUseElementValue(self, use)

    def GetMoveWithPart(self):
        return _designer.ProbeDefinition_GetMoveWithPart(self)

    def SetMoveWithPart(self, value):
        return _designer.ProbeDefinition_SetMoveWithPart(self, value)

    def NumPoints(self):
        return _designer.ProbeDefinition_NumPoints(self)

    def AddPoint(self, position, name):
        return _designer.ProbeDefinition_AddPoint(self, position, name)

    def AddPointWithUnit(self, position, unitName, name):
        return _designer.ProbeDefinition_AddPointWithUnit(self, position, unitName, name)

    def SetPoint(self, index, position):
        return _designer.ProbeDefinition_SetPoint(self, index, position)

    def SetPointWithUnit(self, index, position, unitName):
        return _designer.ProbeDefinition_SetPointWithUnit(self, index, position, unitName)

    def AddLocation(self, x, y, z, name):
        return _designer.ProbeDefinition_AddLocation(self, x, y, z, name)

    def SetLocation(self, index, x, y, z):
        return _designer.ProbeDefinition_SetLocation(self, index, x, y, z)

    def RemovePoint(self, index):
        return _designer.ProbeDefinition_RemovePoint(self, index)

    def ExportPoints(self, filename):
        return _designer.ProbeDefinition_ExportPoints(self, filename)

    def ImportPoints(self, filename):
        return _designer.ProbeDefinition_ImportPoints(self, filename)

    def AddId(self, id, name):
        return _designer.ProbeDefinition_AddId(self, id, name)

    def SetId(self, index, id):
        return _designer.ProbeDefinition_SetId(self, index, id)

    def GetId(self, index):
        return _designer.ProbeDefinition_GetId(self, index)

    def GetPositionId(self, index):
        return _designer.ProbeDefinition_GetPositionId(self, index)

    def RenamePoint(self, index, name):
        return _designer.ProbeDefinition_RenamePoint(self, index, name)

    def ClearPoints(self):
        return _designer.ProbeDefinition_ClearPoints(self)

    def GetPoint(self, index):
        return _designer.ProbeDefinition_GetPoint(self, index)

    def GetPointWithUnit(self, index, unitName):
        return _designer.ProbeDefinition_GetPointWithUnit(self, index, unitName)

    def GetPointName(self, index):
        return _designer.ProbeDefinition_GetPointName(self, index)

    def SetPhase(self, value):
        return _designer.ProbeDefinition_SetPhase(self, value)

    def GetPhase(self):
        return _designer.ProbeDefinition_GetPhase(self)

    def SetPhaseType(self, value):
        return _designer.ProbeDefinition_SetPhaseType(self, value)

    def GetPhaseType(self):
        return _designer.ProbeDefinition_GetPhaseType(self)

    def SetResultType(self, *args):
        return _designer.ProbeDefinition_SetResultType(self, *args)

    def GetResultType(self):
        return _designer.ProbeDefinition_GetResultType(self)

    def GetResultTypeNames(self):
        return _designer.ProbeDefinition_GetResultTypeNames(self)

    def SetComponent(self, name):
        return _designer.ProbeDefinition_SetComponent(self, name)

    def GetComponent(self):
        return _designer.ProbeDefinition_GetComponent(self)

    def GetComponentNames(self):
        return _designer.ProbeDefinition_GetComponentNames(self)

    def GetDataSet(self):
        return _designer.ProbeDefinition_GetDataSet(self)

    def GetCaseDataSet(self, caseno):
        return _designer.ProbeDefinition_GetCaseDataSet(self, caseno)

    def SetResultCoordinate(self, name):
        return _designer.ProbeDefinition_SetResultCoordinate(self, name)

    def GetResultCoordinateName(self):
        return _designer.ProbeDefinition_GetResultCoordinateName(self)

    def GetResultCoordinateNameList(self):
        return _designer.ProbeDefinition_GetResultCoordinateNameList(self)

    def SetLocationCoordinate(self, name):
        return _designer.ProbeDefinition_SetLocationCoordinate(self, name)

    def GetLocationCoordinateName(self):
        return _designer.ProbeDefinition_GetLocationCoordinateName(self)

    def GetReferenceStep(self):
        return _designer.ProbeDefinition_GetReferenceStep(self)

    def SetReferenceStep(self, step):
        return _designer.ProbeDefinition_SetReferenceStep(self, step)

    def GetTemperature(self):
        return _designer.ProbeDefinition_GetTemperature(self)

    def SetTemperature(self, value):
        return _designer.ProbeDefinition_SetTemperature(self, value)

    def SetUserComponentType(self, name):
        return _designer.ProbeDefinition_SetUserComponentType(self, name)

    def GetUserComponentType(self):
        return _designer.ProbeDefinition_GetUserComponentType(self)

    def SetHistorySteps(self, *args):
        return _designer.ProbeDefinition_SetHistorySteps(self, *args)

    def SetHistoryAllSteps(self):
        return _designer.ProbeDefinition_SetHistoryAllSteps(self)

    def SetHistoryStepsByString(self, str):
        return _designer.ProbeDefinition_SetHistoryStepsByString(self, str)

    def SetAutoRecalculate(self, flag):
        return _designer.ProbeDefinition_SetAutoRecalculate(self, flag)

    def GetAutoRecalculate(self):
        return _designer.ProbeDefinition_GetAutoRecalculate(self)

    def Build(self):
        return _designer.ProbeDefinition_Build(self)
ProbeDefinition_swigregister = _designer.ProbeDefinition_swigregister
ProbeDefinition_swigregister(ProbeDefinition)

class ResultTableData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultTableData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultTableData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ResultTableData
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ResultTableData_IsValid(self)

    def GetName(self):
        return _designer.ResultTableData_GetName(self)

    def GetRows(self):
        return _designer.ResultTableData_GetRows(self)

    def GetCols(self):
        return _designer.ResultTableData_GetCols(self)

    def GetRowName(self, row):
        return _designer.ResultTableData_GetRowName(self, row)

    def GetColName(self, col):
        return _designer.ResultTableData_GetColName(self, col)

    def SetComponent(self, name):
        return _designer.ResultTableData_SetComponent(self, name)

    def GetComponent(self):
        return _designer.ResultTableData_GetComponent(self)

    def GetValue(self, row, val):
        return _designer.ResultTableData_GetValue(self, row, val)

    def GetStep(self, row):
        return _designer.ResultTableData_GetStep(self, row)

    def GetTime(self, row):
        return _designer.ResultTableData_GetTime(self, row)

    def GetAngle(self, row):
        return _designer.ResultTableData_GetAngle(self, row)

    def GetDistance(self, row):
        return _designer.ResultTableData_GetDistance(self, row)

    def GetTimeUnit(self):
        return _designer.ResultTableData_GetTimeUnit(self)

    def GetAngleUnit(self):
        return _designer.ResultTableData_GetAngleUnit(self)

    def GetDistanceUnit(self):
        return _designer.ResultTableData_GetDistanceUnit(self)

    def GetValueUnit(self):
        return _designer.ResultTableData_GetValueUnit(self)

    def WriteTable(self, filename, type):
        return _designer.ResultTableData_WriteTable(self, filename, type)

    def WriteSingleStep(self, filename, type, step):
        return _designer.ResultTableData_WriteSingleStep(self, filename, type, step)

    def WriteAllComponents(self, filename, type, step):
        return _designer.ResultTableData_WriteAllComponents(self, filename, type, step)

    def WriteSummary(self, filename, summarytype, fromstep, tostep):
        return _designer.ResultTableData_WriteSummary(self, filename, summarytype, fromstep, tostep)

    def IsValidStep(self, step):
        return _designer.ResultTableData_IsValidStep(self, step)
ResultTableData_swigregister = _designer.ResultTableData_swigregister
ResultTableData_swigregister(ResultTableData)

class ResultTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultTable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ResultTable
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ResultTable_IsValid(self)

    def NumTables(self):
        return _designer.ResultTable_NumTables(self)

    def GetData(self, val):
        return _designer.ResultTable_GetData(self, val)

    def GetDataFromName(self, typeName, sourceTitle):
        return _designer.ResultTable_GetDataFromName(self, typeName, sourceTitle)

    def WriteAllTables(self, filename, type):
        return _designer.ResultTable_WriteAllTables(self, filename, type)

    def SetXYZComponent(self, name):
        return _designer.ResultTable_SetXYZComponent(self, name)

    def SetComplexComponent(self, name):
        return _designer.ResultTable_SetComplexComponent(self, name)

    def WriteAllCurrentStep(self, filename, type, step):
        return _designer.ResultTable_WriteAllCurrentStep(self, filename, type, step)

    def WriteAllSummary(self, filename, summarytype, fromstep, tostep):
        return _designer.ResultTable_WriteAllSummary(self, filename, summarytype, fromstep, tostep)

    def WriteAllCaseTables(self, filename, type):
        return _designer.ResultTable_WriteAllCaseTables(self, filename, type)

    def WriteAllCaseCurrentStep(self, filename, type, step):
        return _designer.ResultTable_WriteAllCaseCurrentStep(self, filename, type, step)

    def WriteAllCaseSummary(self, filename, summarytype, fromstep, tostep):
        return _designer.ResultTable_WriteAllCaseSummary(self, filename, summarytype, fromstep, tostep)
ResultTable_swigregister = _designer.ResultTable_swigregister
ResultTable_swigregister(ResultTable)

class ParametricEquation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParametricEquation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParametricEquation, name)
    __repr__ = _swig_repr

    def __init__(self, rval):
        this = _designer.new_ParametricEquation(rval)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _designer.delete_ParametricEquation
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ParametricEquation_IsValid(self)

    def GetName(self):
        return _designer.ParametricEquation_GetName(self)

    def GetType(self):
        return _designer.ParametricEquation_GetType(self)

    def GetExpression(self):
        return _designer.ParametricEquation_GetExpression(self)

    def GetDescription(self):
        return _designer.ParametricEquation_GetDescription(self)

    def GetValue(self, *args):
        return _designer.ParametricEquation_GetValue(self, *args)

    def GetModeling(self):
        return _designer.ParametricEquation_GetModeling(self)

    def GetTrueValue(self):
        return _designer.ParametricEquation_GetTrueValue(self)

    def GetFalseValue(self):
        return _designer.ParametricEquation_GetFalseValue(self)

    def SetName(self, name):
        return _designer.ParametricEquation_SetName(self, name)

    def SetType(self, type):
        return _designer.ParametricEquation_SetType(self, type)

    def SetExpression(self, exp):
        return _designer.ParametricEquation_SetExpression(self, exp)

    def SetDescription(self, description):
        return _designer.ParametricEquation_SetDescription(self, description)

    def SetModeling(self, isModeling):
        return _designer.ParametricEquation_SetModeling(self, isModeling)

    def SetTrueValue(self, value):
        return _designer.ParametricEquation_SetTrueValue(self, value)

    def SetFalseValue(self, value):
        return _designer.ParametricEquation_SetFalseValue(self, value)
ParametricEquation_swigregister = _designer.ParametricEquation_swigregister
ParametricEquation_swigregister(ParametricEquation)

class MeasurementVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasurementVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeasurementVariable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_MeasurementVariable
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.MeasurementVariable_IsValid(self)

    def GetName(self):
        return _designer.MeasurementVariable_GetName(self)

    def SetName(self, name):
        return _designer.MeasurementVariable_SetName(self, name)

    def GetType(self):
        return _designer.MeasurementVariable_GetType(self)

    def SetType(self, type):
        return _designer.MeasurementVariable_SetType(self, type)

    def ClearParts(self):
        return _designer.MeasurementVariable_ClearParts(self)

    def NumParts(self):
        return _designer.MeasurementVariable_NumParts(self)

    def AddSelected(self, selection):
        return _designer.MeasurementVariable_AddSelected(self, selection)

    def GetSelection(self):
        return _designer.MeasurementVariable_GetSelection(self)
MeasurementVariable_swigregister = _designer.MeasurementVariable_swigregister
MeasurementVariable_swigregister(MeasurementVariable)

class DesignTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DesignTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DesignTable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_DesignTable
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.DesignTable_IsValid(self)

    def NumCases(self):
        return _designer.DesignTable_NumCases(self)

    def NumParameters(self):
        return _designer.DesignTable_NumParameters(self)

    def ParameterName(self, index):
        return _designer.DesignTable_ParameterName(self, index)

    def ParameterTypeName(self, index):
        return _designer.DesignTable_ParameterTypeName(self, index)

    def IsCadParameter(self, index):
        return _designer.DesignTable_IsCadParameter(self, index)

    def IsActive(self, caseIndex):
        return _designer.DesignTable_IsActive(self, caseIndex)

    def IsInGroup(self):
        return _designer.DesignTable_IsInGroup(self)

    def GetLabel(self, caseIndex):
        return _designer.DesignTable_GetLabel(self, caseIndex)

    def GetCaseLabelFormat(self):
        return _designer.DesignTable_GetCaseLabelFormat(self)

    def GetValue(self, caseIndex, parameterIndex):
        return _designer.DesignTable_GetValue(self, caseIndex, parameterIndex)

    def SetValue(self, caseIndex, parameterIndex, value):
        return _designer.DesignTable_SetValue(self, caseIndex, parameterIndex, value)

    def AddCase(self):
        return _designer.DesignTable_AddCase(self)

    def AddCases(self, numCases):
        return _designer.DesignTable_AddCases(self, numCases)

    def AddParameter(self, parameterName):
        return _designer.DesignTable_AddParameter(self, parameterName)

    def AddParameterVariableName(self, *args):
        return _designer.DesignTable_AddParameterVariableName(self, *args)

    def AddParameterVariableNames(self, *args):
        return _designer.DesignTable_AddParameterVariableNames(self, *args)

    def AddCadParameter(self, parameterName):
        return _designer.DesignTable_AddCadParameter(self, parameterName)

    def AddCadParameterVariableName(self, *args):
        return _designer.DesignTable_AddCadParameterVariableName(self, *args)

    def AddConditionProperty(self, condition, propName):
        return _designer.DesignTable_AddConditionProperty(self, condition, propName)

    def AddCircuitComponentProperty(self, condition, propName):
        return _designer.DesignTable_AddCircuitComponentProperty(self, condition, propName)

    def AddEquation(self, parameterName):
        return _designer.DesignTable_AddEquation(self, parameterName)

    def AddCadParameterVariableNames(self, *args):
        return _designer.DesignTable_AddCadParameterVariableNames(self, *args)

    def SetValues(self, caseIndex, parameterIndices, values):
        return _designer.DesignTable_SetValues(self, caseIndex, parameterIndices, values)

    def SetVariableName(self, parameterName, variableName):
        return _designer.DesignTable_SetVariableName(self, parameterName, variableName)

    def GetVariableName(self, indexOrName):
        return _designer.DesignTable_GetVariableName(self, indexOrName)

    def RemoveParameter(self, indexOrName):
        return _designer.DesignTable_RemoveParameter(self, indexOrName)

    def RemoveEquation(self, indexOrName):
        return _designer.DesignTable_RemoveEquation(self, indexOrName)

    def RemoveCase(self, caseIndex):
        return _designer.DesignTable_RemoveCase(self, caseIndex)

    def SetActive(self, caseIndex, active):
        return _designer.DesignTable_SetActive(self, caseIndex, active)

    def SetLabel(self, caseIndex, label):
        return _designer.DesignTable_SetLabel(self, caseIndex, label)

    def SetCaseLabelFormat(self, label):
        return _designer.DesignTable_SetCaseLabelFormat(self, label)

    def NumCaseGroups(self):
        return _designer.DesignTable_NumCaseGroups(self)

    def CaseGroupName(self, index):
        return _designer.DesignTable_CaseGroupName(self, index)

    def CaseGroupIndices(self, nameOrIndex):
        return _designer.DesignTable_CaseGroupIndices(self, nameOrIndex)

    def AddCaseGroup(self, name, indices):
        return _designer.DesignTable_AddCaseGroup(self, name, indices)

    def AddCasesToGroup(self, nameOrIndex, indices):
        return _designer.DesignTable_AddCasesToGroup(self, nameOrIndex, indices)

    def RemoveCaseGroup(self, nameOrIndex):
        return _designer.DesignTable_RemoveCaseGroup(self, nameOrIndex)

    def RemoveCasesFromGroup(self, nameOrIndex, indices):
        return _designer.DesignTable_RemoveCasesFromGroup(self, nameOrIndex, indices)

    def RenameCaseGroup(self, nameOrIndex, newName):
        return _designer.DesignTable_RenameCaseGroup(self, nameOrIndex, newName)

    def GetEquation(self, indexOrName):
        return _designer.DesignTable_GetEquation(self, indexOrName)

    def AddEquationParameter(self, equationName, parameterName):
        return _designer.DesignTable_AddEquationParameter(self, equationName, parameterName)

    def RemoveEquationParameter(self, equationName, parameterName):
        return _designer.DesignTable_RemoveEquationParameter(self, equationName, parameterName)

    def GetRelatedParameterNames(self, equationName):
        return _designer.DesignTable_GetRelatedParameterNames(self, equationName)

    def AllParameterNames(self):
        return _designer.DesignTable_AllParameterNames(self)

    def Export(self, filename):
        return _designer.DesignTable_Export(self, filename)

    def Import(self, filename):
        return _designer.DesignTable_Import(self, filename)

    def IsMaterialItem(self, index):
        return _designer.DesignTable_IsMaterialItem(self, index)

    def SetParameterWidth(self, indexOrName, width):
        return _designer.DesignTable_SetParameterWidth(self, indexOrName, width)

    def SetVisibleParameter(self, indexOrName, isShown):
        return _designer.DesignTable_SetVisibleParameter(self, indexOrName, isShown)

    def SetParameterOrder(self, indexOrName, order):
        return _designer.DesignTable_SetParameterOrder(self, indexOrName, order)

    def GetParameterWidth(self, indexOrName):
        return _designer.DesignTable_GetParameterWidth(self, indexOrName)

    def GetVisibleParameter(self, indexOrName):
        return _designer.DesignTable_GetVisibleParameter(self, indexOrName)

    def GetParameterOrder(self, indexOrName):
        return _designer.DesignTable_GetParameterOrder(self, indexOrName)

    def ExportEquation(self, filename, parameterNameList):
        return _designer.DesignTable_ExportEquation(self, filename, parameterNameList)

    def ImportEquation(self, filename):
        return _designer.DesignTable_ImportEquation(self, filename)

    def SetTableValue(self, caseIndex, parameterIndex, data):
        return _designer.DesignTable_SetTableValue(self, caseIndex, parameterIndex, data)

    def GetTableValue(self, caseIndex, parameterIndex):
        return _designer.DesignTable_GetTableValue(self, caseIndex, parameterIndex)

    def NumMeasurementVariables(self):
        return _designer.DesignTable_NumMeasurementVariables(self)

    def AddMeasurementVariable(self, parameterName):
        return _designer.DesignTable_AddMeasurementVariable(self, parameterName)

    def GetMeasurementVariable(self, val):
        return _designer.DesignTable_GetMeasurementVariable(self, val)

    def RemoveMeasurementVariable(self, val):
        return _designer.DesignTable_RemoveMeasurementVariable(self, val)
DesignTable_swigregister = _designer.DesignTable_swigregister
DesignTable_swigregister(DesignTable)

class Job(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Job, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Job, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Job
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Job_IsValid(self)

    def SetValue(self, name, value):
        return _designer.Job_SetValue(self, name, value)

    def SetSubValue(self, index, name, value):
        return _designer.Job_SetSubValue(self, index, name, value)

    def Submit(self, *args):
        return _designer.Job_Submit(self, *args)

    def IsFinished(self):
        return _designer.Job_IsFinished(self)

    def WaitForFinished(self):
        return _designer.Job_WaitForFinished(self)
Job_swigregister = _designer.Job_swigregister
Job_swigregister(Job)

class MeshGroupList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshGroupList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshGroupList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_MeshGroupList
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.MeshGroupList_IsValid(self)

    def CreateElementGroup(self, *args):
        return _designer.MeshGroupList_CreateElementGroup(self, *args)

    def CreateElementFaceGroup(self, *args):
        return _designer.MeshGroupList_CreateElementFaceGroup(self, *args)

    def CreateElementEdgeGroup(self, *args):
        return _designer.MeshGroupList_CreateElementEdgeGroup(self, *args)

    def CreateNodeGroup(self, *args):
        return _designer.MeshGroupList_CreateNodeGroup(self, *args)

    def NumMeshGroup(self):
        return _designer.MeshGroupList_NumMeshGroup(self)

    def CopyMeshGroup(self, set):
        return _designer.MeshGroupList_CopyMeshGroup(self, set)

    def DuplicateMeshGroup(self, var):
        return _designer.MeshGroupList_DuplicateMeshGroup(self, var)

    def DeleteMeshGroup(self, var):
        return _designer.MeshGroupList_DeleteMeshGroup(self, var)

    def GetMeshGroup(self, var):
        return _designer.MeshGroupList_GetMeshGroup(self, var)

    def DeleteUnusedMeshGroups(self):
        return _designer.MeshGroupList_DeleteUnusedMeshGroups(self)
MeshGroupList_swigregister = _designer.MeshGroupList_swigregister
MeshGroupList_swigregister(MeshGroupList)

class TableDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_TableDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.TableDefinition_IsValid(self)

    def SetResultType(self, *args):
        return _designer.TableDefinition_SetResultType(self, *args)

    def GetResultType(self):
        return _designer.TableDefinition_GetResultType(self)

    def GetResultTypeNames(self):
        return _designer.TableDefinition_GetResultTypeNames(self)

    def SetCoordinate(self, name):
        return _designer.TableDefinition_SetCoordinate(self, name)

    def GetCoordinateName(self):
        return _designer.TableDefinition_GetCoordinateName(self)

    def GetResultCoordinateNameList(self):
        return _designer.TableDefinition_GetResultCoordinateNameList(self)

    def SetComponent(self, name):
        return _designer.TableDefinition_SetComponent(self, name)

    def GetComponent(self):
        return _designer.TableDefinition_GetComponent(self)

    def GetComponentNames(self):
        return _designer.TableDefinition_GetComponentNames(self)

    def SetOutputType(self, type):
        return _designer.TableDefinition_SetOutputType(self, type)

    def GetOutputType(self):
        return _designer.TableDefinition_GetOutputType(self)

    def SetSteps(self, steps):
        return _designer.TableDefinition_SetSteps(self, steps)

    def SetAllSteps(self):
        return _designer.TableDefinition_SetAllSteps(self)

    def SetStepsByString(self, str):
        return _designer.TableDefinition_SetStepsByString(self, str)

    def SetStepsByInterval(self, interval):
        return _designer.TableDefinition_SetStepsByInterval(self, interval)

    def SetReferenceStep(self, step):
        return _designer.TableDefinition_SetReferenceStep(self, step)

    def GetReferenceStep(self):
        return _designer.TableDefinition_GetReferenceStep(self)

    def SetTemperature(self, value):
        return _designer.TableDefinition_SetTemperature(self, value)

    def GetTemperature(self):
        return _designer.TableDefinition_GetTemperature(self)

    def SetIsShownMinMaxInfo(self, isShown):
        return _designer.TableDefinition_SetIsShownMinMaxInfo(self, isShown)

    def IsShownMinMaxInfo(self):
        return _designer.TableDefinition_IsShownMinMaxInfo(self)

    def SetIsShownPositionInfo(self, isShown):
        return _designer.TableDefinition_SetIsShownPositionInfo(self, isShown)

    def IsShownPositionInfo(self):
        return _designer.TableDefinition_IsShownPositionInfo(self)

    def SetUserComponentType(self, name):
        return _designer.TableDefinition_SetUserComponentType(self, name)

    def GetUserComponentType(self):
        return _designer.TableDefinition_GetUserComponentType(self)

    def SetHistorySteps(self, *args):
        return _designer.TableDefinition_SetHistorySteps(self, *args)

    def SetHistoryAllSteps(self):
        return _designer.TableDefinition_SetHistoryAllSteps(self)

    def SetHistoryStepsByString(self, str):
        return _designer.TableDefinition_SetHistoryStepsByString(self, str)
TableDefinition_swigregister = _designer.TableDefinition_swigregister
TableDefinition_swigregister(TableDefinition)

class ResultCalculation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultCalculation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultCalculation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ResultCalculation
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ResultCalculation_IsValid(self)

    def SetName(self, name):
        return _designer.ResultCalculation_SetName(self, name)

    def GetName(self):
        return _designer.ResultCalculation_GetName(self)

    def SetValue(self, function, value):
        return _designer.ResultCalculation_SetValue(self, function, value)

    def GetValue(self, function):
        return _designer.ResultCalculation_GetValue(self, function)

    def ClearResultType(self):
        return _designer.ResultCalculation_ClearResultType(self)

    def AddResultType(self, scriptName):
        return _designer.ResultCalculation_AddResultType(self, scriptName)

    def SetExecuteType(self, type):
        return _designer.ResultCalculation_SetExecuteType(self, type)

    def GetExecuteType(self):
        return _designer.ResultCalculation_GetExecuteType(self)

    def RunCalculation(self, allCases):
        return _designer.ResultCalculation_RunCalculation(self, allCases)
ResultCalculation_swigregister = _designer.ResultCalculation_swigregister
ResultCalculation_swigregister(ResultCalculation)

class ParametricRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParametricRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParametricRange, name)
    __repr__ = _swig_repr

    def __init__(self, rval):
        this = _designer.new_ParametricRange(rval)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _designer.delete_ParametricRange
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ParametricRange_IsValid(self)

    def GetParameterName(self):
        return _designer.ParametricRange_GetParameterName(self)

    def GetItemName(self):
        return _designer.ParametricRange_GetItemName(self)

    def GetMax(self):
        return _designer.ParametricRange_GetMax(self)

    def GetMin(self):
        return _designer.ParametricRange_GetMin(self)

    def SetMax(self, max):
        return _designer.ParametricRange_SetMax(self, max)

    def SetMin(self, min):
        return _designer.ParametricRange_SetMin(self, min)
ParametricRange_swigregister = _designer.ParametricRange_swigregister
ParametricRange_swigregister(ParametricRange)

class ExpressionItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionItem, name)
    __repr__ = _swig_repr

    def __init__(self, rval):
        this = _designer.new_ExpressionItem(rval)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _designer.delete_ExpressionItem
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ExpressionItem_IsValid(self)

    def GetName(self):
        return _designer.ExpressionItem_GetName(self)

    def GetExpression(self):
        return _designer.ExpressionItem_GetExpression(self)

    def GetType(self):
        return _designer.ExpressionItem_GetType(self)

    def GetValue(self):
        return _designer.ExpressionItem_GetValue(self)

    def GetWeight(self):
        return _designer.ExpressionItem_GetWeight(self)

    def IsExpression(self):
        return _designer.ExpressionItem_IsExpression(self)

    def SetName(self, name):
        return _designer.ExpressionItem_SetName(self, name)

    def SetExpression(self, exp):
        return _designer.ExpressionItem_SetExpression(self, exp)

    def SetType(self, type):
        return _designer.ExpressionItem_SetType(self, type)

    def SetValue(self, value):
        return _designer.ExpressionItem_SetValue(self, value)

    def SetWeight(self, weight):
        return _designer.ExpressionItem_SetWeight(self, weight)

    def SetIsExpression(self, isExpression):
        return _designer.ExpressionItem_SetIsExpression(self, isExpression)
ExpressionItem_swigregister = _designer.ExpressionItem_swigregister
ExpressionItem_swigregister(ExpressionItem)

class TopologyObjectiveItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopologyObjectiveItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopologyObjectiveItem, name)
    __repr__ = _swig_repr

    def __init__(self, rval):
        this = _designer.new_TopologyObjectiveItem(rval)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _designer.delete_TopologyObjectiveItem
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.TopologyObjectiveItem_IsValid(self)

    def GetResultType(self):
        return _designer.TopologyObjectiveItem_GetResultType(self)

    def GetStudyIndex(self):
        return _designer.TopologyObjectiveItem_GetStudyIndex(self)

    def GetTargetCondition(self):
        return _designer.TopologyObjectiveItem_GetTargetCondition(self)

    def GetTargetGroup(self):
        return _designer.TopologyObjectiveItem_GetTargetGroup(self)

    def GetType(self):
        return _designer.TopologyObjectiveItem_GetType(self)

    def GetWeight(self):
        return _designer.TopologyObjectiveItem_GetWeight(self)

    def GetValue(self):
        return _designer.TopologyObjectiveItem_GetValue(self)

    def SetResultType(self, type):
        return _designer.TopologyObjectiveItem_SetResultType(self, type)

    def SetStudyIndex(self, index):
        return _designer.TopologyObjectiveItem_SetStudyIndex(self, index)

    def SetTargetCondition(self, exp):
        return _designer.TopologyObjectiveItem_SetTargetCondition(self, exp)

    def SetTargetGroup(self, exp):
        return _designer.TopologyObjectiveItem_SetTargetGroup(self, exp)

    def SetType(self, type):
        return _designer.TopologyObjectiveItem_SetType(self, type)

    def SetWeight(self, weight):
        return _designer.TopologyObjectiveItem_SetWeight(self, weight)

    def SetValue(self, value):
        return _designer.TopologyObjectiveItem_SetValue(self, value)
TopologyObjectiveItem_swigregister = _designer.TopologyObjectiveItem_swigregister
TopologyObjectiveItem_swigregister(TopologyObjectiveItem)

class OptimizationTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizationTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizationTable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_OptimizationTable
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.OptimizationTable_IsValid(self)

    def NumParameters(self):
        return _designer.OptimizationTable_NumParameters(self)

    def NumExpressions(self):
        return _designer.OptimizationTable_NumExpressions(self)

    def NumObjectives(self):
        return _designer.OptimizationTable_NumObjectives(self)

    def AddParametricItem(self, parameterName):
        return _designer.OptimizationTable_AddParametricItem(self, parameterName)

    def AddExpressionItem(self, parameterName):
        return _designer.OptimizationTable_AddExpressionItem(self, parameterName)

    def AddObjectiveItem(self, parameterName):
        return _designer.OptimizationTable_AddObjectiveItem(self, parameterName)

    def AddTopologyObjectiveItem(self):
        return _designer.OptimizationTable_AddTopologyObjectiveItem(self)

    def RemoveParametricItem(self, indexOrName):
        return _designer.OptimizationTable_RemoveParametricItem(self, indexOrName)

    def RemoveExpressionItem(self, indexOrName):
        return _designer.OptimizationTable_RemoveExpressionItem(self, indexOrName)

    def RemoveObjectiveItem(self, indexOrName):
        return _designer.OptimizationTable_RemoveObjectiveItem(self, indexOrName)

    def RemoveTopologyObjectiveItem(self, indexOrName):
        return _designer.OptimizationTable_RemoveTopologyObjectiveItem(self, indexOrName)

    def GetParametricItemByParameterName(self, parameterName):
        return _designer.OptimizationTable_GetParametricItemByParameterName(self, parameterName)

    def GetParametricItem(self, indexOrName):
        return _designer.OptimizationTable_GetParametricItem(self, indexOrName)

    def GetExpressionItem(self, indexOrName):
        return _designer.OptimizationTable_GetExpressionItem(self, indexOrName)

    def GetObjectiveItem(self, indexOrName):
        return _designer.OptimizationTable_GetObjectiveItem(self, indexOrName)

    def GetTopologyObjectiveItem(self, indexOrName):
        return _designer.OptimizationTable_GetTopologyObjectiveItem(self, indexOrName)

    def SetMaxCases(self, cases):
        return _designer.OptimizationTable_SetMaxCases(self, cases)

    def SetNewCasesPerLoop(self, cases):
        return _designer.OptimizationTable_SetNewCasesPerLoop(self, cases)

    def SetTolerance(self, tolerance):
        return _designer.OptimizationTable_SetTolerance(self, tolerance)

    def SetStopOnFailedCase(self, stop):
        return _designer.OptimizationTable_SetStopOnFailedCase(self, stop)

    def SetCreateInitialCases(self, create):
        return _designer.OptimizationTable_SetCreateInitialCases(self, create)

    def AddInitialCase(self, caseIndex):
        return _designer.OptimizationTable_AddInitialCase(self, caseIndex)

    def RemoveAllCases(self):
        return _designer.OptimizationTable_RemoveAllCases(self)

    def SetMachine(self, machine):
        return _designer.OptimizationTable_SetMachine(self, machine)

    def SetCpuGroup(self, group):
        return _designer.OptimizationTable_SetCpuGroup(self, group)

    def SetResubmitMachine(self, machine):
        return _designer.OptimizationTable_SetResubmitMachine(self, machine)

    def SetResubmitCpuGroup(self, group):
        return _designer.OptimizationTable_SetResubmitCpuGroup(self, group)

    def SetSendSSHSettings(self, sendSettings):
        return _designer.OptimizationTable_SetSendSSHSettings(self, sendSettings)

    def SetDeleteRemoteFiles(self, doDelete):
        return _designer.OptimizationTable_SetDeleteRemoteFiles(self, doDelete)

    def SetRunAsProject(self, asProject):
        return _designer.OptimizationTable_SetRunAsProject(self, asProject)

    def SetNumJobs(self, numJobs):
        return _designer.OptimizationTable_SetNumJobs(self, numJobs)

    def SetAlwaysCheckConflict(self, isAlways):
        return _designer.OptimizationTable_SetAlwaysCheckConflict(self, isAlways)

    def SetCheckConflict(self, flag):
        return _designer.OptimizationTable_SetCheckConflict(self, flag)

    def SetIgnoreGeometryError(self, flag):
        return _designer.OptimizationTable_SetIgnoreGeometryError(self, flag)

    def SetUseMultiLicense(self, useMultiLicense):
        return _designer.OptimizationTable_SetUseMultiLicense(self, useMultiLicense)

    def SetReservationKey(self, key):
        return _designer.OptimizationTable_SetReservationKey(self, key)

    def SetCSVOutputPath(self, filePath):
        return _designer.OptimizationTable_SetCSVOutputPath(self, filePath)

    def SetImmediateCSVOutput(self, immediateOutput):
        return _designer.OptimizationTable_SetImmediateCSVOutput(self, immediateOutput)

    def SetRestartDataFromFile(self, filePath):
        return _designer.OptimizationTable_SetRestartDataFromFile(self, filePath)

    def SetRestartFileOutputPath(self, restartFilePath):
        return _designer.OptimizationTable_SetRestartFileOutputPath(self, restartFilePath)

    def SetCheckOn(self, value, checkOn):
        return _designer.OptimizationTable_SetCheckOn(self, value, checkOn)

    def SetSimultaneousStudies(self, value):
        return _designer.OptimizationTable_SetSimultaneousStudies(self, value)

    def SetPreProcessOnWrite(self, set):
        return _designer.OptimizationTable_SetPreProcessOnWrite(self, set)

    def SetNGnetWeightOutputPath(self, filePath):
        return _designer.OptimizationTable_SetNGnetWeightOutputPath(self, filePath)

    def SetOptimizeMagnetDirection(self, optimize):
        return _designer.OptimizationTable_SetOptimizeMagnetDirection(self, optimize)

    def SetMagnetDirectionCoordinate(self, exp):
        return _designer.OptimizationTable_SetMagnetDirectionCoordinate(self, exp)

    def ClearMagnetDirection(self):
        return _designer.OptimizationTable_ClearMagnetDirection(self)

    def SetMagnetDirectionType(self, index, exp):
        return _designer.OptimizationTable_SetMagnetDirectionType(self, index, exp)

    def SetMagnetDirectionGroup(self, index, exp):
        return _designer.OptimizationTable_SetMagnetDirectionGroup(self, index, exp)

    def SetMagnetDirectionMin(self, index, value):
        return _designer.OptimizationTable_SetMagnetDirectionMin(self, index, value)

    def SetMagnetDirectionMax(self, index, value):
        return _designer.OptimizationTable_SetMagnetDirectionMax(self, index, value)

    def SetParameter(self, key, value):
        return _designer.OptimizationTable_SetParameter(self, key, value)

    def GetParameter(self, key):
        return _designer.OptimizationTable_GetParameter(self, key)

    def MaxCases(self):
        return _designer.OptimizationTable_MaxCases(self)

    def NewCasesPerLoop(self):
        return _designer.OptimizationTable_NewCasesPerLoop(self)

    def Tolerance(self):
        return _designer.OptimizationTable_Tolerance(self)

    def StopOnFailedCase(self):
        return _designer.OptimizationTable_StopOnFailedCase(self)

    def CreateInitialCases(self):
        return _designer.OptimizationTable_CreateInitialCases(self)

    def Machine(self):
        return _designer.OptimizationTable_Machine(self)

    def CpuGroup(self):
        return _designer.OptimizationTable_CpuGroup(self)

    def ResubmitMachine(self):
        return _designer.OptimizationTable_ResubmitMachine(self)

    def ResubmitCpuGroup(self):
        return _designer.OptimizationTable_ResubmitCpuGroup(self)

    def SendSSHSettings(self):
        return _designer.OptimizationTable_SendSSHSettings(self)

    def DeleteRemoteFiles(self):
        return _designer.OptimizationTable_DeleteRemoteFiles(self)

    def RunAsProject(self):
        return _designer.OptimizationTable_RunAsProject(self)

    def NumJobs(self):
        return _designer.OptimizationTable_NumJobs(self)

    def AlwaysCheckConflict(self):
        return _designer.OptimizationTable_AlwaysCheckConflict(self)

    def IsCheckConflict(self):
        return _designer.OptimizationTable_IsCheckConflict(self)

    def IsIgnoreGeometryError(self):
        return _designer.OptimizationTable_IsIgnoreGeometryError(self)

    def UseMultiLicense(self):
        return _designer.OptimizationTable_UseMultiLicense(self)

    def ReservationKey(self):
        return _designer.OptimizationTable_ReservationKey(self)

    def CSVOutputPath(self):
        return _designer.OptimizationTable_CSVOutputPath(self)

    def IsImmediateCSVOutput(self):
        return _designer.OptimizationTable_IsImmediateCSVOutput(self)

    def NumSimultaneousStudies(self):
        return _designer.OptimizationTable_NumSimultaneousStudies(self)

    def PreProcessOnWrite(self):
        return _designer.OptimizationTable_PreProcessOnWrite(self)

    def RestartFileOutputPath(self):
        return _designer.OptimizationTable_RestartFileOutputPath(self)

    def NGnetWeightOutputPath(self):
        return _designer.OptimizationTable_NGnetWeightOutputPath(self)

    def OptimizeMagnetDirection(self):
        return _designer.OptimizationTable_OptimizeMagnetDirection(self)

    def MagnetDirectionCoordinate(self):
        return _designer.OptimizationTable_MagnetDirectionCoordinate(self)

    def MagnetDirectionType(self, index):
        return _designer.OptimizationTable_MagnetDirectionType(self, index)

    def MagnetDirectionGroup(self, index):
        return _designer.OptimizationTable_MagnetDirectionGroup(self, index)

    def MagnetDirectionMin(self, index):
        return _designer.OptimizationTable_MagnetDirectionMin(self, index)

    def MagnetDirectionMax(self, index):
        return _designer.OptimizationTable_MagnetDirectionMax(self, index)
OptimizationTable_swigregister = _designer.OptimizationTable_swigregister
OptimizationTable_swigregister(OptimizationTable)

class CalculationDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculationDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculationDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CalculationDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CalculationDefinition_IsValid(self)

    def SetName(self, name):
        return _designer.CalculationDefinition_SetName(self, name)

    def GetName(self):
        return _designer.CalculationDefinition_GetName(self)

    def ClearParts(self):
        return _designer.CalculationDefinition_ClearParts(self)

    def GetParts(self):
        return _designer.CalculationDefinition_GetParts(self)

    def AddSelected(self, selection):
        return _designer.CalculationDefinition_AddSelected(self, selection)

    def GetSelection(self):
        return _designer.CalculationDefinition_GetSelection(self)

    def ClearTargets(self):
        return _designer.CalculationDefinition_ClearTargets(self)

    def AddTarget(self, name):
        return _designer.CalculationDefinition_AddTarget(self, name)

    def NumSets(self, group=0):
        return _designer.CalculationDefinition_NumSets(self, group)

    def GetSet(self, index, group=0):
        return _designer.CalculationDefinition_GetSet(self, index, group)

    def AddSet(self, set, group=0):
        return _designer.CalculationDefinition_AddSet(self, set, group)

    def AddGroup(self, set, group=0):
        return _designer.CalculationDefinition_AddGroup(self, set, group)

    def AddSetFromModel(self, val, group=0):
        return _designer.CalculationDefinition_AddSetFromModel(self, val, group)

    def RemoveSet(self, val, group=0):
        return _designer.CalculationDefinition_RemoveSet(self, val, group)

    def RemoveAllSets(self, group=0):
        return _designer.CalculationDefinition_RemoveAllSets(self, group)

    def SetCalculationType(self, name):
        return _designer.CalculationDefinition_SetCalculationType(self, name)

    def GetCalculationType(self):
        return _designer.CalculationDefinition_GetCalculationType(self)

    def GetCalculationTypeNames(self):
        return _designer.CalculationDefinition_GetCalculationTypeNames(self)

    def SetPhase(self, value):
        return _designer.CalculationDefinition_SetPhase(self, value)

    def GetPhase(self):
        return _designer.CalculationDefinition_GetPhase(self)

    def SetPhaseType(self, value):
        return _designer.CalculationDefinition_SetPhaseType(self, value)

    def GetPhaseType(self):
        return _designer.CalculationDefinition_GetPhaseType(self)

    def GetThreshold(self):
        return _designer.CalculationDefinition_GetThreshold(self)

    def SetThreshold(self, value):
        return _designer.CalculationDefinition_SetThreshold(self, value)

    def SetResultType(self, *args):
        return _designer.CalculationDefinition_SetResultType(self, *args)

    def GetResultType(self):
        return _designer.CalculationDefinition_GetResultType(self)

    def GetResultTypeNames(self):
        return _designer.CalculationDefinition_GetResultTypeNames(self)

    def SetComponent(self, name):
        return _designer.CalculationDefinition_SetComponent(self, name)

    def GetComponent(self):
        return _designer.CalculationDefinition_GetComponent(self)

    def GetComponentNames(self):
        return _designer.CalculationDefinition_GetComponentNames(self)

    def GetDataSet(self):
        return _designer.CalculationDefinition_GetDataSet(self)

    def GetCaseDataSet(self, caseno):
        return _designer.CalculationDefinition_GetCaseDataSet(self, caseno)

    def SetResultCoordinate(self, name):
        return _designer.CalculationDefinition_SetResultCoordinate(self, name)

    def GetResultCoordinateName(self):
        return _designer.CalculationDefinition_GetResultCoordinateName(self)

    def GetResultCoordinateNameList(self):
        return _designer.CalculationDefinition_GetResultCoordinateNameList(self)

    def GetReferenceStep(self):
        return _designer.CalculationDefinition_GetReferenceStep(self)

    def SetReferenceStep(self, step):
        return _designer.CalculationDefinition_SetReferenceStep(self, step)

    def GetTemperature(self):
        return _designer.CalculationDefinition_GetTemperature(self)

    def SetTemperature(self, value):
        return _designer.CalculationDefinition_SetTemperature(self, value)

    def SetUserComponentType(self, name):
        return _designer.CalculationDefinition_SetUserComponentType(self, name)

    def GetUserComponentType(self):
        return _designer.CalculationDefinition_GetUserComponentType(self)

    def SetHistorySteps(self, *args):
        return _designer.CalculationDefinition_SetHistorySteps(self, *args)

    def SetHistoryAllSteps(self):
        return _designer.CalculationDefinition_SetHistoryAllSteps(self)

    def SetHistoryStepsByString(self, str):
        return _designer.CalculationDefinition_SetHistoryStepsByString(self, str)

    def SetDirectionReverse(self, reverse):
        return _designer.CalculationDefinition_SetDirectionReverse(self, reverse)

    def GetDirectionReverse(self):
        return _designer.CalculationDefinition_GetDirectionReverse(self)

    def SetScaleFactor(self, scaleFactor):
        return _designer.CalculationDefinition_SetScaleFactor(self, scaleFactor)

    def GetScaleFactor(self):
        return _designer.CalculationDefinition_GetScaleFactor(self)

    def SetOneResultPerSet(self, oneResultPerSet):
        return _designer.CalculationDefinition_SetOneResultPerSet(self, oneResultPerSet)

    def IsOneResultPerSet(self):
        return _designer.CalculationDefinition_IsOneResultPerSet(self)

    def SetUsePatternCopy(self, usePatternCopy):
        return _designer.CalculationDefinition_SetUsePatternCopy(self, usePatternCopy)

    def UsePatternCopy(self):
        return _designer.CalculationDefinition_UsePatternCopy(self)

    def SetUseRotationCopy(self, useRotationCopy):
        return _designer.CalculationDefinition_SetUseRotationCopy(self, useRotationCopy)

    def UseRotationCopy(self):
        return _designer.CalculationDefinition_UseRotationCopy(self)

    def SetNumCopies(self, numCopies):
        return _designer.CalculationDefinition_SetNumCopies(self, numCopies)

    def GetNumCopies(self):
        return _designer.CalculationDefinition_GetNumCopies(self)

    def SetOffsetAngle(self, offsetAngle):
        return _designer.CalculationDefinition_SetOffsetAngle(self, offsetAngle)

    def GetOffsetAngle(self):
        return _designer.CalculationDefinition_GetOffsetAngle(self)

    def SetOffsetTranslation(self, offsetTranslation):
        return _designer.CalculationDefinition_SetOffsetTranslation(self, offsetTranslation)

    def GetOffsetTranslation(self):
        return _designer.CalculationDefinition_GetOffsetTranslation(self)

    def SetDirectionAxis(self, x, y, z):
        return _designer.CalculationDefinition_SetDirectionAxis(self, x, y, z)

    def GetDirectionAxis(self):
        return _designer.CalculationDefinition_GetDirectionAxis(self)

    def SetOrigin(self, x, y, z):
        return _designer.CalculationDefinition_SetOrigin(self, x, y, z)

    def GetOrigin(self):
        return _designer.CalculationDefinition_GetOrigin(self)

    def SetUseFullModelConversion(self, use):
        return _designer.CalculationDefinition_SetUseFullModelConversion(self, use)

    def UseFullModelConversion(self):
        return _designer.CalculationDefinition_UseFullModelConversion(self)
CalculationDefinition_swigregister = _designer.CalculationDefinition_swigregister
CalculationDefinition_swigregister(CalculationDefinition)

class ScriptObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ScriptObject
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ScriptObject_IsValid(self)

    def Title(self):
        return _designer.ScriptObject_Title(self)

    def ScriptText(self):
        return _designer.ScriptObject_ScriptText(self)

    def Language(self):
        return _designer.ScriptObject_Language(self)

    def IsDisabled(self):
        return _designer.ScriptObject_IsDisabled(self)

    def SetText(self, text):
        return _designer.ScriptObject_SetText(self, text)

    def SetPropertiesScriptText(self, text):
        return _designer.ScriptObject_SetPropertiesScriptText(self, text)

    def SetTitle(self, title):
        return _designer.ScriptObject_SetTitle(self, title)

    def SetLanguage(self, language):
        return _designer.ScriptObject_SetLanguage(self, language)

    def SetDisabled(self, isDisabled):
        return _designer.ScriptObject_SetDisabled(self, isDisabled)

    def Read(self, filename):
        return _designer.ScriptObject_Read(self, filename)

    def Run(self):
        return _designer.ScriptObject_Run(self)
ScriptObject_swigregister = _designer.ScriptObject_swigregister
ScriptObject_swigregister(ScriptObject)

class CalculationTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculationTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculationTarget, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CalculationTarget
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CalculationTarget_IsValid(self)

    def SetName(self, name):
        return _designer.CalculationTarget_SetName(self, name)

    def GetName(self):
        return _designer.CalculationTarget_GetName(self)

    def SetEvaluationType(self, type):
        return _designer.CalculationTarget_SetEvaluationType(self, type)

    def GetEvaluationType(self):
        return _designer.CalculationTarget_GetEvaluationType(self)

    def SetAxialDirectionType(self, type):
        return _designer.CalculationTarget_SetAxialDirectionType(self, type)

    def GetAxialDirectionType(self):
        return _designer.CalculationTarget_GetAxialDirectionType(self)

    def SetRadius(self, value):
        return _designer.CalculationTarget_SetRadius(self, value)

    def GetRadius(self):
        return _designer.CalculationTarget_GetRadius(self)

    def SetCoordinate(self, name):
        return _designer.CalculationTarget_SetCoordinate(self, name)

    def GetCoordinateName(self):
        return _designer.CalculationTarget_GetCoordinateName(self)

    def GetCoordinateNameList(self):
        return _designer.CalculationTarget_GetCoordinateNameList(self)

    def SetReferenceId(self, value):
        return _designer.CalculationTarget_SetReferenceId(self, value)

    def GetReferenceId(self):
        return _designer.CalculationTarget_GetReferenceId(self)

    def SetReferenceRadius(self, value):
        return _designer.CalculationTarget_SetReferenceRadius(self, value)

    def GetReferenceRadius(self):
        return _designer.CalculationTarget_GetReferenceRadius(self)

    def SetFollowReference(self, follow):
        return _designer.CalculationTarget_SetFollowReference(self, follow)

    def GetFollowReference(self):
        return _designer.CalculationTarget_GetFollowReference(self)

    def SetOffset(self, x, y, z):
        return _designer.CalculationTarget_SetOffset(self, x, y, z)

    def GetOffset(self):
        return _designer.CalculationTarget_GetOffset(self)

    def SetTable(self, mat):
        return _designer.CalculationTarget_SetTable(self, mat)
CalculationTarget_swigregister = _designer.CalculationTarget_swigregister
CalculationTarget_swigregister(CalculationTarget)

class ResponseCreateInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseCreateInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseCreateInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ResponseCreateInfo
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ResponseCreateInfo_IsValid(self)

    def IsSpeedCalculationType(self):
        return _designer.ResponseCreateInfo_IsSpeedCalculationType(self)

    def GetCalculationType(self):
        return _designer.ResponseCreateInfo_GetCalculationType(self)

    def SetCalculationType(self, type):
        return _designer.ResponseCreateInfo_SetCalculationType(self, type)

    def GetMotorType(self):
        return _designer.ResponseCreateInfo_GetMotorType(self)

    def SetMotorType(self, type):
        return _designer.ResponseCreateInfo_SetMotorType(self, type)

    def GetTorqueCondition(self):
        return _designer.ResponseCreateInfo_GetTorqueCondition(self)

    def SetTorqueCondition(self, cond):
        return _designer.ResponseCreateInfo_SetTorqueCondition(self, cond)

    def SetTorqueConditionIndex(self, index):
        return _designer.ResponseCreateInfo_SetTorqueConditionIndex(self, index)

    def GetPole(self):
        return _designer.ResponseCreateInfo_GetPole(self)

    def SetPole(self, value):
        return _designer.ResponseCreateInfo_SetPole(self, value)

    def GetWindingFactor(self):
        return _designer.ResponseCreateInfo_GetWindingFactor(self)

    def SetWindingFactor(self, value):
        return _designer.ResponseCreateInfo_SetWindingFactor(self, value)

    def GetUseStrayLoss(self):
        return _designer.ResponseCreateInfo_GetUseStrayLoss(self)

    def GetStrayLoss(self):
        return _designer.ResponseCreateInfo_GetStrayLoss(self)

    def GetBaseFrequency(self):
        return _designer.ResponseCreateInfo_GetBaseFrequency(self)

    def GetBaseVoltage(self):
        return _designer.ResponseCreateInfo_GetBaseVoltage(self)

    def SetUseStrayLoss(self, use):
        return _designer.ResponseCreateInfo_SetUseStrayLoss(self, use)

    def SetStrayLoss(self, value):
        return _designer.ResponseCreateInfo_SetStrayLoss(self, value)

    def SetBaseFrequency(self, value):
        return _designer.ResponseCreateInfo_SetBaseFrequency(self, value)

    def SetBaseVoltage(self, value):
        return _designer.ResponseCreateInfo_SetBaseVoltage(self, value)

    def NumSpeedParameter(self):
        return _designer.ResponseCreateInfo_NumSpeedParameter(self)

    def GetSpeedParameterType(self, paramNo):
        return _designer.ResponseCreateInfo_GetSpeedParameterType(self, paramNo)

    def ClearSpeedParameter(self, paramNo):
        return _designer.ResponseCreateInfo_ClearSpeedParameter(self, paramNo)

    def SetSpeedParameterIncrementRange(self, paramNo, start, increment, steps):
        return _designer.ResponseCreateInfo_SetSpeedParameterIncrementRange(self, paramNo, start, increment, steps)

    def SetSpeedParameterDivisionsRange(self, paramNo, start, end, divisions):
        return _designer.ResponseCreateInfo_SetSpeedParameterDivisionsRange(self, paramNo, start, end, divisions)

    def SetSpeedParameterTableRange(self, paramNo, array):
        return _designer.ResponseCreateInfo_SetSpeedParameterTableRange(self, paramNo, array)

    def NumAccuracyParameter(self):
        return _designer.ResponseCreateInfo_NumAccuracyParameter(self)

    def GetAccuracyParameterName(self, paramNo):
        return _designer.ResponseCreateInfo_GetAccuracyParameterName(self, paramNo)

    def ClearAccuracyParameter(self, paramNo):
        return _designer.ResponseCreateInfo_ClearAccuracyParameter(self, paramNo)

    def SetAccuracyParameter(self, paramNo, nameOrIndex):
        return _designer.ResponseCreateInfo_SetAccuracyParameter(self, paramNo, nameOrIndex)

    def SetAccuracyTable(self, mat):
        return _designer.ResponseCreateInfo_SetAccuracyTable(self, mat)

    def IsAutoCalculationPhaseOffset(self):
        return _designer.ResponseCreateInfo_IsAutoCalculationPhaseOffset(self)

    def GetPhaseOffset(self):
        return _designer.ResponseCreateInfo_GetPhaseOffset(self)

    def SetAutoCalculationPhaseOffset(self, isAuto):
        return _designer.ResponseCreateInfo_SetAutoCalculationPhaseOffset(self, isAuto)

    def SetPhaseOffset(self, value):
        return _designer.ResponseCreateInfo_SetPhaseOffset(self, value)

    def GetInductanceCalculationType(self):
        return _designer.ResponseCreateInfo_GetInductanceCalculationType(self)

    def GetDQAxisTransformType(self):
        return _designer.ResponseCreateInfo_GetDQAxisTransformType(self)

    def SetInductanceCalculationType(self, type):
        return _designer.ResponseCreateInfo_SetInductanceCalculationType(self, type)

    def SetDQAxisTransformType(self, type):
        return _designer.ResponseCreateInfo_SetDQAxisTransformType(self, type)

    def GetParallelJobs(self):
        return _designer.ResponseCreateInfo_GetParallelJobs(self)

    def SetParallelJobs(self, value):
        return _designer.ResponseCreateInfo_SetParallelJobs(self, value)

    def GetMaximumCurrent(self):
        return _designer.ResponseCreateInfo_GetMaximumCurrent(self)

    def SetMaximumCurrent(self, value):
        return _designer.ResponseCreateInfo_SetMaximumCurrent(self, value)

    def GetMaximumSpeed(self):
        return _designer.ResponseCreateInfo_GetMaximumSpeed(self)

    def SetMaximumSpeed(self, value):
        return _designer.ResponseCreateInfo_SetMaximumSpeed(self, value)
ResponseCreateInfo_swigregister = _designer.ResponseCreateInfo_swigregister
ResponseCreateInfo_swigregister(ResponseCreateInfo)

class ResponseCreateAdditionalPointsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseCreateAdditionalPointsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseCreateAdditionalPointsInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ResponseCreateAdditionalPointsInfo
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ResponseCreateAdditionalPointsInfo_IsValid(self)

    def NumParameter(self):
        return _designer.ResponseCreateAdditionalPointsInfo_NumParameter(self)

    def GetParameterType(self, paramNo):
        return _designer.ResponseCreateAdditionalPointsInfo_GetParameterType(self, paramNo)

    def ClearParameter(self, paramNo):
        return _designer.ResponseCreateAdditionalPointsInfo_ClearParameter(self, paramNo)

    def SetSpeedParameterIncrementRange(self, paramNo, start, increment, steps):
        return _designer.ResponseCreateAdditionalPointsInfo_SetSpeedParameterIncrementRange(self, paramNo, start, increment, steps)

    def SetSpeedParameterDivisionsRange(self, paramNo, start, end, divisions):
        return _designer.ResponseCreateAdditionalPointsInfo_SetSpeedParameterDivisionsRange(self, paramNo, start, end, divisions)

    def SetSpeedParameterTableRange(self, paramNo, array):
        return _designer.ResponseCreateAdditionalPointsInfo_SetSpeedParameterTableRange(self, paramNo, array)
ResponseCreateAdditionalPointsInfo_swigregister = _designer.ResponseCreateAdditionalPointsInfo_swigregister
ResponseCreateAdditionalPointsInfo_swigregister(ResponseCreateAdditionalPointsInfo)

class WindingRegion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindingRegion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WindingRegion, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_WindingRegion
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.WindingRegion_IsValid(self)

    def SetName(self, name):
        return _designer.WindingRegion_SetName(self, name)

    def GetName(self):
        return _designer.WindingRegion_GetName(self)

    def NumSlots(self):
        return _designer.WindingRegion_NumSlots(self)

    def NumPoles(self):
        return _designer.WindingRegion_NumPoles(self)

    def Offset(self):
        return _designer.WindingRegion_Offset(self)

    def GetOrigin(self):
        return _designer.WindingRegion_GetOrigin(self)

    def GetAxis(self):
        return _designer.WindingRegion_GetAxis(self)

    def HasCoilEnd(self):
        return _designer.WindingRegion_HasCoilEnd(self)

    def IsWireTemplateRegion(self):
        return _designer.WindingRegion_IsWireTemplateRegion(self)

    def UsePartGroup(self):
        return _designer.WindingRegion_UsePartGroup(self)

    def DetectFromGeometry(self):
        return _designer.WindingRegion_DetectFromGeometry(self)

    def CoilTemplate(self):
        return _designer.WindingRegion_CoilTemplate(self)

    def CoilGroupSize(self):
        return _designer.WindingRegion_CoilGroupSize(self)

    def Phases(self):
        return _designer.WindingRegion_Phases(self)

    def SetSlots(self, numSlots):
        return _designer.WindingRegion_SetSlots(self, numSlots)

    def SetPoles(self, numPoles):
        return _designer.WindingRegion_SetPoles(self, numPoles)

    def SetOffset(self, offset):
        return _designer.WindingRegion_SetOffset(self, offset)

    def SetOrigin(self, origin):
        return _designer.WindingRegion_SetOrigin(self, origin)

    def SetOriginXYZ(self, x, y, z):
        return _designer.WindingRegion_SetOriginXYZ(self, x, y, z)

    def SetAxis(self, axis):
        return _designer.WindingRegion_SetAxis(self, axis)

    def SetAxisXYZ(self, x, y, z):
        return _designer.WindingRegion_SetAxisXYZ(self, x, y, z)

    def SetHasCoilEnd(self, value):
        return _designer.WindingRegion_SetHasCoilEnd(self, value)

    def SetIsWireTemplateRegion(self, value):
        return _designer.WindingRegion_SetIsWireTemplateRegion(self, value)

    def SetUsePartGroup(self, value):
        return _designer.WindingRegion_SetUsePartGroup(self, value)

    def SetDetectFromGeometry(self, value):
        return _designer.WindingRegion_SetDetectFromGeometry(self, value)

    def SetCoilTemplate(self, coilTemplate):
        return _designer.WindingRegion_SetCoilTemplate(self, coilTemplate)

    def SetPhaseToCoilGroup(self, list):
        return _designer.WindingRegion_SetPhaseToCoilGroup(self, list)

    def GetParts(self, layer):
        return _designer.WindingRegion_GetParts(self, layer)

    def GetSelection(self, layer):
        return _designer.WindingRegion_GetSelection(self, layer)

    def ClearParts(self):
        return _designer.WindingRegion_ClearParts(self)

    def AddPart(self, layer, val):
        return _designer.WindingRegion_AddPart(self, layer, val)

    def AddSelected(self, layer, selection):
        return _designer.WindingRegion_AddSelected(self, layer, selection)

    def AddCoilRegion(self, name):
        return _designer.WindingRegion_AddCoilRegion(self, name)

    def DeleteCoilRegion(self, name):
        return _designer.WindingRegion_DeleteCoilRegion(self, name)

    def ReNameCoilRegion(self, arg2, to):
        return _designer.WindingRegion_ReNameCoilRegion(self, arg2, to)
WindingRegion_swigregister = _designer.WindingRegion_swigregister
WindingRegion_swigregister(WindingRegion)

class WindingCoil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindingCoil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WindingCoil, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_WindingCoil
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.WindingCoil_IsValid(self)

    def SetName(self, name):
        return _designer.WindingCoil_SetName(self, name)

    def GetName(self):
        return _designer.WindingCoil_GetName(self)

    def SetPhaseIndex(self, index):
        return _designer.WindingCoil_SetPhaseIndex(self, index)

    def GetPhaseIndex(self):
        return _designer.WindingCoil_GetPhaseIndex(self)

    def SetSerialGroupIndex(self, index):
        return _designer.WindingCoil_SetSerialGroupIndex(self, index)

    def GetSerialGroupIndex(self):
        return _designer.WindingCoil_GetSerialGroupIndex(self)

    def SetTable(self, matrix):
        return _designer.WindingCoil_SetTable(self, matrix)

    def GetTable(self):
        return _designer.WindingCoil_GetTable(self)

    def SetInputType(self, type):
        return _designer.WindingCoil_SetInputType(self, type)

    def InputType(self):
        return _designer.WindingCoil_InputType(self)

    def SetWireType(self, type):
        return _designer.WindingCoil_SetWireType(self, type)

    def WireType(self):
        return _designer.WindingCoil_WireType(self)

    def SetTurns(self, value):
        return _designer.WindingCoil_SetTurns(self, value)

    def Turn(self):
        return _designer.WindingCoil_Turn(self)

    def SetWireDiameter(self, value):
        return _designer.WindingCoil_SetWireDiameter(self, value)

    def WireDiameter(self):
        return _designer.WindingCoil_WireDiameter(self)

    def SetWireWidth(self, value):
        return _designer.WindingCoil_SetWireWidth(self, value)

    def WireWidth(self):
        return _designer.WindingCoil_WireWidth(self)

    def SetWireHeight(self, value):
        return _designer.WindingCoil_SetWireHeight(self, value)

    def WireHeight(self):
        return _designer.WindingCoil_WireHeight(self)

    def SetFilmThickness(self, value):
        return _designer.WindingCoil_SetFilmThickness(self, value)

    def FilmThickness(self):
        return _designer.WindingCoil_FilmThickness(self)

    def SetStrands(self, value):
        return _designer.WindingCoil_SetStrands(self, value)

    def Strands(self):
        return _designer.WindingCoil_Strands(self)

    def SetInsulationThickness(self, value):
        return _designer.WindingCoil_SetInsulationThickness(self, value)

    def InsulationThickness(self):
        return _designer.WindingCoil_InsulationThickness(self)

    def SetSlotFillFactor(self, value):
        return _designer.WindingCoil_SetSlotFillFactor(self, value)

    def SlotFillFactor(self):
        return _designer.WindingCoil_SlotFillFactor(self)

    def SetMaxFillFactor(self, value):
        return _designer.WindingCoil_SetMaxFillFactor(self, value)

    def MaxSlotFillFactor(self):
        return _designer.WindingCoil_MaxSlotFillFactor(self)

    def SetCorrectionFactor(self, value):
        return _designer.WindingCoil_SetCorrectionFactor(self, value)

    def CorrectionFactor(self):
        return _designer.WindingCoil_CorrectionFactor(self)

    def SetResistance(self, value):
        return _designer.WindingCoil_SetResistance(self, value)

    def Resistance(self):
        return _designer.WindingCoil_Resistance(self)

    def SetLeakageInductance(self, value):
        return _designer.WindingCoil_SetLeakageInductance(self, value)

    def LeakageInductance(self):
        return _designer.WindingCoil_LeakageInductance(self)

    def ActualResistance(self):
        return _designer.WindingCoil_ActualResistance(self)

    def ActualSlotFillFactor(self):
        return _designer.WindingCoil_ActualSlotFillFactor(self)

    def ActualWireDiameter(self):
        return _designer.WindingCoil_ActualWireDiameter(self)

    def ActualTurn(self):
        return _designer.WindingCoil_ActualTurn(self)

    def ActualWireWidth(self):
        return _designer.WindingCoil_ActualWireWidth(self)

    def ActualWireHeight(self):
        return _designer.WindingCoil_ActualWireHeight(self)
WindingCoil_swigregister = _designer.WindingCoil_swigregister
WindingCoil_swigregister(WindingCoil)

class WindingDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindingDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WindingDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_WindingDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.WindingDefinition_IsValid(self)

    def SetName(self, name):
        return _designer.WindingDefinition_SetName(self, name)

    def GetName(self):
        return _designer.WindingDefinition_GetName(self)

    def WindingType(self):
        return _designer.WindingDefinition_WindingType(self)

    def Slots(self):
        return _designer.WindingDefinition_Slots(self)

    def Poles(self):
        return _designer.WindingDefinition_Poles(self)

    def Layers(self):
        return _designer.WindingDefinition_Layers(self)

    def PhaseOrder(self):
        return _designer.WindingDefinition_PhaseOrder(self)

    def Region(self):
        return _designer.WindingDefinition_Region(self)

    def Component(self):
        return _designer.WindingDefinition_Component(self)

    def SetRegion(self, region):
        return _designer.WindingDefinition_SetRegion(self, region)

    def SetComponent(self, component):
        return _designer.WindingDefinition_SetComponent(self, component)

    def InputType(self):
        return _designer.WindingDefinition_InputType(self)

    def WireType(self):
        return _designer.WindingDefinition_WireType(self)

    def WindingScheme(self):
        return _designer.WindingDefinition_WindingScheme(self)

    def Turn(self):
        return _designer.WindingDefinition_Turn(self)

    def WireDiameter(self):
        return _designer.WindingDefinition_WireDiameter(self)

    def WireWidth(self):
        return _designer.WindingDefinition_WireWidth(self)

    def WireHeight(self):
        return _designer.WindingDefinition_WireHeight(self)

    def FilmThickness(self):
        return _designer.WindingDefinition_FilmThickness(self)

    def Strands(self):
        return _designer.WindingDefinition_Strands(self)

    def InsulationThickness(self):
        return _designer.WindingDefinition_InsulationThickness(self)

    def SlotFillFactor(self):
        return _designer.WindingDefinition_SlotFillFactor(self)

    def MaxSlotFillFactor(self):
        return _designer.WindingDefinition_MaxSlotFillFactor(self)

    def CorrectionFactor(self):
        return _designer.WindingDefinition_CorrectionFactor(self)

    def Resistance(self):
        return _designer.WindingDefinition_Resistance(self)

    def LeakageInductance(self):
        return _designer.WindingDefinition_LeakageInductance(self)

    def CoilPitch(self):
        return _designer.WindingDefinition_CoilPitch(self)

    def UseMaxCoilPitch(self):
        return _designer.WindingDefinition_UseMaxCoilPitch(self)

    def ParallelCoils(self):
        return _designer.WindingDefinition_ParallelCoils(self)

    def IsReversed(self):
        return _designer.WindingDefinition_IsReversed(self)

    def UsePropertiesPerCoil(self):
        return _designer.WindingDefinition_UsePropertiesPerCoil(self)

    def SerialGroups(self):
        return _designer.WindingDefinition_SerialGroups(self)

    def UpperRingSectionType(self):
        return _designer.WindingDefinition_UpperRingSectionType(self)

    def LowerRingSectionType(self):
        return _designer.WindingDefinition_LowerRingSectionType(self)

    def UpperRingHeight(self):
        return _designer.WindingDefinition_UpperRingHeight(self)

    def UpperRingWidth(self):
        return _designer.WindingDefinition_UpperRingWidth(self)

    def UpperRingTopWidth(self):
        return _designer.WindingDefinition_UpperRingTopWidth(self)

    def UpperRingBottomWidth(self):
        return _designer.WindingDefinition_UpperRingBottomWidth(self)

    def UpperRingOffset(self):
        return _designer.WindingDefinition_UpperRingOffset(self)

    def UpperRingArea(self):
        return _designer.WindingDefinition_UpperRingArea(self)

    def UpperRingAreaFactor(self):
        return _designer.WindingDefinition_UpperRingAreaFactor(self)

    def LowerRingHeight(self):
        return _designer.WindingDefinition_LowerRingHeight(self)

    def LowerRingWidth(self):
        return _designer.WindingDefinition_LowerRingWidth(self)

    def LowerRingTopWidth(self):
        return _designer.WindingDefinition_LowerRingTopWidth(self)

    def LowerRingBottomWidth(self):
        return _designer.WindingDefinition_LowerRingBottomWidth(self)

    def LowerRingOffset(self):
        return _designer.WindingDefinition_LowerRingOffset(self)

    def LowerRingArea(self):
        return _designer.WindingDefinition_LowerRingArea(self)

    def LowerRingAreaFactor(self):
        return _designer.WindingDefinition_LowerRingAreaFactor(self)

    def UpperRingResistance(self):
        return _designer.WindingDefinition_UpperRingResistance(self)

    def LowerRingResistance(self):
        return _designer.WindingDefinition_LowerRingResistance(self)

    def SetInputType(self, type):
        return _designer.WindingDefinition_SetInputType(self, type)

    def SetPhaseOrder(self, type):
        return _designer.WindingDefinition_SetPhaseOrder(self, type)

    def SetTurns(self, value):
        return _designer.WindingDefinition_SetTurns(self, value)

    def SetWindingScheme(self, type):
        return _designer.WindingDefinition_SetWindingScheme(self, type)

    def SetWireDiameter(self, value):
        return _designer.WindingDefinition_SetWireDiameter(self, value)

    def SetWireWidth(self, value):
        return _designer.WindingDefinition_SetWireWidth(self, value)

    def SetWireHeight(self, value):
        return _designer.WindingDefinition_SetWireHeight(self, value)

    def SetFilmThickness(self, value):
        return _designer.WindingDefinition_SetFilmThickness(self, value)

    def SetStrands(self, value):
        return _designer.WindingDefinition_SetStrands(self, value)

    def SetInsulationThickness(self, value):
        return _designer.WindingDefinition_SetInsulationThickness(self, value)

    def SetSlotFillFactor(self, value):
        return _designer.WindingDefinition_SetSlotFillFactor(self, value)

    def SetMaxFillFactor(self, value):
        return _designer.WindingDefinition_SetMaxFillFactor(self, value)

    def SetCorrectionFactor(self, value):
        return _designer.WindingDefinition_SetCorrectionFactor(self, value)

    def SetResistance(self, value):
        return _designer.WindingDefinition_SetResistance(self, value)

    def SetLeakageInductance(self, value):
        return _designer.WindingDefinition_SetLeakageInductance(self, value)

    def SetParallelCoils(self, number):
        return _designer.WindingDefinition_SetParallelCoils(self, number)

    def SetWireType(self, type):
        return _designer.WindingDefinition_SetWireType(self, type)

    def SetLayers(self, layers):
        return _designer.WindingDefinition_SetLayers(self, layers)

    def SetCoilPitch(self, value):
        return _designer.WindingDefinition_SetCoilPitch(self, value)

    def SetUseMaximumPitch(self, value):
        return _designer.WindingDefinition_SetUseMaximumPitch(self, value)

    def SetReverse(self, value):
        return _designer.WindingDefinition_SetReverse(self, value)

    def SetUsePropertiesPerCoil(self, value):
        return _designer.WindingDefinition_SetUsePropertiesPerCoil(self, value)

    def SetSerialGroups(self, value):
        return _designer.WindingDefinition_SetSerialGroups(self, value)

    def SetUpperRingSectionType(self, type):
        return _designer.WindingDefinition_SetUpperRingSectionType(self, type)

    def SetLowerRingSectionType(self, type):
        return _designer.WindingDefinition_SetLowerRingSectionType(self, type)

    def SetUpperRingHeight(self, value):
        return _designer.WindingDefinition_SetUpperRingHeight(self, value)

    def SetUpperRingWidth(self, value):
        return _designer.WindingDefinition_SetUpperRingWidth(self, value)

    def SetUpperRingTopWidth(self, value):
        return _designer.WindingDefinition_SetUpperRingTopWidth(self, value)

    def SetUpperRingBottomWidth(self, value):
        return _designer.WindingDefinition_SetUpperRingBottomWidth(self, value)

    def SetUpperRingOffset(self, value):
        return _designer.WindingDefinition_SetUpperRingOffset(self, value)

    def SetUpperRingArea(self, value):
        return _designer.WindingDefinition_SetUpperRingArea(self, value)

    def SetUpperRingAreaFactor(self, value):
        return _designer.WindingDefinition_SetUpperRingAreaFactor(self, value)

    def SetLowerRingHeight(self, value):
        return _designer.WindingDefinition_SetLowerRingHeight(self, value)

    def SetLowerRingWidth(self, value):
        return _designer.WindingDefinition_SetLowerRingWidth(self, value)

    def SetLowerRingTopWidth(self, value):
        return _designer.WindingDefinition_SetLowerRingTopWidth(self, value)

    def SetLowerRingBottomWidth(self, value):
        return _designer.WindingDefinition_SetLowerRingBottomWidth(self, value)

    def SetLowerRingOffset(self, value):
        return _designer.WindingDefinition_SetLowerRingOffset(self, value)

    def SetLowerRingArea(self, value):
        return _designer.WindingDefinition_SetLowerRingArea(self, value)

    def SetLowerRingAreaFactor(self, value):
        return _designer.WindingDefinition_SetLowerRingAreaFactor(self, value)

    def SetUpperRingResistance(self, value):
        return _designer.WindingDefinition_SetUpperRingResistance(self, value)

    def SetLowerRingResistance(self, value):
        return _designer.WindingDefinition_SetLowerRingResistance(self, value)

    def SetCoilTable(self, phase, matrix):
        return _designer.WindingDefinition_SetCoilTable(self, phase, matrix)

    def GetCoilTable(self, phase):
        return _designer.WindingDefinition_GetCoilTable(self, phase)

    def CoilPitchValues(self):
        return _designer.WindingDefinition_CoilPitchValues(self)

    def ParallelNumberValues(self):
        return _designer.WindingDefinition_ParallelNumberValues(self)

    def ActualResistance(self):
        return _designer.WindingDefinition_ActualResistance(self)

    def ActualSlotFillFactor(self):
        return _designer.WindingDefinition_ActualSlotFillFactor(self)

    def ActualWireDiameter(self):
        return _designer.WindingDefinition_ActualWireDiameter(self)

    def ActualTurn(self):
        return _designer.WindingDefinition_ActualTurn(self)

    def ActualWireWidth(self):
        return _designer.WindingDefinition_ActualWireWidth(self)

    def ActualInductance(self):
        return _designer.WindingDefinition_ActualInductance(self)

    def NumCoils(self):
        return _designer.WindingDefinition_NumCoils(self)

    def CreateCoil(self, name):
        return _designer.WindingDefinition_CreateCoil(self, name)

    def RemoveCoil(self, index):
        return _designer.WindingDefinition_RemoveCoil(self, index)

    def RemoveAllCoils(self):
        return _designer.WindingDefinition_RemoveAllCoils(self)

    def GetCoil(self, index):
        return _designer.WindingDefinition_GetCoil(self, index)

    def ImportCoilSetting(self, filename):
        return _designer.WindingDefinition_ImportCoilSetting(self, filename)

    def ExportCoilSetting(self, filename):
        return _designer.WindingDefinition_ExportCoilSetting(self, filename)
WindingDefinition_swigregister = _designer.WindingDefinition_swigregister
WindingDefinition_swigregister(WindingDefinition)

class ResponseTableCorrection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseTableCorrection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseTableCorrection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ResponseTableCorrection
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ResponseTableCorrection_IsValid(self)

    def Name(self):
        return _designer.ResponseTableCorrection_Name(self)

    def LossFactor(self):
        return _designer.ResponseTableCorrection_LossFactor(self)

    def InductanceFactor(self):
        return _designer.ResponseTableCorrection_InductanceFactor(self)

    def FluxFactor(self):
        return _designer.ResponseTableCorrection_FluxFactor(self)

    def LeakageInductance(self):
        return _designer.ResponseTableCorrection_LeakageInductance(self)

    def CoilResistance(self):
        return _designer.ResponseTableCorrection_CoilResistance(self)

    def CoilStandardTemp(self):
        return _designer.ResponseTableCorrection_CoilStandardTemp(self)

    def CoilTemp(self):
        return _designer.ResponseTableCorrection_CoilTemp(self)

    def CoilTempFactor(self):
        return _designer.ResponseTableCorrection_CoilTempFactor(self)

    def MagnetStandardTemp(self):
        return _designer.ResponseTableCorrection_MagnetStandardTemp(self)

    def MagnetTemp(self):
        return _designer.ResponseTableCorrection_MagnetTemp(self)

    def MagnetTempFactor(self):
        return _designer.ResponseTableCorrection_MagnetTempFactor(self)

    def RotorSkewType(self):
        return _designer.ResponseTableCorrection_RotorSkewType(self)

    def RotorSkewAngle(self):
        return _designer.ResponseTableCorrection_RotorSkewAngle(self)

    def RotorSkewSteps(self):
        return _designer.ResponseTableCorrection_RotorSkewSteps(self)

    def StatorSkewType(self):
        return _designer.ResponseTableCorrection_StatorSkewType(self)

    def StatorSkewAngle(self):
        return _designer.ResponseTableCorrection_StatorSkewAngle(self)

    def StatorSkewSteps(self):
        return _designer.ResponseTableCorrection_StatorSkewSteps(self)

    def TableName(self):
        return _designer.ResponseTableCorrection_TableName(self)

    def SetName(self, title):
        return _designer.ResponseTableCorrection_SetName(self, title)

    def SetLossFactor(self, factor):
        return _designer.ResponseTableCorrection_SetLossFactor(self, factor)

    def SetInductanceFactor(self, factor):
        return _designer.ResponseTableCorrection_SetInductanceFactor(self, factor)

    def SetFluxFactor(self, factor):
        return _designer.ResponseTableCorrection_SetFluxFactor(self, factor)

    def SetLeakageInductance(self, value):
        return _designer.ResponseTableCorrection_SetLeakageInductance(self, value)

    def SetCoilResistance(self, value):
        return _designer.ResponseTableCorrection_SetCoilResistance(self, value)

    def SetCoilStandardTemp(self, temp):
        return _designer.ResponseTableCorrection_SetCoilStandardTemp(self, temp)

    def SetCoilTemp(self, temp):
        return _designer.ResponseTableCorrection_SetCoilTemp(self, temp)

    def SetCoilTempFactor(self, factor):
        return _designer.ResponseTableCorrection_SetCoilTempFactor(self, factor)

    def SetMagnetStandardTemp(self, temp):
        return _designer.ResponseTableCorrection_SetMagnetStandardTemp(self, temp)

    def SetMagnetTemp(self, temp):
        return _designer.ResponseTableCorrection_SetMagnetTemp(self, temp)

    def SetMagnetTempFactor(self, factor):
        return _designer.ResponseTableCorrection_SetMagnetTempFactor(self, factor)

    def SetRotorSkewType(self, type):
        return _designer.ResponseTableCorrection_SetRotorSkewType(self, type)

    def SetRotorSkewAngle(self, angle):
        return _designer.ResponseTableCorrection_SetRotorSkewAngle(self, angle)

    def SetRotorSkewSteps(self, steps):
        return _designer.ResponseTableCorrection_SetRotorSkewSteps(self, steps)

    def SetStatorSkewType(self, type):
        return _designer.ResponseTableCorrection_SetStatorSkewType(self, type)

    def SetStatorSkewAngle(self, angle):
        return _designer.ResponseTableCorrection_SetStatorSkewAngle(self, angle)

    def SetStatorSkewSteps(self, steps):
        return _designer.ResponseTableCorrection_SetStatorSkewSteps(self, steps)

    def SetTable(self, name):
        return _designer.ResponseTableCorrection_SetTable(self, name)

    def NumCustomCalculation(self):
        return _designer.ResponseTableCorrection_NumCustomCalculation(self)

    def CustomVariable(self, index):
        return _designer.ResponseTableCorrection_CustomVariable(self, index)

    def CustomExpression(self, variable):
        return _designer.ResponseTableCorrection_CustomExpression(self, variable)

    def SetCustomExpression(self, variable, expr):
        return _designer.ResponseTableCorrection_SetCustomExpression(self, variable, expr)

    def CustomPythonScript(self, variable):
        return _designer.ResponseTableCorrection_CustomPythonScript(self, variable)

    def SetCustomPythonScript(self, variable, script):
        return _designer.ResponseTableCorrection_SetCustomPythonScript(self, variable, script)
ResponseTableCorrection_swigregister = _designer.ResponseTableCorrection_swigregister
ResponseTableCorrection_swigregister(ResponseTableCorrection)

class ResponseTableDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseTableDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseTableDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ResponseTableDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ResponseTableDefinition_IsValid(self)

    def Name(self):
        return _designer.ResponseTableDefinition_Name(self)

    def TotalLossResult(self):
        return _designer.ResponseTableDefinition_TotalLossResult(self)

    def TotalSubtractTorque(self):
        return _designer.ResponseTableDefinition_TotalSubtractTorque(self)

    def LossItemTitle(self, index):
        return _designer.ResponseTableDefinition_LossItemTitle(self, index)

    def LossItemResult(self, index):
        return _designer.ResponseTableDefinition_LossItemResult(self, index)

    def SubtractTorque(self, index):
        return _designer.ResponseTableDefinition_SubtractTorque(self, index)

    def IncludeStandardComponent(self):
        return _designer.ResponseTableDefinition_IncludeStandardComponent(self)

    def SetName(self, name):
        return _designer.ResponseTableDefinition_SetName(self, name)

    def SetType(self, type):
        return _designer.ResponseTableDefinition_SetType(self, type)

    def SetIncludeStandardComponent(self, include):
        return _designer.ResponseTableDefinition_SetIncludeStandardComponent(self, include)

    def ClearLossItems(self):
        return _designer.ResponseTableDefinition_ClearLossItems(self)

    def SetTotalLossResult(self, *args):
        return _designer.ResponseTableDefinition_SetTotalLossResult(self, *args)

    def SetLossItem(self, *args):
        return _designer.ResponseTableDefinition_SetLossItem(self, *args)
ResponseTableDefinition_swigregister = _designer.ResponseTableDefinition_swigregister
ResponseTableDefinition_swigregister(ResponseTableDefinition)

class ResponseTableResultType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseTableResultType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseTableResultType, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ResponseTableResultType
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ResponseTableResultType_IsValid(self)

    def Name(self):
        return _designer.ResponseTableResultType_Name(self)

    def ResultType(self):
        return _designer.ResponseTableResultType_ResultType(self)

    def SetName(self, name):
        return _designer.ResponseTableResultType_SetName(self, name)

    def SetResultType(self, name):
        return _designer.ResponseTableResultType_SetResultType(self, name)
ResponseTableResultType_swigregister = _designer.ResponseTableResultType_swigregister
ResponseTableResultType_swigregister(ResponseTableResultType)

class EfficiencyMapDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EfficiencyMapDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EfficiencyMapDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_EfficiencyMapDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.EfficiencyMapDefinition_IsValid(self)

    def Name(self):
        return _designer.EfficiencyMapDefinition_Name(self)

    def TableName(self):
        return _designer.EfficiencyMapDefinition_TableName(self)

    def MaxVoltage(self):
        return _designer.EfficiencyMapDefinition_MaxVoltage(self)

    def MaxCurrent(self):
        return _designer.EfficiencyMapDefinition_MaxCurrent(self)

    def VoltageLimitType(self):
        return _designer.EfficiencyMapDefinition_VoltageLimitType(self)

    def MotorControlType(self):
        return _designer.EfficiencyMapDefinition_MotorControlType(self)

    def ControlName(self):
        return _designer.EfficiencyMapDefinition_ControlName(self)

    def MechancialLossFactor(self):
        return _designer.EfficiencyMapDefinition_MechancialLossFactor(self)

    def CorrectionType(self):
        return _designer.EfficiencyMapDefinition_CorrectionType(self)

    def MotorMode(self):
        return _designer.EfficiencyMapDefinition_MotorMode(self)

    def TorqueType(self):
        return _designer.EfficiencyMapDefinition_TorqueType(self)

    def XAxisDivisions(self):
        return _designer.EfficiencyMapDefinition_XAxisDivisions(self)

    def YAxisDivisions(self):
        return _designer.EfficiencyMapDefinition_YAxisDivisions(self)

    def AddPWMIronLoss(self):
        return _designer.EfficiencyMapDefinition_AddPWMIronLoss(self)

    def DCBusVoltage(self):
        return _designer.EfficiencyMapDefinition_DCBusVoltage(self)

    def CarrierFrequency(self):
        return _designer.EfficiencyMapDefinition_CarrierFrequency(self)

    def SetName(self, title):
        return _designer.EfficiencyMapDefinition_SetName(self, title)

    def SetTable(self, name):
        return _designer.EfficiencyMapDefinition_SetTable(self, name)

    def SetMaxVoltage(self, voltage):
        return _designer.EfficiencyMapDefinition_SetMaxVoltage(self, voltage)

    def SetMaxCurrent(self, current):
        return _designer.EfficiencyMapDefinition_SetMaxCurrent(self, current)

    def SetVoltageLimitType(self, type):
        return _designer.EfficiencyMapDefinition_SetVoltageLimitType(self, type)

    def SetMechancialLossFactor(self, factor):
        return _designer.EfficiencyMapDefinition_SetMechancialLossFactor(self, factor)

    def SetMotorControlType(self, type):
        return _designer.EfficiencyMapDefinition_SetMotorControlType(self, type)

    def SetControlType(self, type):
        return _designer.EfficiencyMapDefinition_SetControlType(self, type)

    def SetCorrectionType(self, type):
        return _designer.EfficiencyMapDefinition_SetCorrectionType(self, type)

    def SetMotorMode(self, mode):
        return _designer.EfficiencyMapDefinition_SetMotorMode(self, mode)

    def SetTorqueType(self, type):
        return _designer.EfficiencyMapDefinition_SetTorqueType(self, type)

    def SetXAxisDivisions(self, value):
        return _designer.EfficiencyMapDefinition_SetXAxisDivisions(self, value)

    def SetYAxisDivisions(self, value):
        return _designer.EfficiencyMapDefinition_SetYAxisDivisions(self, value)

    def SetCorrectionTable(self, mat):
        return _designer.EfficiencyMapDefinition_SetCorrectionTable(self, mat)

    def SetAddPWMIronLoss(self, value):
        return _designer.EfficiencyMapDefinition_SetAddPWMIronLoss(self, value)

    def SetDCBusVoltage(self, voltage):
        return _designer.EfficiencyMapDefinition_SetDCBusVoltage(self, voltage)

    def SetCarrierFrequency(self, frequency):
        return _designer.EfficiencyMapDefinition_SetCarrierFrequency(self, frequency)

    def SetAddMagnetLoss(self, addMagnetLoss):
        return _designer.EfficiencyMapDefinition_SetAddMagnetLoss(self, addMagnetLoss)

    def SetOverrideMaterialConductivity(self, override):
        return _designer.EfficiencyMapDefinition_SetOverrideMaterialConductivity(self, override)

    def SetMagnetConductivity(self, index, conductivity):
        return _designer.EfficiencyMapDefinition_SetMagnetConductivity(self, index, conductivity)

    def SetAxialSegmentation(self, axialSegmentation):
        return _designer.EfficiencyMapDefinition_SetAxialSegmentation(self, axialSegmentation)

    def SetAirGapCorrection(self, airGap):
        return _designer.EfficiencyMapDefinition_SetAirGapCorrection(self, airGap)

    def GetAddMagnetLoss(self):
        return _designer.EfficiencyMapDefinition_GetAddMagnetLoss(self)

    def GetOverrideMaterialConductivity(self):
        return _designer.EfficiencyMapDefinition_GetOverrideMaterialConductivity(self)

    def GetMagnetConductivity(self, index):
        return _designer.EfficiencyMapDefinition_GetMagnetConductivity(self, index)

    def GetAxialSegmentation(self):
        return _designer.EfficiencyMapDefinition_GetAxialSegmentation(self)

    def GetAirGapCorrection(self):
        return _designer.EfficiencyMapDefinition_GetAirGapCorrection(self)

    def SetAddACLoss(self, value):
        return _designer.EfficiencyMapDefinition_SetAddACLoss(self, value)

    def SetConductorType(self, type):
        return _designer.EfficiencyMapDefinition_SetConductorType(self, type)

    def SetSeriesConductorsSlotHeight(self, slotHeight):
        return _designer.EfficiencyMapDefinition_SetSeriesConductorsSlotHeight(self, slotHeight)

    def SetParallelConductorsSlotHeight(self, slotHeight):
        return _designer.EfficiencyMapDefinition_SetParallelConductorsSlotHeight(self, slotHeight)

    def SetConductorsSlotWidth(self, slotWidth):
        return _designer.EfficiencyMapDefinition_SetConductorsSlotWidth(self, slotWidth)

    def SetAverageSlotWidth(self, averageSlotWidth):
        return _designer.EfficiencyMapDefinition_SetAverageSlotWidth(self, averageSlotWidth)

    def SetConductorHeight(self, height):
        return _designer.EfficiencyMapDefinition_SetConductorHeight(self, height)

    def SetConductorWidth(self, width):
        return _designer.EfficiencyMapDefinition_SetConductorWidth(self, width)

    def SetConductorDiameter(self, diameter):
        return _designer.EfficiencyMapDefinition_SetConductorDiameter(self, diameter)

    def SetConductivity(self, conductivity):
        return _designer.EfficiencyMapDefinition_SetConductivity(self, conductivity)

    def AddACLoss(self):
        return _designer.EfficiencyMapDefinition_AddACLoss(self)

    def ConductorType(self):
        return _designer.EfficiencyMapDefinition_ConductorType(self)

    def SeriesConductorsSlotHeight(self):
        return _designer.EfficiencyMapDefinition_SeriesConductorsSlotHeight(self)

    def ParallelConductorsSlotHeight(self):
        return _designer.EfficiencyMapDefinition_ParallelConductorsSlotHeight(self)

    def ConductorsSlotWidth(self):
        return _designer.EfficiencyMapDefinition_ConductorsSlotWidth(self)

    def AverageSlotWidth(self):
        return _designer.EfficiencyMapDefinition_AverageSlotWidth(self)

    def ConductorHeight(self):
        return _designer.EfficiencyMapDefinition_ConductorHeight(self)

    def ConductorWidth(self):
        return _designer.EfficiencyMapDefinition_ConductorWidth(self)

    def ConductorDiameter(self):
        return _designer.EfficiencyMapDefinition_ConductorDiameter(self)

    def Conductivity(self):
        return _designer.EfficiencyMapDefinition_Conductivity(self)

    def ClusterPoints(self):
        return _designer.EfficiencyMapDefinition_ClusterPoints(self)

    def SetClusterPoints(self, value):
        return _designer.EfficiencyMapDefinition_SetClusterPoints(self, value)

    def SetDriveCycleTable(self, mat):
        return _designer.EfficiencyMapDefinition_SetDriveCycleTable(self, mat)
EfficiencyMapDefinition_swigregister = _designer.EfficiencyMapDefinition_swigregister
EfficiencyMapDefinition_swigregister(EfficiencyMapDefinition)

class EfficiencyMapPlot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EfficiencyMapPlot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EfficiencyMapPlot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_EfficiencyMapPlot
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.EfficiencyMapPlot_IsValid(self)

    def AddPoint(self, x, y):
        return _designer.EfficiencyMapPlot_AddPoint(self, x, y)

    def AddPoints(self, mat):
        return _designer.EfficiencyMapPlot_AddPoints(self, mat)

    def AddPointsFromRange(self, x_start, x_end, x_division, y_start, y_end, y_division):
        return _designer.EfficiencyMapPlot_AddPointsFromRange(self, x_start, x_end, x_division, y_start, y_end, y_division)

    def DeletePoint(self, index):
        return _designer.EfficiencyMapPlot_DeletePoint(self, index)

    def DeleteAllPoints(self):
        return _designer.EfficiencyMapPlot_DeleteAllPoints(self)

    def DuplicateStudyWithOperatingPoint(self, *args):
        return _designer.EfficiencyMapPlot_DuplicateStudyWithOperatingPoint(self, *args)

    def DuplicateStudyWithOperatingPointFromRange(self, *args):
        return _designer.EfficiencyMapPlot_DuplicateStudyWithOperatingPointFromRange(self, *args)

    def ExportOperatingPoint(self, *args):
        return _designer.EfficiencyMapPlot_ExportOperatingPoint(self, *args)

    def ExportOperatingPointFromRange(self, *args):
        return _designer.EfficiencyMapPlot_ExportOperatingPointFromRange(self, *args)

    def ExportData(self, type, filename):
        return _designer.EfficiencyMapPlot_ExportData(self, type, filename)

    def ExportDataFromRange(self, type, filename, x_start, x_end, x_division, y_start, y_end, y_division):
        return _designer.EfficiencyMapPlot_ExportDataFromRange(self, type, filename, x_start, x_end, x_division, y_start, y_end, y_division)

    def ExportTorqueTable(self, filename, start, end, division, motorMode):
        return _designer.EfficiencyMapPlot_ExportTorqueTable(self, filename, start, end, division, motorMode)

    def ExportDriveCycleData(self, type, filename):
        return _designer.EfficiencyMapPlot_ExportDriveCycleData(self, type, filename)

    def ExportRttFile(self, overWrite, filename, magnet, coil, x_division, y_division, voltage, current, publish):
        return _designer.EfficiencyMapPlot_ExportRttFile(self, overWrite, filename, magnet, coil, x_division, y_division, voltage, current, publish)

    def GetResultMinXValue(self):
        return _designer.EfficiencyMapPlot_GetResultMinXValue(self)

    def GetResultMaxXValue(self):
        return _designer.EfficiencyMapPlot_GetResultMaxXValue(self)

    def GetResultXDivisions(self):
        return _designer.EfficiencyMapPlot_GetResultXDivisions(self)

    def GetResultMinYValue(self):
        return _designer.EfficiencyMapPlot_GetResultMinYValue(self)

    def GetResultMaxYValue(self):
        return _designer.EfficiencyMapPlot_GetResultMaxYValue(self)

    def GetResultYDivisions(self):
        return _designer.EfficiencyMapPlot_GetResultYDivisions(self)

    def NumResults(self):
        return _designer.EfficiencyMapPlot_NumResults(self)

    def GetResultType(self, index):
        return _designer.EfficiencyMapPlot_GetResultType(self, index)

    def GetResultTypeName(self, index):
        return _designer.EfficiencyMapPlot_GetResultTypeName(self, index)

    def SaveMapImage(self, *args):
        return _designer.EfficiencyMapPlot_SaveMapImage(self, *args)

    def ShowDialog(self, type):
        return _designer.EfficiencyMapPlot_ShowDialog(self, type)

    def SetName(self, name):
        return _designer.EfficiencyMapPlot_SetName(self, name)

    def GetName(self):
        return _designer.EfficiencyMapPlot_GetName(self)

    def SetProperty(self, *args):
        return _designer.EfficiencyMapPlot_SetProperty(self, *args)

    def GetProperty(self, *args):
        return _designer.EfficiencyMapPlot_GetProperty(self, *args)

    def GetPointResult(self, type, x, y):
        return _designer.EfficiencyMapPlot_GetPointResult(self, type, x, y)

    def IsValidPoint(self, x, y):
        return _designer.EfficiencyMapPlot_IsValidPoint(self, x, y)

    def GetTorqueTableResult(self, type, speed):
        return _designer.EfficiencyMapPlot_GetTorqueTableResult(self, type, speed)

    def SetNTCurveInitialValue(self, value):
        return _designer.EfficiencyMapPlot_SetNTCurveInitialValue(self, value)

    def SetNTCurveEndValue(self, value):
        return _designer.EfficiencyMapPlot_SetNTCurveEndValue(self, value)

    def SetNTCurveDivisions(self, value):
        return _designer.EfficiencyMapPlot_SetNTCurveDivisions(self, value)

    def SetNTCurveMotorMode(self, value):
        return _designer.EfficiencyMapPlot_SetNTCurveMotorMode(self, value)

    def NTCurveInitialValue(self):
        return _designer.EfficiencyMapPlot_NTCurveInitialValue(self)

    def NTCurveEndValue(self):
        return _designer.EfficiencyMapPlot_NTCurveEndValue(self)

    def NTCurveDivisions(self):
        return _designer.EfficiencyMapPlot_NTCurveDivisions(self)

    def NTCurveMotorMode(self):
        return _designer.EfficiencyMapPlot_NTCurveMotorMode(self)
EfficiencyMapPlot_swigregister = _designer.EfficiencyMapPlot_swigregister
EfficiencyMapPlot_swigregister(EfficiencyMapPlot)

class DifferenceEfficiencyMapDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DifferenceEfficiencyMapDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DifferenceEfficiencyMapDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_DifferenceEfficiencyMapDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.DifferenceEfficiencyMapDefinition_IsValid(self)

    def Name(self):
        return _designer.DifferenceEfficiencyMapDefinition_Name(self)

    def SetName(self, title):
        return _designer.DifferenceEfficiencyMapDefinition_SetName(self, title)

    def GetCalculationType(self):
        return _designer.DifferenceEfficiencyMapDefinition_GetCalculationType(self)

    def SetCalculationType(self, type):
        return _designer.DifferenceEfficiencyMapDefinition_SetCalculationType(self, type)

    def GetOutlineOverlap(self):
        return _designer.DifferenceEfficiencyMapDefinition_GetOutlineOverlap(self)

    def SetOutlineOverlap(self, overlap):
        return _designer.DifferenceEfficiencyMapDefinition_SetOutlineOverlap(self, overlap)

    def GetBaseEfficiencyMap(self):
        return _designer.DifferenceEfficiencyMapDefinition_GetBaseEfficiencyMap(self)

    def SetBaseEfficiencyMap(self, arg2):
        return _designer.DifferenceEfficiencyMapDefinition_SetBaseEfficiencyMap(self, arg2)

    def GetBaseExternalEfficiencyMap(self):
        return _designer.DifferenceEfficiencyMapDefinition_GetBaseExternalEfficiencyMap(self)

    def SetBaseExternalEfficiencyMap(self, arg2):
        return _designer.DifferenceEfficiencyMapDefinition_SetBaseExternalEfficiencyMap(self, arg2)

    def GetBaseCaseIndex(self):
        return _designer.DifferenceEfficiencyMapDefinition_GetBaseCaseIndex(self)

    def SetBaseCaseIndex(self, caseIndex):
        return _designer.DifferenceEfficiencyMapDefinition_SetBaseCaseIndex(self, caseIndex)

    def GetOtherStudy(self):
        return _designer.DifferenceEfficiencyMapDefinition_GetOtherStudy(self)

    def SetOtherStudy(self, study):
        return _designer.DifferenceEfficiencyMapDefinition_SetOtherStudy(self, study)

    def GetOtherEfficiencyMap(self):
        return _designer.DifferenceEfficiencyMapDefinition_GetOtherEfficiencyMap(self)

    def SetOtherEfficiencyMap(self, arg2):
        return _designer.DifferenceEfficiencyMapDefinition_SetOtherEfficiencyMap(self, arg2)

    def GetOtherExternalEfficiencyMap(self):
        return _designer.DifferenceEfficiencyMapDefinition_GetOtherExternalEfficiencyMap(self)

    def SetOtherExternalEfficiencyMap(self, arg2):
        return _designer.DifferenceEfficiencyMapDefinition_SetOtherExternalEfficiencyMap(self, arg2)

    def GetOtherCaseIndex(self):
        return _designer.DifferenceEfficiencyMapDefinition_GetOtherCaseIndex(self)

    def SetOtherCaseIndex(self, caseIndex):
        return _designer.DifferenceEfficiencyMapDefinition_SetOtherCaseIndex(self, caseIndex)

    def ClearRelationTable(self):
        return _designer.DifferenceEfficiencyMapDefinition_ClearRelationTable(self)

    def SetRelationTable(self, array):
        return _designer.DifferenceEfficiencyMapDefinition_SetRelationTable(self, array)
DifferenceEfficiencyMapDefinition_swigregister = _designer.DifferenceEfficiencyMapDefinition_swigregister
DifferenceEfficiencyMapDefinition_swigregister(DifferenceEfficiencyMapDefinition)

class VectorExpression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorExpression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorExpression, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_VectorExpression
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.VectorExpression_IsValid(self)

    def SetName(self, title):
        return _designer.VectorExpression_SetName(self, title)

    def GetName(self):
        return _designer.VectorExpression_GetName(self)

    def SetType(self, type):
        return _designer.VectorExpression_SetType(self, type)

    def GetType(self):
        return _designer.VectorExpression_GetType(self)

    def SetVariable(self, variable):
        return _designer.VectorExpression_SetVariable(self, variable)

    def GetVariable(self):
        return _designer.VectorExpression_GetVariable(self)

    def SetExpression(self, expression):
        return _designer.VectorExpression_SetExpression(self, expression)

    def GetExpression(self):
        return _designer.VectorExpression_GetExpression(self)

    def SetReferenceDataFromTable(self, refData):
        return _designer.VectorExpression_SetReferenceDataFromTable(self, refData)

    def SetReferenceDataFromProbe(self, refData):
        return _designer.VectorExpression_SetReferenceDataFromProbe(self, refData)

    def SetReferenceDataFromSection(self, refData):
        return _designer.VectorExpression_SetReferenceDataFromSection(self, refData)

    def SetReferenceDataFromCalculation(self, refData):
        return _designer.VectorExpression_SetReferenceDataFromCalculation(self, refData)

    def GetReferenceData(self):
        return _designer.VectorExpression_GetReferenceData(self)

    def SetUnit(self, unit):
        return _designer.VectorExpression_SetUnit(self, unit)

    def GetUnit(self):
        return _designer.VectorExpression_GetUnit(self)

    def SetLine(self, line):
        return _designer.VectorExpression_SetLine(self, line)

    def GetLine(self):
        return _designer.VectorExpression_GetLine(self)

    def ClearParameter(self):
        return _designer.VectorExpression_ClearParameter(self)

    def SetCaseRangeType(self, type):
        return _designer.VectorExpression_SetCaseRangeType(self, type)

    def GetCaseRangeType(self):
        return _designer.VectorExpression_GetCaseRangeType(self)

    def SetRange(self, start, end):
        return _designer.VectorExpression_SetRange(self, start, end)

    def GetStart(self):
        return _designer.VectorExpression_GetStart(self)

    def GetEnd(self):
        return _designer.VectorExpression_GetEnd(self)

    def SetInterval(self, interval):
        return _designer.VectorExpression_SetInterval(self, interval)

    def GetInterval(self):
        return _designer.VectorExpression_GetInterval(self)

    def SetPerCaseRange(self, index, start, end):
        return _designer.VectorExpression_SetPerCaseRange(self, index, start, end)

    def GetPerCaseStart(self, index):
        return _designer.VectorExpression_GetPerCaseStart(self, index)

    def GetPerCaseEnd(self, index):
        return _designer.VectorExpression_GetPerCaseEnd(self, index)
VectorExpression_swigregister = _designer.VectorExpression_swigregister
VectorExpression_swigregister(VectorExpression)

class ResultViewItemList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultViewItemList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultViewItemList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ResultViewItemList
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ResultViewItemList_IsValid(self)

    def NumResultViewItem(self):
        return _designer.ResultViewItemList_NumResultViewItem(self)

    def DeleteResultViewItem(self, var):
        return _designer.ResultViewItemList_DeleteResultViewItem(self, var)

    def AddItemFromProbe(self, probe):
        return _designer.ResultViewItemList_AddItemFromProbe(self, probe)

    def AddItemFromContour(self, contour):
        return _designer.ResultViewItemList_AddItemFromContour(self, contour)

    def AddItemFromVector(self, vector):
        return _designer.ResultViewItemList_AddItemFromVector(self, vector)

    def AddItemFromFluxLine(self, fluxLine):
        return _designer.ResultViewItemList_AddItemFromFluxLine(self, fluxLine)

    def AddItemFromSectionGraph(self, sectionGraph):
        return _designer.ResultViewItemList_AddItemFromSectionGraph(self, sectionGraph)

    def AddItemFromEfficiencyMap(self, efficiencyMap):
        return _designer.ResultViewItemList_AddItemFromEfficiencyMap(self, efficiencyMap)

    def AddItemFromExternalEfficiencyMap(self, efficiencyMap):
        return _designer.ResultViewItemList_AddItemFromExternalEfficiencyMap(self, efficiencyMap)

    def AddItemFromDifferenceEfficiencyMap(self, efficiencyMap):
        return _designer.ResultViewItemList_AddItemFromDifferenceEfficiencyMap(self, efficiencyMap)

    def AddItemFromCalculation(self, calculation):
        return _designer.ResultViewItemList_AddItemFromCalculation(self, calculation)

    def AddItemFromDataSet(self, dataSet):
        return _designer.ResultViewItemList_AddItemFromDataSet(self, dataSet)

    def AddItemFromGraphModel(self, graph):
        return _designer.ResultViewItemList_AddItemFromGraphModel(self, graph)

    def AddItemFromPostCondition(self, condition):
        return _designer.ResultViewItemList_AddItemFromPostCondition(self, condition)

    def AddItemFromCapture(self, *args):
        return _designer.ResultViewItemList_AddItemFromCapture(self, *args)

    def AddItemFromCompositeResult(self, composite):
        return _designer.ResultViewItemList_AddItemFromCompositeResult(self, composite)

    def AddItemFromVectorExpression(self, vector):
        return _designer.ResultViewItemList_AddItemFromVectorExpression(self, vector)

    def ClearItemList(self):
        return _designer.ResultViewItemList_ClearItemList(self)

    def SetEfficiencyResultType(self, *args):
        return _designer.ResultViewItemList_SetEfficiencyResultType(self, *args)
ResultViewItemList_swigregister = _designer.ResultViewItemList_swigregister
ResultViewItemList_swigregister(ResultViewItemList)

class ExternalEfficiencyMapDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalEfficiencyMapDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalEfficiencyMapDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ExternalEfficiencyMapDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ExternalEfficiencyMapDefinition_IsValid(self)

    def Name(self):
        return _designer.ExternalEfficiencyMapDefinition_Name(self)

    def SetName(self, title):
        return _designer.ExternalEfficiencyMapDefinition_SetName(self, title)

    def GetInputType(self):
        return _designer.ExternalEfficiencyMapDefinition_GetInputType(self)

    def SetInputType(self, type):
        return _designer.ExternalEfficiencyMapDefinition_SetInputType(self, type)

    def NumResultTypes(self):
        return _designer.ExternalEfficiencyMapDefinition_NumResultTypes(self)

    def ClearResultTypes(self):
        return _designer.ExternalEfficiencyMapDefinition_ClearResultTypes(self)

    def GetResultTypeName(self, index):
        return _designer.ExternalEfficiencyMapDefinition_GetResultTypeName(self, index)

    def GetCalculationLoss(self, index):
        return _designer.ExternalEfficiencyMapDefinition_GetCalculationLoss(self, index)

    def SetResultType(self, index, resultName, loss):
        return _designer.ExternalEfficiencyMapDefinition_SetResultType(self, index, resultName, loss)

    def SetMultiColumnTable(self, array):
        return _designer.ExternalEfficiencyMapDefinition_SetMultiColumnTable(self, array)

    def SetMatrixTable(self, array):
        return _designer.ExternalEfficiencyMapDefinition_SetMatrixTable(self, array)

    def ImportFromMultiColumnTable(self, filename):
        return _designer.ExternalEfficiencyMapDefinition_ImportFromMultiColumnTable(self, filename)

    def ImportFromMatrixTable(self, filename):
        return _designer.ExternalEfficiencyMapDefinition_ImportFromMatrixTable(self, filename)
ExternalEfficiencyMapDefinition_swigregister = _designer.ExternalEfficiencyMapDefinition_swigregister
ExternalEfficiencyMapDefinition_swigregister(ExternalEfficiencyMapDefinition)

class MeshToModelParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshToModelParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshToModelParameter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_MeshToModelParameter
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.MeshToModelParameter_IsValid(self)

    def GetOutput(self, partId):
        return _designer.MeshToModelParameter_GetOutput(self, partId)

    def SetOutput(self, partId, output):
        return _designer.MeshToModelParameter_SetOutput(self, partId, output)

    def GetOutputId(self, partId):
        return _designer.MeshToModelParameter_GetOutputId(self, partId)

    def SetOutputId(self, partId, outVal):
        return _designer.MeshToModelParameter_SetOutputId(self, partId, outVal)

    def GetRenumberId(self):
        return _designer.MeshToModelParameter_GetRenumberId(self)

    def SetRenumberId(self, state):
        return _designer.MeshToModelParameter_SetRenumberId(self, state)

    def GetPartsGroupSameId(self):
        return _designer.MeshToModelParameter_GetPartsGroupSameId(self)

    def SetPartsGroupSameId(self, state):
        return _designer.MeshToModelParameter_SetPartsGroupSameId(self, state)

    def GetAirRegionSameId(self):
        return _designer.MeshToModelParameter_GetAirRegionSameId(self)

    def SetAirRegionSameId(self, state):
        return _designer.MeshToModelParameter_SetAirRegionSameId(self, state)
MeshToModelParameter_swigregister = _designer.MeshToModelParameter_swigregister
MeshToModelParameter_swigregister(MeshToModelParameter)

class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Model
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Model_IsValid(self)

    def SetName(self, name):
        return _designer.Model_SetName(self, name)

    def GetName(self):
        return _designer.Model_GetName(self)

    def SetDescription(self, description):
        return _designer.Model_SetDescription(self, description)

    def GetDescription(self):
        return _designer.Model_GetDescription(self)

    def GetFilename(self):
        return _designer.Model_GetFilename(self)

    def NumParts(self):
        return _designer.Model_NumParts(self)

    def NumStudies(self):
        return _designer.Model_NumStudies(self)

    def SetUnitsFromSystem(self):
        return _designer.Model_SetUnitsFromSystem(self)

    def HasCadLink(self):
        return _designer.Model_HasCadLink(self)

    def IsCadLinkOpen(self):
        return _designer.Model_IsCadLinkOpen(self)

    def IsUpdatedModelAvailable(self):
        return _designer.Model_IsUpdatedModelAvailable(self)

    def UpdateCadModel(self, *args):
        return _designer.Model_UpdateCadModel(self, *args)

    def UpdateCadModelFromFile(self, *args):
        return _designer.Model_UpdateCadModelFromFile(self, *args)

    def RestoreCadLink(self, *args):
        return _designer.Model_RestoreCadLink(self, *args)

    def ReplaceCadModel(self):
        return _designer.Model_ReplaceCadModel(self)

    def ReplaceCadModelFromFile(self, filepath):
        return _designer.Model_ReplaceCadModelFromFile(self, filepath)

    def RestoreCadLinkWithFilePath(self, filepath):
        return _designer.Model_RestoreCadLinkWithFilePath(self, filepath)

    def CloseCadLink(self):
        return _designer.Model_CloseCadLink(self)

    def ChangeCadLinkToGeometryEditor(self):
        return _designer.Model_ChangeCadLinkToGeometryEditor(self)

    def ExtendTo3DSolid(self, length, mergeSameSurface):
        return _designer.Model_ExtendTo3DSolid(self, length, mergeSameSurface)

    def ExtendTo3DMesh(self, length, divisions, studyIndex, copyStudies):
        return _designer.Model_ExtendTo3DMesh(self, length, divisions, studyIndex, copyStudies)

    def SetPartName(self, var, name):
        return _designer.Model_SetPartName(self, var, name)

    def GetPartName(self, partId):
        return _designer.Model_GetPartName(self, partId)

    def CreateStudy(self, type, name):
        return _designer.Model_CreateStudy(self, type, name)

    def GetStudy(self, var):
        return _designer.Model_GetStudy(self, var)

    def DuplicateStudy(self, *args):
        return _designer.Model_DuplicateStudy(self, *args)

    def DuplicateStudyName(self, *args):
        return _designer.Model_DuplicateStudyName(self, *args)

    def DuplicateStudyWithType(self, *args):
        return _designer.Model_DuplicateStudyWithType(self, *args)

    def DuplicateStudyWithCases(self, *args):
        return _designer.Model_DuplicateStudyWithCases(self, *args)

    def CleanupOldPartSettings(self):
        return _designer.Model_CleanupOldPartSettings(self)

    def CopyStudy(self, study):
        return _designer.Model_CopyStudy(self, study)

    def CreateSelection(self):
        return _designer.Model_CreateSelection(self)

    def Create2DSelection(self):
        return _designer.Model_Create2DSelection(self)

    def GetCutList(self):
        return _designer.Model_GetCutList(self)

    def GetCoordinateSystemList(self):
        return _designer.Model_GetCoordinateSystemList(self)

    def DeleteStudy(self, var):
        return _designer.Model_DeleteStudy(self, var)

    def SetVisibility(self, var, visibility):
        return _designer.Model_SetVisibility(self, var, visibility)

    def SetTransparency(self, var, trans):
        return _designer.Model_SetTransparency(self, var, trans)

    def GetTransparency(self, var):
        return _designer.Model_GetTransparency(self, var)

    def SetColor(self, var, color):
        return _designer.Model_SetColor(self, var, color)

    def GetColor(self, var):
        return _designer.Model_GetColor(self, var)

    def SuppressPart(self, part, state):
        return _designer.Model_SuppressPart(self, part, state)

    def IsPartSuppressed(self, part):
        return _designer.Model_IsPartSuppressed(self, part)

    def SortPartsByName(self):
        return _designer.Model_SortPartsByName(self)

    def SortPartsById(self):
        return _designer.Model_SortPartsById(self)

    def ExportAnalysisTemplate(self, filepath):
        return _designer.Model_ExportAnalysisTemplate(self, filepath)

    def ExportSelectedAnalysisTemplate(self, *args):
        return _designer.Model_ExportSelectedAnalysisTemplate(self, *args)

    def ImportAnalysisTemplate(self, filepath, partnames):
        return _designer.Model_ImportAnalysisTemplate(self, filepath, partnames)

    def ImportAnalysisTemplateAuto(self, filepath, partnames, setnames):
        return _designer.Model_ImportAnalysisTemplateAuto(self, filepath, partnames, setnames)

    def ImportAnalysisTemplateMultiParts(self, *args):
        return _designer.Model_ImportAnalysisTemplateMultiParts(self, *args)

    def CheckForNewResults(self):
        return _designer.Model_CheckForNewResults(self)

    def CheckFolderResults(self, source):
        return _designer.Model_CheckFolderResults(self, source)

    def CreateAnalysisTemplate(self, *args):
        return _designer.Model_CreateAnalysisTemplate(self, *args)

    def ApplyAnalysisTemplate(self, *args):
        return _designer.Model_ApplyAnalysisTemplate(self, *args)

    def SetUnitCollection(self, var):
        return _designer.Model_SetUnitCollection(self, var)

    def SetGroupVisibility(self, var, visibility):
        return _designer.Model_SetGroupVisibility(self, var, visibility)

    def RunAllStudies(self):
        return _designer.Model_RunAllStudies(self)

    def GetDimension(self):
        return _designer.Model_GetDimension(self)

    def GetPart(self, var):
        return _designer.Model_GetPart(self, var)

    def GetPartByIndex(self, index):
        return _designer.Model_GetPartByIndex(self, index)

    def GetPartByPosition(self, p):
        return _designer.Model_GetPartByPosition(self, p)

    def CreateAnalysisTemplateControl(self, filepath):
        return _designer.Model_CreateAnalysisTemplateControl(self, filepath)

    def GetPartIDs(self):
        return _designer.Model_GetPartIDs(self)

    def GetGroupList(self):
        return _designer.Model_GetGroupList(self)

    def GetSetList(self):
        return _designer.Model_GetSetList(self)

    def GetReferenceTargetList(self):
        return _designer.Model_GetReferenceTargetList(self)

    def GetStudyTypeNames(self):
        return _designer.Model_GetStudyTypeNames(self)

    def ClearMeshGroupSettingAllStudies(self):
        return _designer.Model_ClearMeshGroupSettingAllStudies(self)

    def GetEdgeStartPosition(self, edgeId):
        return _designer.Model_GetEdgeStartPosition(self, edgeId)

    def GetEdgeEndPosition(self, edgeId):
        return _designer.Model_GetEdgeEndPosition(self, edgeId)

    def GetEdgeMidPosition(self, edgeId):
        return _designer.Model_GetEdgeMidPosition(self, edgeId)

    def GetFaceCentroidPosition(self, faceId):
        return _designer.Model_GetFaceCentroidPosition(self, faceId)

    def GetFaceNormalVector(self, faceId):
        return _designer.Model_GetFaceNormalVector(self, faceId)

    def GetVertexPosition(self, vertexId):
        return _designer.Model_GetVertexPosition(self, vertexId)

    def GetFaceArea(self, faceId):
        return _designer.Model_GetFaceArea(self, faceId)

    def MeasureDistance(self, fromType, fromID, toType, toID):
        return _designer.Model_MeasureDistance(self, fromType, fromID, toType, toID)

    def MeasureDistanceFrom(self, x, y, z, toType, toID):
        return _designer.Model_MeasureDistanceFrom(self, x, y, z, toType, toID)

    def MeasureDistanceFromPoint(self, p, toType, toID):
        return _designer.Model_MeasureDistanceFromPoint(self, p, toType, toID)

    def MeasureVertexAngle(self, fromID, centerID, toID):
        return _designer.Model_MeasureVertexAngle(self, fromID, centerID, toID)

    def MeasurePointVertexAngle(self, x, y, z, fromID, toID):
        return _designer.Model_MeasurePointVertexAngle(self, x, y, z, fromID, toID)

    def GetModelCentering(self):
        return _designer.Model_GetModelCentering(self)

    def SetModelCentering(self, centering):
        return _designer.Model_SetModelCentering(self, centering)

    def SetStudyOrder(self, val, position):
        return _designer.Model_SetStudyOrder(self, val, position)

    def DeleteMeshCache(self):
        return _designer.Model_DeleteMeshCache(self)

    def GetResultViewItemList(self):
        return _designer.Model_GetResultViewItemList(self)

    def GetAllCasesResultViewItemList(self):
        return _designer.Model_GetAllCasesResultViewItemList(self)

    def AddEquation(self, parameterName):
        return _designer.Model_AddEquation(self, parameterName)

    def RemoveEquation(self, indexOrName):
        return _designer.Model_RemoveEquation(self, indexOrName)

    def GetEquation(self, indexOrName):
        return _designer.Model_GetEquation(self, indexOrName)

    def GetCurrentUnit(self, unitGroupName):
        return _designer.Model_GetCurrentUnit(self, unitGroupName)

    def GetCurrentUnitCaption(self, unitGroupName):
        return _designer.Model_GetCurrentUnitCaption(self, unitGroupName)

    def ConvertValueToSI(self, unitName, value):
        return _designer.Model_ConvertValueToSI(self, unitName, value)

    def ConvertValueFromSI(self, unitName, value):
        return _designer.Model_ConvertValueFromSI(self, unitName, value)

    def ExportAnalysisParameters(self, filename, openCadLink):
        return _designer.Model_ExportAnalysisParameters(self, filename, openCadLink)

    def GetParameterSettingStatus(self):
        return _designer.Model_GetParameterSettingStatus(self)
Model_swigregister = _designer.Model_swigregister
Model_swigregister(Model)

class FilterDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_FilterDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.FilterDefinition_IsValid(self)

    def SetName(self, title):
        return _designer.FilterDefinition_SetName(self, title)

    def GetName(self):
        return _designer.FilterDefinition_GetName(self)

    def SetFilterType(self, filterType):
        return _designer.FilterDefinition_SetFilterType(self, filterType)

    def GetFilterType(self):
        return _designer.FilterDefinition_GetFilterType(self)

    def SetCaseRange(self, caseNo):
        return _designer.FilterDefinition_SetCaseRange(self, caseNo)

    def GetCaseRange(self):
        return _designer.FilterDefinition_GetCaseRange(self)

    def SetCaseGroup(self, caseGroup):
        return _designer.FilterDefinition_SetCaseGroup(self, caseGroup)

    def GetCaseGroup(self):
        return _designer.FilterDefinition_GetCaseGroup(self)

    def SetConditions(self, conditions):
        return _designer.FilterDefinition_SetConditions(self, conditions)

    def GetConditions(self):
        return _designer.FilterDefinition_GetConditions(self)
FilterDefinition_swigregister = _designer.FilterDefinition_swigregister
FilterDefinition_swigregister(FilterDefinition)

class ParameterSettingStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterSettingStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterSettingStatus, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ParameterSettingStatus
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ParameterSettingStatus_IsValid(self)

    def SetCaseParameter(self, check):
        return _designer.ParameterSettingStatus_SetCaseParameter(self, check)

    def SetEquation(self, check):
        return _designer.ParameterSettingStatus_SetEquation(self, check)

    def SetMeasurement(self, check):
        return _designer.ParameterSettingStatus_SetMeasurement(self, check)

    def SetGeometry(self, check):
        return _designer.ParameterSettingStatus_SetGeometry(self, check)

    def SetMaterial(self, check):
        return _designer.ParameterSettingStatus_SetMaterial(self, check)

    def SetStudyProperty(self, check):
        return _designer.ParameterSettingStatus_SetStudyProperty(self, check)

    def SetCondition(self, check):
        return _designer.ParameterSettingStatus_SetCondition(self, check)

    def SetCircuit(self, check):
        return _designer.ParameterSettingStatus_SetCircuit(self, check)

    def SetMeshProperty(self, check):
        return _designer.ParameterSettingStatus_SetMeshProperty(self, check)

    def SetOnlyResponse(self, check):
        return _designer.ParameterSettingStatus_SetOnlyResponse(self, check)

    def GetCaseParameter(self):
        return _designer.ParameterSettingStatus_GetCaseParameter(self)

    def GetEquation(self):
        return _designer.ParameterSettingStatus_GetEquation(self)

    def GetMeasurement(self):
        return _designer.ParameterSettingStatus_GetMeasurement(self)

    def GetGeometry(self):
        return _designer.ParameterSettingStatus_GetGeometry(self)

    def GetMaterial(self):
        return _designer.ParameterSettingStatus_GetMaterial(self)

    def GetStudyProperty(self):
        return _designer.ParameterSettingStatus_GetStudyProperty(self)

    def GetCondition(self):
        return _designer.ParameterSettingStatus_GetCondition(self)

    def GetCircuit(self):
        return _designer.ParameterSettingStatus_GetCircuit(self)

    def GetMeshProperty(self):
        return _designer.ParameterSettingStatus_GetMeshProperty(self)

    def GetOnlyResponse(self):
        return _designer.ParameterSettingStatus_GetOnlyResponse(self)

    def ClearUpperFrame(self):
        return _designer.ParameterSettingStatus_ClearUpperFrame(self)

    def AddUpperFrame(self, frame):
        return _designer.ParameterSettingStatus_AddUpperFrame(self, frame)

    def GetUpperFrame(self):
        return _designer.ParameterSettingStatus_GetUpperFrame(self)

    def ClearLowerFrame(self):
        return _designer.ParameterSettingStatus_ClearLowerFrame(self)

    def AddLowerFrame(self, frame):
        return _designer.ParameterSettingStatus_AddLowerFrame(self, frame)

    def GetLowerFrame(self):
        return _designer.ParameterSettingStatus_GetLowerFrame(self)
ParameterSettingStatus_swigregister = _designer.ParameterSettingStatus_swigregister
ParameterSettingStatus_swigregister(ParameterSettingStatus)

class RttFileParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RttFileParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RttFileParameter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_RttFileParameter
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.RttFileParameter_IsValid(self)

    def SetOutputFilepath(self, outputFilepath):
        return _designer.RttFileParameter_SetOutputFilepath(self, outputFilepath)

    def GetOutputFilepath(self):
        return _designer.RttFileParameter_GetOutputFilepath(self)

    def SetResponseTableName(self, responseTableName):
        return _designer.RttFileParameter_SetResponseTableName(self, responseTableName)

    def GetResponseTableName(self):
        return _designer.RttFileParameter_GetResponseTableName(self)

    def SetTitle(self, title):
        return _designer.RttFileParameter_SetTitle(self, title)

    def GetTitle(self):
        return _designer.RttFileParameter_GetTitle(self)

    def SetAuthor(self, author):
        return _designer.RttFileParameter_SetAuthor(self, author)

    def GetAuthor(self):
        return _designer.RttFileParameter_GetAuthor(self)

    def SetComments(self, comment):
        return _designer.RttFileParameter_SetComments(self, comment)

    def GetComments(self):
        return _designer.RttFileParameter_GetComments(self)

    def SetWeight(self, weight):
        return _designer.RttFileParameter_SetWeight(self, weight)

    def GetWeight(self):
        return _designer.RttFileParameter_GetWeight(self)

    def SetAxisLength(self, axisLength):
        return _designer.RttFileParameter_SetAxisLength(self, axisLength)

    def GetAxisLength(self):
        return _designer.RttFileParameter_GetAxisLength(self)

    def SetOuterDiameter(self, outerDiameter):
        return _designer.RttFileParameter_SetOuterDiameter(self, outerDiameter)

    def GetOuterDiameter(self):
        return _designer.RttFileParameter_GetOuterDiameter(self)

    def SetInertia(self, inertia):
        return _designer.RttFileParameter_SetInertia(self, inertia)

    def GetInertia(self):
        return _designer.RttFileParameter_GetInertia(self)

    def SetRotationSpeed(self, rotSpeed):
        return _designer.RttFileParameter_SetRotationSpeed(self, rotSpeed)

    def GetRotationSpeed(self):
        return _designer.RttFileParameter_GetRotationSpeed(self)

    def SetRatedOutput(self, ratedOutput):
        return _designer.RttFileParameter_SetRatedOutput(self, ratedOutput)

    def GetRatedOutput(self):
        return _designer.RttFileParameter_GetRatedOutput(self)

    def SetRatedCurrent(self, ratedCurrent):
        return _designer.RttFileParameter_SetRatedCurrent(self, ratedCurrent)

    def GetRatedCurrent(self):
        return _designer.RttFileParameter_GetRatedCurrent(self)

    def SetRatedVoltage(self, ratedVoltage):
        return _designer.RttFileParameter_SetRatedVoltage(self, ratedVoltage)

    def GetRatedVoltage(self):
        return _designer.RttFileParameter_GetRatedVoltage(self)

    def SetSimulatorType(self, simulatorType):
        return _designer.RttFileParameter_SetSimulatorType(self, simulatorType)

    def GetSimulatorType(self):
        return _designer.RttFileParameter_GetSimulatorType(self)

    def SetUseComment(self, useComment):
        return _designer.RttFileParameter_SetUseComment(self, useComment)

    def GetUseComment(self):
        return _designer.RttFileParameter_GetUseComment(self)

    def SetUseCopySimulator(self, useSimulator):
        return _designer.RttFileParameter_SetUseCopySimulator(self, useSimulator)

    def GetUseCopySimulator(self):
        return _designer.RttFileParameter_GetUseCopySimulator(self)

    def SetCanDisplayMotorInfo(self, canDisplay):
        return _designer.RttFileParameter_SetCanDisplayMotorInfo(self, canDisplay)

    def GetCanDisplayMotorInfo(self):
        return _designer.RttFileParameter_GetCanDisplayMotorInfo(self)

    def SetHasAdditionalMotorInfo(self, hasAdditionalInfo):
        return _designer.RttFileParameter_SetHasAdditionalMotorInfo(self, hasAdditionalInfo)

    def GetHasAdditionalMotorInfo(self):
        return _designer.RttFileParameter_GetHasAdditionalMotorInfo(self)

    def SetIsResolutionPublic(self, isResolution):
        return _designer.RttFileParameter_SetIsResolutionPublic(self, isResolution)

    def GetIsResolutionPublic(self):
        return _designer.RttFileParameter_GetIsResolutionPublic(self)

    def SetInCreator(self, creator):
        return _designer.RttFileParameter_SetInCreator(self, creator)
RttFileParameter_swigregister = _designer.RttFileParameter_swigregister
RttFileParameter_swigregister(RttFileParameter)

class Study(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Study, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Study, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Study
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Study_IsValid(self)

    def HasMesh(self):
        return _designer.Study_HasMesh(self)

    def CaseHasMesh(self, caseIndex):
        return _designer.Study_CaseHasMesh(self, caseIndex)

    def HasMeshAnyPart(self):
        return _designer.Study_HasMeshAnyPart(self)

    def CaseHasMeshAnyPart(self, caseIndex):
        return _designer.Study_CaseHasMeshAnyPart(self, caseIndex)

    def HasResult(self):
        return _designer.Study_HasResult(self)

    def CaseHasResult(self, caseIndex):
        return _designer.Study_CaseHasResult(self, caseIndex)

    def AnyCaseHasResult(self):
        return _designer.Study_AnyCaseHasResult(self)

    def GetName(self):
        return _designer.Study_GetName(self)

    def SetName(self, name):
        return _designer.Study_SetName(self, name)

    def SetDescription(self, description):
        return _designer.Study_SetDescription(self, description)

    def GetDescription(self):
        return _designer.Study_GetDescription(self)

    def GetResultFileName(self):
        return _designer.Study_GetResultFileName(self)

    def GetType(self):
        return _designer.Study_GetType(self)

    def GetScriptTypeName(self):
        return _designer.Study_GetScriptTypeName(self)

    def IsAxisymmetricStudy(self):
        return _designer.Study_IsAxisymmetricStudy(self)

    def IsCutPlaneStudy(self):
        return _designer.Study_IsCutPlaneStudy(self)

    def GetDesignTable(self):
        return _designer.Study_GetDesignTable(self)

    def GetCurrentCase(self):
        return _designer.Study_GetCurrentCase(self)

    def SetCurrentCase(self, caseIndex):
        return _designer.Study_SetCurrentCase(self, caseIndex)

    def GetOptimizationTable(self):
        return _designer.Study_GetOptimizationTable(self)

    def GetStep(self):
        return _designer.Study_GetStep(self)

    def CreateMesh(self):
        return _designer.Study_CreateMesh(self)

    def RevertMesh(self):
        return _designer.Study_RevertMesh(self)

    def DeleteMesh(self):
        return _designer.Study_DeleteMesh(self)

    def DeleteMeshAllCases(self):
        return _designer.Study_DeleteMeshAllCases(self)

    def DeleteAirMesh(self):
        return _designer.Study_DeleteAirMesh(self)

    def CreateMorphing(self):
        return _designer.Study_CreateMorphing(self)

    def CreateKeepMeshSkinDepth(self):
        return _designer.Study_CreateKeepMeshSkinDepth(self)

    def UpdateSkew(self):
        return _designer.Study_UpdateSkew(self)

    def Run(self):
        return _designer.Study_Run(self)

    def RunAllCases(self):
        return _designer.Study_RunAllCases(self)

    def Restart(self, steps, outputStep):
        return _designer.Study_Restart(self, steps, outputStep)

    def RestartAdaptive(self, stages):
        return _designer.Study_RestartAdaptive(self, stages)

    def SubmitLocal(self, queued):
        return _designer.Study_SubmitLocal(self, queued)

    def SubmitRemote(self, machine, cpu, keepremote, queued):
        return _designer.Study_SubmitRemote(self, machine, cpu, keepremote, queued)

    def SubmitAllLocal(self, queued):
        return _designer.Study_SubmitAllLocal(self, queued)

    def SubmitAllRemote(self, machine, cpu, keepremote, queued):
        return _designer.Study_SubmitAllRemote(self, machine, cpu, keepremote, queued)

    def CreateJob(self):
        return _designer.Study_CreateJob(self)

    def RunOptimization(self):
        return _designer.Study_RunOptimization(self)

    def RunTopologyOptimization(self):
        return _designer.Study_RunTopologyOptimization(self)

    def LoadTopologyResults(self, *args):
        return _designer.Study_LoadTopologyResults(self, *args)

    def CalculationFolder(self, *args):
        return _designer.Study_CalculationFolder(self, *args)

    def GetConditionTypes(self):
        return _designer.Study_GetConditionTypes(self)

    def NumConditions(self):
        return _designer.Study_NumConditions(self)

    def CreateCondition(self, typeName, name):
        return _designer.Study_CreateCondition(self, typeName, name)

    def GetCondition(self, val):
        return _designer.Study_GetCondition(self, val)

    def DeleteCondition(self, val):
        return _designer.Study_DeleteCondition(self, val)

    def NumPostConditions(self):
        return _designer.Study_NumPostConditions(self)

    def CreatePostCondition(self, typeName, name):
        return _designer.Study_CreatePostCondition(self, typeName, name)

    def GetPostCondition(self, val):
        return _designer.Study_GetPostCondition(self, val)

    def DeletePostCondition(self, val):
        return _designer.Study_DeletePostCondition(self, val)

    def GetMaterial(self, val):
        return _designer.Study_GetMaterial(self, val)

    def SetMaterial(self, val, material):
        return _designer.Study_SetMaterial(self, val, material)

    def SetMaterialByName(self, val, matname):
        return _designer.Study_SetMaterialByName(self, val, matname)

    def AddMaterialByName(self, matname):
        return _designer.Study_AddMaterialByName(self, matname)

    def RemoveMaterialByName(self, matname):
        return _designer.Study_RemoveMaterialByName(self, matname)

    def MagnetizedMaterialName(self):
        return _designer.Study_MagnetizedMaterialName(self)

    def SuppressPart(self, part, state):
        return _designer.Study_SuppressPart(self, part, state)

    def IsPartSuppressed(self, part):
        return _designer.Study_IsPartSuppressed(self, part)

    def CreateMeshPart(self, name):
        return _designer.Study_CreateMeshPart(self, name)

    def DeleteMeshPart(self, var):
        return _designer.Study_DeleteMeshPart(self, var)

    def GetMeshPart(self, var):
        return _designer.Study_GetMeshPart(self, var)

    def GetMeshPartByIndex(self, index):
        return _designer.Study_GetMeshPartByIndex(self, index)

    def GetMeshControl(self):
        return _designer.Study_GetMeshControl(self)

    def GetStudyProperties(self):
        return _designer.Study_GetStudyProperties(self)

    def CreateCircuit(self):
        return _designer.Study_CreateCircuit(self)

    def LoadCircuit(self, filename):
        return _designer.Study_LoadCircuit(self, filename)

    def DeleteCircuit(self):
        return _designer.Study_DeleteCircuit(self)

    def GetCircuit(self):
        return _designer.Study_GetCircuit(self)

    def HasCircuit(self):
        return _designer.Study_HasCircuit(self)

    def NumWindingRegions(self):
        return _designer.Study_NumWindingRegions(self)

    def CreateWindingRegion(self, *args):
        return _designer.Study_CreateWindingRegion(self, *args)

    def CopyWindingRegion(self, copy):
        return _designer.Study_CopyWindingRegion(self, copy)

    def GetWindingRegion(self, val):
        return _designer.Study_GetWindingRegion(self, val)

    def DeleteWindingRegion(self, val):
        return _designer.Study_DeleteWindingRegion(self, val)

    def NumWindings(self):
        return _designer.Study_NumWindings(self)

    def CreateWinding(self, type, name):
        return _designer.Study_CreateWinding(self, type, name)

    def CopyWinding(self, copy):
        return _designer.Study_CopyWinding(self, copy)

    def GetWinding(self, val):
        return _designer.Study_GetWinding(self, val)

    def DeleteWinding(self, val):
        return _designer.Study_DeleteWinding(self, val)

    def DeleteUseWinding(self):
        return _designer.Study_DeleteUseWinding(self)

    def HasUseWinding(self):
        return _designer.Study_HasUseWinding(self)

    def CreateVector(self, name):
        return _designer.Study_CreateVector(self, name)

    def CreateContour(self, name):
        return _designer.Study_CreateContour(self, name)

    def CreateFluxLine(self, name):
        return _designer.Study_CreateFluxLine(self, name)

    def CreateScaling(self, name):
        return _designer.Study_CreateScaling(self, name)

    def CreateCompositeResult(self, name):
        return _designer.Study_CreateCompositeResult(self, name)

    def CopyVector(self, vector):
        return _designer.Study_CopyVector(self, vector)

    def CopyContour(self, contour):
        return _designer.Study_CopyContour(self, contour)

    def CopyFluxLine(self, contour):
        return _designer.Study_CopyFluxLine(self, contour)

    def CopyScaling(self, scaling):
        return _designer.Study_CopyScaling(self, scaling)

    def GetModelCopyControl(self):
        return _designer.Study_GetModelCopyControl(self)

    def NumContours(self):
        return _designer.Study_NumContours(self)

    def NumVectors(self):
        return _designer.Study_NumVectors(self)

    def NumFluxLines(self):
        return _designer.Study_NumFluxLines(self)

    def NumScalings(self):
        return _designer.Study_NumScalings(self)

    def GetVector(self, val):
        return _designer.Study_GetVector(self, val)

    def DeleteVector(self, val):
        return _designer.Study_DeleteVector(self, val)

    def GetContour(self, val):
        return _designer.Study_GetContour(self, val)

    def DeleteContour(self, val):
        return _designer.Study_DeleteContour(self, val)

    def GetFluxLine(self, val):
        return _designer.Study_GetFluxLine(self, val)

    def DeleteFluxLine(self, val):
        return _designer.Study_DeleteFluxLine(self, val)

    def GetScaling(self, val):
        return _designer.Study_GetScaling(self, val)

    def DeleteScaling(self, val):
        return _designer.Study_DeleteScaling(self, val)

    def GetCompositeResult(self, val):
        return _designer.Study_GetCompositeResult(self, val)

    def DeleteCompositeResult(self, val):
        return _designer.Study_DeleteCompositeResult(self, val)

    def NumProbes(self):
        return _designer.Study_NumProbes(self)

    def CreateProbe(self, name):
        return _designer.Study_CreateProbe(self, name)

    def CopyProbe(self, copy):
        return _designer.Study_CopyProbe(self, copy)

    def GetProbe(self, val):
        return _designer.Study_GetProbe(self, val)

    def DeleteProbe(self, val):
        return _designer.Study_DeleteProbe(self, val)

    def NumCalculationDefinitions(self):
        return _designer.Study_NumCalculationDefinitions(self)

    def CreateCalculationDefinition(self, name):
        return _designer.Study_CreateCalculationDefinition(self, name)

    def CreateSurfaceCalculationDefinition(self, name):
        return _designer.Study_CreateSurfaceCalculationDefinition(self, name)

    def CreateEdgeCalculationDefinition(self, name):
        return _designer.Study_CreateEdgeCalculationDefinition(self, name)

    def CopyCalculationDefinition(self, copy):
        return _designer.Study_CopyCalculationDefinition(self, copy)

    def GetCalculationDefinition(self, val):
        return _designer.Study_GetCalculationDefinition(self, val)

    def DeleteCalculationDefinition(self, val):
        return _designer.Study_DeleteCalculationDefinition(self, val)

    def NumCalculationTargets(self):
        return _designer.Study_NumCalculationTargets(self)

    def CreateSurfaceCalculationTarget(self, name):
        return _designer.Study_CreateSurfaceCalculationTarget(self, name)

    def CreateEdgeCalculationTarget(self, name):
        return _designer.Study_CreateEdgeCalculationTarget(self, name)

    def CopyCalculationTarget(self, copy):
        return _designer.Study_CopyCalculationTarget(self, copy)

    def GetCalculationTarget(self, val):
        return _designer.Study_GetCalculationTarget(self, val)

    def DeleteCalculationTarget(self, val):
        return _designer.Study_DeleteCalculationTarget(self, val)

    def NumCalculations(self):
        return _designer.Study_NumCalculations(self)

    def CreateCalculation(self, typeName, name):
        return _designer.Study_CreateCalculation(self, typeName, name)

    def CopyCalculation(self, copy):
        return _designer.Study_CopyCalculation(self, copy)

    def GetCalculation(self, val):
        return _designer.Study_GetCalculation(self, val)

    def DeleteCalculation(self, val):
        return _designer.Study_DeleteCalculation(self, val)

    def NumSectionGraphs(self):
        return _designer.Study_NumSectionGraphs(self)

    def CreateSectionGraph(self, name):
        return _designer.Study_CreateSectionGraph(self, name)

    def GetSectionGraph(self, val):
        return _designer.Study_GetSectionGraph(self, val)

    def DeleteSectionGraph(self, val):
        return _designer.Study_DeleteSectionGraph(self, val)

    def DuplicateSectionGraph(self, val):
        return _designer.Study_DuplicateSectionGraph(self, val)

    def GetReport(self):
        return _designer.Study_GetReport(self)

    def GetResultTable(self):
        return _designer.Study_GetResultTable(self)

    def CreateLossStudy(self, name):
        return _designer.Study_CreateLossStudy(self, name)

    def CreateCutPlaneStudy(self, study_name, condition_name):
        return _designer.Study_CreateCutPlaneStudy(self, study_name, condition_name)

    def CreateAxisymmetricCutPlaneStudy(self, study_name, condition_name):
        return _designer.Study_CreateAxisymmetricCutPlaneStudy(self, study_name, condition_name)

    def Create2DStudy(self, name):
        return _designer.Study_Create2DStudy(self, name)

    def WriteSolidJcf(self, filename):
        return _designer.Study_WriteSolidJcf(self, filename)

    def WriteSolidPartialMeshJcf(self, filename):
        return _designer.Study_WriteSolidPartialMeshJcf(self, filename)

    def WriteMeshJcf(self, filename):
        return _designer.Study_WriteMeshJcf(self, filename)

    def WriteAllSolidJcf(self, path, filename, active):
        return _designer.Study_WriteAllSolidJcf(self, path, filename, active)

    def WriteAllSolidPartialMeshJcf(self, path, filename, active):
        return _designer.Study_WriteAllSolidPartialMeshJcf(self, path, filename, active)

    def WriteAllMeshJcf(self, path, filename, active):
        return _designer.Study_WriteAllMeshJcf(self, path, filename, active)

    def MergeJcf(self, filename):
        return _designer.Study_MergeJcf(self, filename)

    def MergeJcfForPreview(self, filename):
        return _designer.Study_MergeJcfForPreview(self, filename)

    def WriteCaseReport(self, filename):
        return _designer.Study_WriteCaseReport(self, filename)

    def WriteResponseReport(self, filename):
        return _designer.Study_WriteResponseReport(self, filename)

    def WriteModelOutlineJsonFile(self, filename):
        return _designer.Study_WriteModelOutlineJsonFile(self, filename)

    def WriteCoilPositionJsonFile(self, filename):
        return _designer.Study_WriteCoilPositionJsonFile(self, filename)

    def AddCadParameter(self, name):
        return _designer.Study_AddCadParameter(self, name)

    def DeleteCadParameter(self, name):
        return _designer.Study_DeleteCadParameter(self, name)

    def SetCadParameterValue(self, name, value):
        return _designer.Study_SetCadParameterValue(self, name, value)

    def ApplyCadParameters(self):
        return _designer.Study_ApplyCadParameters(self)

    def ApplyAllCasesCadParameters(self):
        return _designer.Study_ApplyAllCasesCadParameters(self)

    def RebuildAllCasesCadParameters(self):
        return _designer.Study_RebuildAllCasesCadParameters(self)

    def ForceRebuildCadParameters(self):
        return _designer.Study_ForceRebuildCadParameters(self)

    def ClearAllCasesMeasurementCache(self):
        return _designer.Study_ClearAllCasesMeasurementCache(self)

    def ParametricDataNames(self):
        return _designer.Study_ParametricDataNames(self)

    def AddCadParameters(self, names):
        return _designer.Study_AddCadParameters(self, names)

    def CreateParametricGraphDefinition(self):
        return _designer.Study_CreateParametricGraphDefinition(self)

    def CreateParametricGraph(self, *args):
        return _designer.Study_CreateParametricGraph(self, *args)

    def CreateParametricGraphWithName(self, *args):
        return _designer.Study_CreateParametricGraphWithName(self, *args)

    def NumAirRegions(self):
        return _designer.Study_NumAirRegions(self)

    def SetAirRegionVisibility(self, index, visible):
        return _designer.Study_SetAirRegionVisibility(self, index, visible)

    def CheckForNewResults(self):
        return _designer.Study_CheckForNewResults(self)

    def CheckForCaseResults(self):
        return _designer.Study_CheckForCaseResults(self)

    def CheckFolderResults(self, folder):
        return _designer.Study_CheckFolderResults(self, folder)

    def CheckForNewCases(self):
        return _designer.Study_CheckForNewCases(self)

    def LoadRemoteResults(self, cases):
        return _designer.Study_LoadRemoteResults(self, cases)

    def GetUuid(self):
        return _designer.Study_GetUuid(self)

    def GetId(self):
        return _designer.Study_GetId(self)

    def GetStudyId(self):
        return _designer.Study_GetStudyId(self)

    def NumPostParameters(self):
        return _designer.Study_NumPostParameters(self)

    def PostParameterName(self, index):
        return _designer.Study_PostParameterName(self, index)

    def PostParameterType(self, name):
        return _designer.Study_PostParameterType(self, name)

    def GetPostValue(self, name):
        return _designer.Study_GetPostValue(self, name)

    def GetVectorPostValue(self, name):
        return _designer.Study_GetVectorPostValue(self, name)

    def NumPostCalculationScripts(self):
        return _designer.Study_NumPostCalculationScripts(self)

    def GetPostCalculationScript(self, nameOrIndex):
        return _designer.Study_GetPostCalculationScript(self, nameOrIndex)

    def AddPostCalculationScript(self, title):
        return _designer.Study_AddPostCalculationScript(self, title)

    def AddPostCalculationScriptFromFile(self, filename):
        return _designer.Study_AddPostCalculationScriptFromFile(self, filename)

    def DeletePostCalculationScript(self, nameOrIndex):
        return _designer.Study_DeletePostCalculationScript(self, nameOrIndex)

    def SetPostCalculationScriptParameter(self, nameOrIndex, key, value):
        return _designer.Study_SetPostCalculationScriptParameter(self, nameOrIndex, key, value)

    def GetPostCalculationScriptParameter(self, nameOrIndex, key):
        return _designer.Study_GetPostCalculationScriptParameter(self, nameOrIndex, key)

    def CurrentIndexPostCalculationScripts(self):
        return _designer.Study_CurrentIndexPostCalculationScripts(self)

    def RunAllPostCalculationScripts(self):
        return _designer.Study_RunAllPostCalculationScripts(self)

    def DeleteResult(self):
        return _designer.Study_DeleteResult(self)

    def DeleteResultCurrentCase(self):
        return _designer.Study_DeleteResultCurrentCase(self)

    def DeleteResultFromStudy(self):
        return _designer.Study_DeleteResultFromStudy(self)

    def DeleteResultCurrentCaseFromStudy(self):
        return _designer.Study_DeleteResultCurrentCaseFromStudy(self)

    def GetDataSet(self, name, caseno):
        return _designer.Study_GetDataSet(self, name, caseno)

    def NumMaterials(self):
        return _designer.Study_NumMaterials(self)

    def GetMaterialByIndex(self, index):
        return _designer.Study_GetMaterialByIndex(self, index)

    def AddWarningAsError(self, code):
        return _designer.Study_AddWarningAsError(self, code)

    def RemoveWarningAsError(self, code):
        return _designer.Study_RemoveWarningAsError(self, code)

    def SetCurrentContour(self, val):
        return _designer.Study_SetCurrentContour(self, val)

    def SetCurrentVector(self, val):
        return _designer.Study_SetCurrentVector(self, val)

    def SetCurrentFluxLine(self, val):
        return _designer.Study_SetCurrentFluxLine(self, val)

    def SetCurrentScaling(self, val):
        return _designer.Study_SetCurrentScaling(self, val)

    def SetCurrentComposite(self, val):
        return _designer.Study_SetCurrentComposite(self, val)

    def GetMeshGroupList(self):
        return _designer.Study_GetMeshGroupList(self)

    def GetResultViewItemList(self):
        return _designer.Study_GetResultViewItemList(self)

    def GetAllCasesResultViewItemList(self):
        return _designer.Study_GetAllCasesResultViewItemList(self)

    def GetNodeIdsOnEdge(self, edgeId):
        return _designer.Study_GetNodeIdsOnEdge(self, edgeId)

    def GetNodeIdsOnFace(self, faceId):
        return _designer.Study_GetNodeIdsOnFace(self, faceId)

    def CreateTableDefinition(self):
        return _designer.Study_CreateTableDefinition(self)

    def ExportTable(self, arg2, filename, filetype):
        return _designer.Study_ExportTable(self, arg2, filename, filetype)

    def ExportResultValuesTable(self, arg2, filename):
        return _designer.Study_ExportResultValuesTable(self, arg2, filename)

    def ExportMinMaxTable(self, arg2, filename):
        return _designer.Study_ExportMinMaxTable(self, arg2, filename)

    def ExportPositionTable(self, arg2, filename):
        return _designer.Study_ExportPositionTable(self, arg2, filename)

    def ExportCaseValueData(self, filename):
        return _designer.Study_ExportCaseValueData(self, filename)

    def ClearProbeIdSettings(self):
        return _designer.Study_ClearProbeIdSettings(self)

    def HasIntersection(self):
        return _designer.Study_HasIntersection(self)

    def GetResultFileNames(self):
        return _designer.Study_GetResultFileNames(self)

    def RemoveSelectedResults(self, results):
        return _designer.Study_RemoveSelectedResults(self, results)

    def RemoveSelectedResultsAllCases(self, results):
        return _designer.Study_RemoveSelectedResultsAllCases(self, results)

    def RemoveSelectedResultsSteps(self, results, start, end, inter):
        return _designer.Study_RemoveSelectedResultsSteps(self, results, start, end, inter)

    def RemoveSelectedResultsStepsAllCases(self, results, start, end, inter):
        return _designer.Study_RemoveSelectedResultsStepsAllCases(self, results, start, end, inter)

    def RemoveSelectedResultsStepList(self, results, steps):
        return _designer.Study_RemoveSelectedResultsStepList(self, results, steps)

    def RemoveSelectedResultsStepListAllCases(self, results, steps):
        return _designer.Study_RemoveSelectedResultsStepListAllCases(self, results, steps)

    def RemoveAllResults(self):
        return _designer.Study_RemoveAllResults(self)

    def RemoveAllResultsAllCases(self):
        return _designer.Study_RemoveAllResultsAllCases(self)

    def UnLockAll(self):
        return _designer.Study_UnLockAll(self)

    def SetMessageVisible(self, on):
        return _designer.Study_SetMessageVisible(self, on)

    def SetVariable(self, name, value):
        return _designer.Study_SetVariable(self, name, value)

    def GetVariable(self, name):
        return _designer.Study_GetVariable(self, name)

    def RemoveVariable(self, name):
        return _designer.Study_RemoveVariable(self, name)

    def SetUserResponseVariable(self, name, caseIndex, value):
        return _designer.Study_SetUserResponseVariable(self, name, caseIndex, value)

    def GetResponseVariable(self, name, caseIndex):
        return _designer.Study_GetResponseVariable(self, name, caseIndex)

    def GetResponseData(self, name, caseIndex):
        return _designer.Study_GetResponseData(self, name, caseIndex)

    def SetCopyOnUpdate(self, flag):
        return _designer.Study_SetCopyOnUpdate(self, flag)

    def GetCopyOnUpdate(self):
        return _designer.Study_GetCopyOnUpdate(self)

    def MeasureDistance(self, fromType, fromID, toType, toID):
        return _designer.Study_MeasureDistance(self, fromType, fromID, toType, toID)

    def MeasureDistanceFrom(self, x, y, z, toType, toID):
        return _designer.Study_MeasureDistanceFrom(self, x, y, z, toType, toID)

    def MeasureDistanceFromPoint(self, p, toType, toID):
        return _designer.Study_MeasureDistanceFromPoint(self, p, toType, toID)

    def MeasureVertexAngle(self, fromID, centerID, toID):
        return _designer.Study_MeasureVertexAngle(self, fromID, centerID, toID)

    def MeasurePointVertexAngle(self, x, y, z, fromID, toID):
        return _designer.Study_MeasurePointVertexAngle(self, x, y, z, fromID, toID)

    def MeasureNodeAngle(self, fromID, centerID, toID):
        return _designer.Study_MeasureNodeAngle(self, fromID, centerID, toID)

    def MeasurePointNodeAngle(self, x, y, z, fromID, toID):
        return _designer.Study_MeasurePointNodeAngle(self, x, y, z, fromID, toID)

    def IsModelError(self, *args):
        return _designer.Study_IsModelError(self, *args)

    def IsModelWarning(self, *args):
        return _designer.Study_IsModelWarning(self, *args)

    def SetHiddenResults(self, list):
        return _designer.Study_SetHiddenResults(self, list)

    def GetHiddenResults(self):
        return _designer.Study_GetHiddenResults(self)

    def SetCheckForTopologyChanges(self, flag):
        return _designer.Study_SetCheckForTopologyChanges(self, flag)

    def GetCheckForTopologyChanges(self):
        return _designer.Study_GetCheckForTopologyChanges(self)

    def AddSubroutineParameter(self, name, value):
        return _designer.Study_AddSubroutineParameter(self, name, value)

    def UpdateSubroutineParameter(self, name, value):
        return _designer.Study_UpdateSubroutineParameter(self, name, value)

    def RemoveSubroutineParameter(self, name):
        return _designer.Study_RemoveSubroutineParameter(self, name)

    def ExportSubroutineParameter(self, filename):
        return _designer.Study_ExportSubroutineParameter(self, filename)

    def ImportSubroutineParameter(self, filename):
        return _designer.Study_ImportSubroutineParameter(self, filename)

    def HasMasterStudy(self):
        return _designer.Study_HasMasterStudy(self)

    def GetMasterStudy(self):
        return _designer.Study_GetMasterStudy(self)

    def NumSlaveStudies(self):
        return _designer.Study_NumSlaveStudies(self)

    def GetSlaveStudy(self, val):
        return _designer.Study_GetSlaveStudy(self, val)

    def HasParametricData(self, name):
        return _designer.Study_HasParametricData(self, name)

    def DeleteParametricData(self, val):
        return _designer.Study_DeleteParametricData(self, val)

    def UpdateParametricData(self, val, parameter):
        return _designer.Study_UpdateParametricData(self, val, parameter)

    def CreateParametricDataFromProbe(self, val, parameter):
        return _designer.Study_CreateParametricDataFromProbe(self, val, parameter)

    def CreateParametricDataFromCalculation(self, val, parameter):
        return _designer.Study_CreateParametricDataFromCalculation(self, val, parameter)

    def CreateParametricDataFromTable(self, val, parameter):
        return _designer.Study_CreateParametricDataFromTable(self, val, parameter)

    def CreateParametricDataFromSection(self, val, parameter):
        return _designer.Study_CreateParametricDataFromSection(self, val, parameter)

    def CreateParametricDataFromVectorExpression(self, val, parameter):
        return _designer.Study_CreateParametricDataFromVectorExpression(self, val, parameter)

    def UpdateEfficiencyMapParametricData(self, val, parameter):
        return _designer.Study_UpdateEfficiencyMapParametricData(self, val, parameter)

    def CreateEfficiencyMapParametricData(self, val, parameter):
        return _designer.Study_CreateEfficiencyMapParametricData(self, val, parameter)

    def CreateScriptParametricData(self, title, variable, script):
        return _designer.Study_CreateScriptParametricData(self, title, variable, script)

    def UpdateScriptParametricData(self, val, title, variable, script):
        return _designer.Study_UpdateScriptParametricData(self, val, title, variable, script)

    def CreateAnalysisTemplate(self, *args):
        return _designer.Study_CreateAnalysisTemplate(self, *args)

    def SetMeasurementVariable(self, name, type, sel):
        return _designer.Study_SetMeasurementVariable(self, name, type, sel)

    def GetMeasurementVariable(self, val):
        return _designer.Study_GetMeasurementVariable(self, val)

    def RemoveMeasurementVariable(self, val):
        return _designer.Study_RemoveMeasurementVariable(self, val)

    def GetCreateResponseInfo(self):
        return _designer.Study_GetCreateResponseInfo(self)

    def GetCreateResponseAdditionalPointsInfo(self):
        return _designer.Study_GetCreateResponseAdditionalPointsInfo(self)

    def NumTableCorrections(self):
        return _designer.Study_NumTableCorrections(self)

    def CreateTableCorrection(self, name):
        return _designer.Study_CreateTableCorrection(self, name)

    def GetTableCorrection(self, val):
        return _designer.Study_GetTableCorrection(self, val)

    def DeleteTableCorrection(self, val):
        return _designer.Study_DeleteTableCorrection(self, val)

    def NumResponseTableDefinitions(self):
        return _designer.Study_NumResponseTableDefinitions(self)

    def CreateResponseTableDefinition(self, name):
        return _designer.Study_CreateResponseTableDefinition(self, name)

    def GetResponseTableDefinition(self, val):
        return _designer.Study_GetResponseTableDefinition(self, val)

    def DeleteResponseTableDefinition(self, val):
        return _designer.Study_DeleteResponseTableDefinition(self, val)

    def DeleteResponseTable(self, component):
        return _designer.Study_DeleteResponseTable(self, component)

    def NumResponseTableResultTypes(self):
        return _designer.Study_NumResponseTableResultTypes(self)

    def CreateResponseTableResultType(self, name):
        return _designer.Study_CreateResponseTableResultType(self, name)

    def GetResponseTableResultType(self, val):
        return _designer.Study_GetResponseTableResultType(self, val)

    def DeleteResponseTableResultType(self, val):
        return _designer.Study_DeleteResponseTableResultType(self, val)

    def NumEfficiencyMapDefinitions(self):
        return _designer.Study_NumEfficiencyMapDefinitions(self)

    def CreateEfficiencyMapDefinition(self, name):
        return _designer.Study_CreateEfficiencyMapDefinition(self, name)

    def GetEfficiencyMapDefinition(self, val):
        return _designer.Study_GetEfficiencyMapDefinition(self, val)

    def DeleteEfficiencyMapDefinition(self, val):
        return _designer.Study_DeleteEfficiencyMapDefinition(self, val)

    def GetEfficiencyMapPlot(self, val):
        return _designer.Study_GetEfficiencyMapPlot(self, val)

    def NumExternalEfficiencyMapDefinitions(self):
        return _designer.Study_NumExternalEfficiencyMapDefinitions(self)

    def CreateExternalEfficiencyMapDefinition(self, name):
        return _designer.Study_CreateExternalEfficiencyMapDefinition(self, name)

    def GetExternalEfficiencyMapDefinition(self, val):
        return _designer.Study_GetExternalEfficiencyMapDefinition(self, val)

    def DeleteExternalEfficiencyMapDefinition(self, val):
        return _designer.Study_DeleteExternalEfficiencyMapDefinition(self, val)

    def GetExternalEfficiencyMapPlot(self, val):
        return _designer.Study_GetExternalEfficiencyMapPlot(self, val)

    def NumDifferenceEfficiencyMapDefinitions(self):
        return _designer.Study_NumDifferenceEfficiencyMapDefinitions(self)

    def CreateDifferenceEfficiencyMapDefinition(self, name):
        return _designer.Study_CreateDifferenceEfficiencyMapDefinition(self, name)

    def GetDifferenceEfficiencyMapDefinition(self, val):
        return _designer.Study_GetDifferenceEfficiencyMapDefinition(self, val)

    def DeleteDifferenceEfficiencyMapDefinition(self, val):
        return _designer.Study_DeleteDifferenceEfficiencyMapDefinition(self, val)

    def GetDifferenceEfficiencyMapPlot(self, val):
        return _designer.Study_GetDifferenceEfficiencyMapPlot(self, val)

    def GetMeshToModelParameter(self):
        return _designer.Study_GetMeshToModelParameter(self)

    def ConvertMeshToModel(self):
        return _designer.Study_ConvertMeshToModel(self)

    def SetMaterialAttributeParameters(self, items):
        return _designer.Study_SetMaterialAttributeParameters(self, items)

    def GetMaterialAttributeParameters(self):
        return _designer.Study_GetMaterialAttributeParameters(self)

    def LoadMesh(self):
        return _designer.Study_LoadMesh(self)

    def LoadMeshAllCases(self):
        return _designer.Study_LoadMeshAllCases(self)

    def CreateFilterDefinition(self, name):
        return _designer.Study_CreateFilterDefinition(self, name)

    def GetFilterResultDefinition(self, val):
        return _designer.Study_GetFilterResultDefinition(self, val)

    def DeleteFilterResultDefinition(self, val):
        return _designer.Study_DeleteFilterResultDefinition(self, val)

    def GetFacesHeight(self, faceIds, vector):
        return _designer.Study_GetFacesHeight(self, faceIds, vector)

    def GetFacesMaximumDistanceFromAxis(self, faceIds, origin, vector):
        return _designer.Study_GetFacesMaximumDistanceFromAxis(self, faceIds, origin, vector)

    def ExportAnalysisParameters(self, filename, openCadLink):
        return _designer.Study_ExportAnalysisParameters(self, filename, openCadLink)

    def ExportResponseTable(self, filename, nameOrIndex, caseIndex):
        return _designer.Study_ExportResponseTable(self, filename, nameOrIndex, caseIndex)

    def GetParameterSettingStatus(self):
        return _designer.Study_GetParameterSettingStatus(self)

    def ExportRttFile(self, parameter):
        return _designer.Study_ExportRttFile(self, parameter)

    def CreateVectorExpression(self, name):
        return _designer.Study_CreateVectorExpression(self, name)

    def GetVectorExpression(self, val):
        return _designer.Study_GetVectorExpression(self, val)

    def DeleteVectorExpression(self, val):
        return _designer.Study_DeleteVectorExpression(self, val)
Study_swigregister = _designer.Study_swigregister
Study_swigregister(Study)

class ReferenceTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceTarget, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ReferenceTarget
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ReferenceTarget_IsValid(self)

    def GetName(self):
        return _designer.ReferenceTarget_GetName(self)

    def SetName(self, name):
        return _designer.ReferenceTarget_SetName(self, name)

    def GetType(self):
        return _designer.ReferenceTarget_GetType(self)

    def SetType(self, type):
        return _designer.ReferenceTarget_SetType(self, type)

    def ClearParts(self):
        return _designer.ReferenceTarget_ClearParts(self)

    def AddSelected(self, selection):
        return _designer.ReferenceTarget_AddSelected(self, selection)

    def GetSelection(self):
        return _designer.ReferenceTarget_GetSelection(self)

    def NumParts(self):
        return _designer.ReferenceTarget_NumParts(self)

    def GetID(self):
        return _designer.ReferenceTarget_GetID(self)
ReferenceTarget_swigregister = _designer.ReferenceTarget_swigregister
ReferenceTarget_swigregister(ReferenceTarget)

class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr

    def __init__(self, rval):
        this = _designer.new_Material(rval)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _designer.delete_Material
    __del__ = lambda self: None

    def SetCategory(self, name):
        return _designer.Material_SetCategory(self, name)

    def SetLibrary(self, category, libname):
        return _designer.Material_SetLibrary(self, category, libname)

    def GetName(self):
        return _designer.Material_GetName(self)

    def GetMaterialID(self):
        return _designer.Material_GetMaterialID(self)

    def IsValid(self):
        return _designer.Material_IsValid(self)

    def IsMagnet(self):
        return _designer.Material_IsMagnet(self)

    def IsMagnetizationMaterial(self):
        return _designer.Material_IsMagnetizationMaterial(self)

    def IsMagnetizedMaterial(self):
        return _designer.Material_IsMagnetizedMaterial(self)

    def SetMaterial(self, name):
        return _designer.Material_SetMaterial(self, name)

    def GetPropertyNames(self):
        return _designer.Material_GetPropertyNames(self)

    def GetPropertyTable(self):
        return _designer.Material_GetPropertyTable(self)

    def GetPattern(self):
        return _designer.Material_GetPattern(self)

    def GetLossCoordinatePattern(self):
        return _designer.Material_GetLossCoordinatePattern(self)

    def GetListPatterns(self):
        return _designer.Material_GetListPatterns(self)

    def GetValue(self, propName):
        return _designer.Material_GetValue(self, propName)

    def GetStringValue(self, propName):
        return _designer.Material_GetStringValue(self, propName)

    def GetValueWithUnit(self, propName, unitName):
        return _designer.Material_GetValueWithUnit(self, propName, unitName)

    def GetPropertyHelp(self, propName):
        return _designer.Material_GetPropertyHelp(self, propName)

    def GetPropertyType(self, propName):
        return _designer.Material_GetPropertyType(self, propName)

    def GetTable(self, propName):
        return _designer.Material_GetTable(self, propName)

    def GetTableList(self, propName):
        return _designer.Material_GetTableList(self, propName)

    def GetDirection(self):
        return _designer.Material_GetDirection(self)

    def GetAxis(self):
        return _designer.Material_GetAxis(self)

    def GetOrigin(self):
        return _designer.Material_GetOrigin(self)

    def GetOriginUnit(self):
        return _designer.Material_GetOriginUnit(self)

    def GetOrientation(self):
        return _designer.Material_GetOrientation(self)

    def GetEdgeOrientation(self):
        return _designer.Material_GetEdgeOrientation(self)

    def GetReverseEdgeDirection(self):
        return _designer.Material_GetReverseEdgeDirection(self)

    def GetReverseAxisDirection(self):
        return _designer.Material_GetReverseAxisDirection(self)

    def GetDirectionForRefAxis(self):
        return _designer.Material_GetDirectionForRefAxis(self)

    def GetAxisForRefAxis(self):
        return _designer.Material_GetAxisForRefAxis(self)

    def GetOriginForRefAxis(self):
        return _designer.Material_GetOriginForRefAxis(self)

    def GetOriginUnitForRefAxis(self):
        return _designer.Material_GetOriginUnitForRefAxis(self)

    def GetMagnetEdgeStartPoint(self):
        return _designer.Material_GetMagnetEdgeStartPoint(self)

    def GetMagnetEdgeEndPoint(self):
        return _designer.Material_GetMagnetEdgeEndPoint(self)

    def GetMagnetEdgeStartPointUnit(self):
        return _designer.Material_GetMagnetEdgeStartPointUnit(self)

    def GetMagnetEdgeEndPointUnit(self):
        return _designer.Material_GetMagnetEdgeEndPointUnit(self)

    def SetDirection(self, vector):
        return _designer.Material_SetDirection(self, vector)

    def SetDirectionXYZ(self, x, y, z):
        return _designer.Material_SetDirectionXYZ(self, x, y, z)

    def SetAxis(self, vector):
        return _designer.Material_SetAxis(self, vector)

    def SetAxisXYZ(self, x, y, z):
        return _designer.Material_SetAxisXYZ(self, x, y, z)

    def SetOrigin(self, position):
        return _designer.Material_SetOrigin(self, position)

    def SetOriginWithUnit(self, position, unitName):
        return _designer.Material_SetOriginWithUnit(self, position, unitName)

    def SetOriginXYZ(self, x, y, z):
        return _designer.Material_SetOriginXYZ(self, x, y, z)

    def SetOriginXYZWithUnit(self, x, y, z, unitName):
        return _designer.Material_SetOriginXYZWithUnit(self, x, y, z, unitName)

    def SetOrientation(self, outward):
        return _designer.Material_SetOrientation(self, outward)

    def SetEdgeOrientation(self, parallelToEdge):
        return _designer.Material_SetEdgeOrientation(self, parallelToEdge)

    def SetReverseEdgeDirection(self, reverse):
        return _designer.Material_SetReverseEdgeDirection(self, reverse)

    def SetReverseAxisDirection(self, reverse):
        return _designer.Material_SetReverseAxisDirection(self, reverse)

    def SetDirectionForRefAxis(self, vector):
        return _designer.Material_SetDirectionForRefAxis(self, vector)

    def SetDirectionXYZForRefAxis(self, x, y, z):
        return _designer.Material_SetDirectionXYZForRefAxis(self, x, y, z)

    def SetAxisForRefAxis(self, vector):
        return _designer.Material_SetAxisForRefAxis(self, vector)

    def SetAxisXYZForRefAxis(self, x, y, z):
        return _designer.Material_SetAxisXYZForRefAxis(self, x, y, z)

    def SetOriginForRefAxis(self, position):
        return _designer.Material_SetOriginForRefAxis(self, position)

    def SetOriginXYZForRefAxis(self, x, y, z):
        return _designer.Material_SetOriginXYZForRefAxis(self, x, y, z)

    def SetOriginWithUnitForRefAxis(self, position, unitName):
        return _designer.Material_SetOriginWithUnitForRefAxis(self, position, unitName)

    def SetOriginXYZWithUnitForRefAxis(self, x, y, z, unitName):
        return _designer.Material_SetOriginXYZWithUnitForRefAxis(self, x, y, z, unitName)

    def SetMagnetEdgeStartPoint(self, position):
        return _designer.Material_SetMagnetEdgeStartPoint(self, position)

    def SetMagnetEdgeStartPointWithUnit(self, position, unitName):
        return _designer.Material_SetMagnetEdgeStartPointWithUnit(self, position, unitName)

    def SetMagnetEdgeStartPointXYZ(self, x, y, z):
        return _designer.Material_SetMagnetEdgeStartPointXYZ(self, x, y, z)

    def SetMagnetEdgeStartPointXYZWithUnit(self, x, y, z, unitName):
        return _designer.Material_SetMagnetEdgeStartPointXYZWithUnit(self, x, y, z, unitName)

    def SetMagnetEdgeEndPoint(self, position):
        return _designer.Material_SetMagnetEdgeEndPoint(self, position)

    def SetMagnetEdgeEndPointWithUnit(self, position, unitName):
        return _designer.Material_SetMagnetEdgeEndPointWithUnit(self, position, unitName)

    def SetMagnetEdgeEndPointXYZ(self, x, y, z):
        return _designer.Material_SetMagnetEdgeEndPointXYZ(self, x, y, z)

    def SetMagnetEdgeEndPointXYZWithUnit(self, x, y, z, unitName):
        return _designer.Material_SetMagnetEdgeEndPointXYZWithUnit(self, x, y, z, unitName)

    def SetPattern(self, pattern):
        return _designer.Material_SetPattern(self, pattern)

    def SetLossCoordinatePattern(self, pattern):
        return _designer.Material_SetLossCoordinatePattern(self, pattern)

    def SetValue(self, propName, value):
        return _designer.Material_SetValue(self, propName, value)

    def SetValueWithUnit(self, propName, value, unitName):
        return _designer.Material_SetValueWithUnit(self, propName, value, unitName)

    def SetTable(self, propName, mat):
        return _designer.Material_SetTable(self, propName, mat)

    def SetTableProperty(self, propName, set):
        return _designer.Material_SetTableProperty(self, propName, set)

    def SetTableFromFile(self, propName, filename):
        return _designer.Material_SetTableFromFile(self, propName, filename)

    def SetComplexValue(self, propName, real, imag):
        return _designer.Material_SetComplexValue(self, propName, real, imag)

    def SetFlagByName(self, propName, scriptKeyName):
        return _designer.Material_SetFlagByName(self, propName, scriptKeyName)

    def GetKeyNames(self, name):
        return _designer.Material_GetKeyNames(self, name)

    def GetFlagAsString(self, name):
        return _designer.Material_GetFlagAsString(self, name)

    def GetSelectableTemperatures(self):
        return _designer.Material_GetSelectableTemperatures(self)

    def LoadPermeability(self, filename):
        return _designer.Material_LoadPermeability(self, filename)

    def LoadLossData(self, filename):
        return _designer.Material_LoadLossData(self, filename)

    def SetTableListName(self, propName, name):
        return _designer.Material_SetTableListName(self, propName, name)

    def SetTableList(self, propName, primaryKey, primaryUnitName, mat):
        return _designer.Material_SetTableList(self, propName, primaryKey, primaryUnitName, mat)

    def SetTableListWithDualKey(self, propName, primaryKey, primaryUnitName, secondaryKey, secondaryUnitName, mat):
        return _designer.Material_SetTableListWithDualKey(self, propName, primaryKey, primaryUnitName, secondaryKey, secondaryUnitName, mat)

    def SetPatternReferenceTarget(self, ref):
        return _designer.Material_SetPatternReferenceTarget(self, ref)

    def SetOriginFromReferenceTarget(self, ref):
        return _designer.Material_SetOriginFromReferenceTarget(self, ref)

    def SetAxisFromReferenceTarget(self, ref):
        return _designer.Material_SetAxisFromReferenceTarget(self, ref)

    def SetDirectionFromReferenceTarget(self, ref):
        return _designer.Material_SetDirectionFromReferenceTarget(self, ref)

    def SetPatternReferenceTargetForRefAxis(self, ref):
        return _designer.Material_SetPatternReferenceTargetForRefAxis(self, ref)

    def SetPatternReferenceTargetForMagnetEdge(self, ref):
        return _designer.Material_SetPatternReferenceTargetForMagnetEdge(self, ref)

    def SetOriginFromReferenceTargetForRefAxis(self, ref):
        return _designer.Material_SetOriginFromReferenceTargetForRefAxis(self, ref)

    def SetAxisFromReferenceTargetForRefAxis(self, ref):
        return _designer.Material_SetAxisFromReferenceTargetForRefAxis(self, ref)

    def SetDirectionFromReferenceTargetForRefAxis(self, ref):
        return _designer.Material_SetDirectionFromReferenceTargetForRefAxis(self, ref)

    def SetMagnetEdgeStartPointFromReferenceTarget(self, ref):
        return _designer.Material_SetMagnetEdgeStartPointFromReferenceTarget(self, ref)

    def SetMagnetEdgeEndPointFromReferenceTarget(self, ref):
        return _designer.Material_SetMagnetEdgeEndPointFromReferenceTarget(self, ref)
Material_swigregister = _designer.Material_swigregister
Material_swigregister(Material)

class MaterialObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_MaterialObject
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.MaterialObject_IsValid(self)

    def GetPropertyNames(self):
        return _designer.MaterialObject_GetPropertyNames(self)

    def GetPropertyHelp(self, propName):
        return _designer.MaterialObject_GetPropertyHelp(self, propName)

    def GetFlagPropertyHelp(self, propName, val):
        return _designer.MaterialObject_GetFlagPropertyHelp(self, propName, val)

    def GetPropertyType(self, propName):
        return _designer.MaterialObject_GetPropertyType(self, propName)

    def GetPropertyTable(self):
        return _designer.MaterialObject_GetPropertyTable(self)

    def GetValue(self, propName):
        return _designer.MaterialObject_GetValue(self, propName)

    def GetStringValue(self, propName):
        return _designer.MaterialObject_GetStringValue(self, propName)

    def GetValueWithUnit(self, propName, unitName):
        return _designer.MaterialObject_GetValueWithUnit(self, propName, unitName)

    def SetValue(self, propName, val):
        return _designer.MaterialObject_SetValue(self, propName, val)

    def SetValueWithUnit(self, propName, value, unitName):
        return _designer.MaterialObject_SetValueWithUnit(self, propName, value, unitName)

    def GetKeyNames(self, name):
        return _designer.MaterialObject_GetKeyNames(self, name)

    def SetFlagByName(self, propName, scriptKeyName):
        return _designer.MaterialObject_SetFlagByName(self, propName, scriptKeyName)

    def GetFlagAsString(self, name):
        return _designer.MaterialObject_GetFlagAsString(self, name)

    def SetTableProperty(self, propName, set):
        return _designer.MaterialObject_SetTableProperty(self, propName, set)

    def SetTable(self, propName, mat):
        return _designer.MaterialObject_SetTable(self, propName, mat)

    def SetTableWithUnit(self, propName, mat, unitlist):
        return _designer.MaterialObject_SetTableWithUnit(self, propName, mat, unitlist)

    def GetTable(self, propName):
        return _designer.MaterialObject_GetTable(self, propName)

    def GetTableList(self, propName):
        return _designer.MaterialObject_GetTableList(self, propName)

    def LoadPermeability(self, filename):
        return _designer.MaterialObject_LoadPermeability(self, filename)

    def LoadLossData(self, filename):
        return _designer.MaterialObject_LoadLossData(self, filename)

    def SetTableFromFile(self, propName, filename):
        return _designer.MaterialObject_SetTableFromFile(self, propName, filename)

    def SetComplexValue(self, propName, real, imag):
        return _designer.MaterialObject_SetComplexValue(self, propName, real, imag)

    def GetName(self):
        return _designer.MaterialObject_GetName(self)

    def SetName(self, name):
        return _designer.MaterialObject_SetName(self, name)

    def AddCurve(self, propName, key, unitName, mat):
        return _designer.MaterialObject_AddCurve(self, propName, key, unitName, mat)

    def ModifyCurve(self, propName, key, unitName, mat):
        return _designer.MaterialObject_ModifyCurve(self, propName, key, unitName, mat)

    def GetCurve(self, propName, key, unitName):
        return _designer.MaterialObject_GetCurve(self, propName, key, unitName)

    def DeleteCurve(self, propName, key, unitName):
        return _designer.MaterialObject_DeleteCurve(self, propName, key, unitName)

    def ChangeKeyCurve(self, propName, oldkey, oldunitName, newkey, newunitName):
        return _designer.MaterialObject_ChangeKeyCurve(self, propName, oldkey, oldunitName, newkey, newunitName)

    def AddCurve2(self, propName, key, unitName, key2, unitName2, mat):
        return _designer.MaterialObject_AddCurve2(self, propName, key, unitName, key2, unitName2, mat)

    def ModifyCurve2(self, propName, key, unitName, key2, unitName2, mat):
        return _designer.MaterialObject_ModifyCurve2(self, propName, key, unitName, key2, unitName2, mat)

    def GetCurve2(self, propName, key, unitName, key2, unitName2):
        return _designer.MaterialObject_GetCurve2(self, propName, key, unitName, key2, unitName2)

    def DeleteCurve2(self, propName, key, unitName, key2, unitName2):
        return _designer.MaterialObject_DeleteCurve2(self, propName, key, unitName, key2, unitName2)

    def ChangeKeyCurve2(self, propName, oldkey, oldunitName, oldkey2, oldunitName2, newkey, newunitName, newkey2, newunitName2):
        return _designer.MaterialObject_ChangeKeyCurve2(self, propName, oldkey, oldunitName, oldkey2, oldunitName2, newkey, newunitName, newkey2, newunitName2)
MaterialObject_swigregister = _designer.MaterialObject_swigregister
MaterialObject_swigregister(MaterialObject)

class FunctionObjectFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionObjectFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionObjectFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_FunctionObjectFactory
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.FunctionObjectFactory_IsValid(self)

    def Constant(self, amp):
        return _designer.FunctionObjectFactory_Constant(self, amp)

    def Sin(self, *args):
        return _designer.FunctionObjectFactory_Sin(self, *args)

    def Step(self, amp, freq, phase):
        return _designer.FunctionObjectFactory_Step(self, amp, freq, phase)

    def Exp(self, amp, initial, timeconst):
        return _designer.FunctionObjectFactory_Exp(self, amp, initial, timeconst)

    def Pulse(self, amp, freq, delay, start, end, width):
        return _designer.FunctionObjectFactory_Pulse(self, amp, freq, delay, start, end, width)

    def Composite(self):
        return _designer.FunctionObjectFactory_Composite(self)

    def Harmonic(self, amp, freq, phase):
        return _designer.FunctionObjectFactory_Harmonic(self, amp, freq, phase)
FunctionObjectFactory_swigregister = _designer.FunctionObjectFactory_swigregister
FunctionObjectFactory_swigregister(FunctionObjectFactory)

class CircuitComponentInstance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CircuitComponentInstance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CircuitComponentInstance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CircuitComponentInstance
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CircuitComponentInstance_IsValid(self)

    def GetName(self):
        return _designer.CircuitComponentInstance_GetName(self)

    def GetAngle(self):
        return _designer.CircuitComponentInstance_GetAngle(self)

    def GetType(self):
        return _designer.CircuitComponentInstance_GetType(self)

    def MoveTo(self, x, y):
        return _designer.CircuitComponentInstance_MoveTo(self, x, y)

    def Move(self, dx, dy):
        return _designer.CircuitComponentInstance_Move(self, dx, dy)

    def GetPosition(self):
        return _designer.CircuitComponentInstance_GetPosition(self)

    def Rotate(self):
        return _designer.CircuitComponentInstance_Rotate(self)

    def ReverseRotate(self):
        return _designer.CircuitComponentInstance_ReverseRotate(self)

    def RotateTo(self, angle):
        return _designer.CircuitComponentInstance_RotateTo(self, angle)

    def SetComponent(self, component):
        return _designer.CircuitComponentInstance_SetComponent(self, component)
CircuitComponentInstance_swigregister = _designer.CircuitComponentInstance_swigregister
CircuitComponentInstance_swigregister(CircuitComponentInstance)

class CircuitComponent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CircuitComponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CircuitComponent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CircuitComponent
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CircuitComponent_IsValid(self)

    def GetType(self):
        return _designer.CircuitComponent_GetType(self)

    def GetName(self):
        return _designer.CircuitComponent_GetName(self)

    def SetName(self, name):
        return _designer.CircuitComponent_SetName(self, name)

    def GetPropertyNames(self):
        return _designer.CircuitComponent_GetPropertyNames(self)

    def GetPropertyHelp(self, propName):
        return _designer.CircuitComponent_GetPropertyHelp(self, propName)

    def GetFlagPropertyHelp(self, propName, val):
        return _designer.CircuitComponent_GetFlagPropertyHelp(self, propName, val)

    def GetPropertyType(self, propName):
        return _designer.CircuitComponent_GetPropertyType(self, propName)

    def GetPropertyTable(self):
        return _designer.CircuitComponent_GetPropertyTable(self)

    def GetValue(self, propName):
        return _designer.CircuitComponent_GetValue(self, propName)

    def GetValueWithUnit(self, propName, unitName):
        return _designer.CircuitComponent_GetValueWithUnit(self, propName, unitName)

    def SetValue(self, propName, val):
        return _designer.CircuitComponent_SetValue(self, propName, val)

    def SetValueWithUnit(self, propName, value, unitName):
        return _designer.CircuitComponent_SetValueWithUnit(self, propName, value, unitName)

    def GetStringValue(self, propName):
        return _designer.CircuitComponent_GetStringValue(self, propName)

    def GetKeyNames(self, name):
        return _designer.CircuitComponent_GetKeyNames(self, name)

    def SetFlagByName(self, propName, scriptKeyName):
        return _designer.CircuitComponent_SetFlagByName(self, propName, scriptKeyName)

    def GetFlagAsString(self, name):
        return _designer.CircuitComponent_GetFlagAsString(self, name)

    def SetTableProperty(self, propName, set):
        return _designer.CircuitComponent_SetTableProperty(self, propName, set)

    def SetTable(self, propName, mat):
        return _designer.CircuitComponent_SetTable(self, propName, mat)

    def GetTable(self, propName):
        return _designer.CircuitComponent_GetTable(self, propName)

    def GetTableList(self, propName):
        return _designer.CircuitComponent_GetTableList(self, propName)

    def SetTableWithUnit(self, propName, mat, unitlist):
        return _designer.CircuitComponent_SetTableWithUnit(self, propName, mat, unitlist)

    def SetMatrixWithUnit(self, propName, mat, unitlist):
        return _designer.CircuitComponent_SetMatrixWithUnit(self, propName, mat, unitlist)

    def SetTableFromFile(self, propName, filename):
        return _designer.CircuitComponent_SetTableFromFile(self, propName, filename)

    def SetComplexValue(self, propName, real, imag):
        return _designer.CircuitComponent_SetComplexValue(self, propName, real, imag)

    def GetFunction(self):
        return _designer.CircuitComponent_GetFunction(self)

    def SetFunction(self, func):
        return _designer.CircuitComponent_SetFunction(self, func)

    def SetLink(self, name):
        return _designer.CircuitComponent_SetLink(self, name)

    def GetLink(self):
        return _designer.CircuitComponent_GetLink(self)

    def SetInstanceLink(self, propName, instanceName):
        return _designer.CircuitComponent_SetInstanceLink(self, propName, instanceName)

    def GetInstanceLink(self, propName):
        return _designer.CircuitComponent_GetInstanceLink(self, propName)
CircuitComponent_swigregister = _designer.CircuitComponent_swigregister
CircuitComponent_swigregister(CircuitComponent)

class CircuitWire(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CircuitWire, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CircuitWire, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CircuitWire
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CircuitWire_IsValid(self)

    def SetPosition(self, sx, sy, ex, ey):
        return _designer.CircuitWire_SetPosition(self, sx, sy, ex, ey)

    def Move(self, dx, dy):
        return _designer.CircuitWire_Move(self, dx, dy)

    def Rotate(self):
        return _designer.CircuitWire_Rotate(self)

    def ReverseRotate(self):
        return _designer.CircuitWire_ReverseRotate(self)

    def GetPosition(self):
        return _designer.CircuitWire_GetPosition(self)
CircuitWire_swigregister = _designer.CircuitWire_swigregister
CircuitWire_swigregister(CircuitWire)

class DynamicCircuit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicCircuit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicCircuit, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_DynamicCircuit
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.DynamicCircuit_IsValid(self)

    def Submit(self, name, x, y):
        return _designer.DynamicCircuit_Submit(self, name, x, y)

    def SetValue(self, name, value):
        return _designer.DynamicCircuit_SetValue(self, name, value)
DynamicCircuit_swigregister = _designer.DynamicCircuit_swigregister
DynamicCircuit_swigregister(DynamicCircuit)

class MacroCircuit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MacroCircuit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MacroCircuit, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_MacroCircuit
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.MacroCircuit_IsValid(self)

    def AddInstance(self, val):
        return _designer.MacroCircuit_AddInstance(self, val)

    def AddWire(self, index):
        return _designer.MacroCircuit_AddWire(self, index)

    def AddLeftTerminal(self, x, y):
        return _designer.MacroCircuit_AddLeftTerminal(self, x, y)

    def AddRightTerminal(self, x, y):
        return _designer.MacroCircuit_AddRightTerminal(self, x, y)

    def Create(self):
        return _designer.MacroCircuit_Create(self)
MacroCircuit_swigregister = _designer.MacroCircuit_swigregister
MacroCircuit_swigregister(MacroCircuit)

class Circuit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Circuit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Circuit, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Circuit
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Circuit_IsValid(self)

    def NumInstances(self):
        return _designer.Circuit_NumInstances(self)

    def NumComponents(self):
        return _designer.Circuit_NumComponents(self)

    def NumWires(self):
        return _designer.Circuit_NumWires(self)

    def CreateComponent(self, typeName, name):
        return _designer.Circuit_CreateComponent(self, typeName, name)

    def CreateInstance(self, component, x, y):
        return _designer.Circuit_CreateInstance(self, component, x, y)

    def CreateSubCircuit(self, filename, name, x, y):
        return _designer.Circuit_CreateSubCircuit(self, filename, name, x, y)

    def GetComponent(self, val):
        return _designer.Circuit_GetComponent(self, val)

    def GetInstance(self, val, index):
        return _designer.Circuit_GetInstance(self, val, index)

    def DeleteComponent(self, val):
        return _designer.Circuit_DeleteComponent(self, val)

    def DeleteInstance(self, val, index):
        return _designer.Circuit_DeleteInstance(self, val, index)

    def CreateNewComponentInstance(self, typeName, x, y):
        return _designer.Circuit_CreateNewComponentInstance(self, typeName, x, y)

    def CreateNewSubCircuitInstance(self, filename, x, y):
        return _designer.Circuit_CreateNewSubCircuitInstance(self, filename, x, y)

    def CreateComponentInstance(self, component, x, y):
        return _designer.Circuit_CreateComponentInstance(self, component, x, y)

    def GetComponentInstance(self, val):
        return _designer.Circuit_GetComponentInstance(self, val)

    def GetComponentInstanceByType(self, typeName, index):
        return _designer.Circuit_GetComponentInstanceByType(self, typeName, index)

    def CreateTerminalLabel(self, name, x, y):
        return _designer.Circuit_CreateTerminalLabel(self, name, x, y)

    def DeleteTerminalLabel(self, x, y):
        return _designer.Circuit_DeleteTerminalLabel(self, x, y)

    def ClearTerminalLabel(self):
        return _designer.Circuit_ClearTerminalLabel(self)

    def CreateVoltageDifferenceLabel(self, name, x1, y1, x2, y2):
        return _designer.Circuit_CreateVoltageDifferenceLabel(self, name, x1, y1, x2, y2)

    def DeleteVoltageDifferenceLabel(self, x1, y1, x2, y2):
        return _designer.Circuit_DeleteVoltageDifferenceLabel(self, x1, y1, x2, y2)

    def ClearVoltageDifferenceLabel(self):
        return _designer.Circuit_ClearVoltageDifferenceLabel(self)

    def CreateTerminalDifferenceLabel(self, name, x1, y1, x2, y2):
        return _designer.Circuit_CreateTerminalDifferenceLabel(self, name, x1, y1, x2, y2)

    def DeleteTerminalDifferenceLabel(self, x1, y1, x2, y2):
        return _designer.Circuit_DeleteTerminalDifferenceLabel(self, x1, y1, x2, y2)

    def ClearTerminalDifferenceLabel(self):
        return _designer.Circuit_ClearTerminalDifferenceLabel(self)

    def CreateDynamicCircuit(self, typeName):
        return _designer.Circuit_CreateDynamicCircuit(self, typeName)

    def DuplicateCircuit(self, name, newName):
        return _designer.Circuit_DuplicateCircuit(self, name, newName)

    def CreateBrushGraph(self, x1, y1, x2, y2):
        return _designer.Circuit_CreateBrushGraph(self, x1, y1, x2, y2)

    def ClearBrushGraph(self):
        return _designer.Circuit_ClearBrushGraph(self)

    def GetComponentByType(self, typeName, index):
        return _designer.Circuit_GetComponentByType(self, typeName, index)

    def GetSubCircuit(self, val):
        return _designer.Circuit_GetSubCircuit(self, val)

    def NumSubCircuit(self):
        return _designer.Circuit_NumSubCircuit(self)

    def DeleteComponentInstance(self, val):
        return _designer.Circuit_DeleteComponentInstance(self, val)

    def DeleteComponentInstanceByType(self, typeName, index):
        return _designer.Circuit_DeleteComponentInstanceByType(self, typeName, index)

    def DeleteWire(self, wire):
        return _designer.Circuit_DeleteWire(self, wire)

    def DeleteWireByIndex(self, index):
        return _designer.Circuit_DeleteWireByIndex(self, index)

    def CreateWire(self, x1, y1, x2, y2):
        return _designer.Circuit_CreateWire(self, x1, y1, x2, y2)

    def GetWire(self, index):
        return _designer.Circuit_GetWire(self, index)

    def Clear(self):
        return _designer.Circuit_Clear(self)

    def Save(self, *args):
        return _designer.Circuit_Save(self, *args)

    def ExportImage(self, filename):
        return _designer.Circuit_ExportImage(self, filename)

    def ExportImageWithSize(self, filename, width, height):
        return _designer.Circuit_ExportImageWithSize(self, filename, width, height)

    def CreateMacro(self, macroName):
        return _designer.Circuit_CreateMacro(self, macroName)

    def CreateResponseTable(self, component):
        return _designer.Circuit_CreateResponseTable(self, component)
Circuit_swigregister = _designer.Circuit_swigregister
Circuit_swigregister(Circuit)

class CutList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CutList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CutList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CutList
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CutList_IsValid(self)

    def CreateCutPlane(self, *args):
        return _designer.CutList_CreateCutPlane(self, *args)

    def CreateCutCylinder(self, *args):
        return _designer.CutList_CreateCutCylinder(self, *args)

    def IsShowOnlyCutFaces(self):
        return _designer.CutList_IsShowOnlyCutFaces(self)

    def ShowOnlyCutFaces(self, show):
        return _designer.CutList_ShowOnlyCutFaces(self, show)

    def NumCut(self):
        return _designer.CutList_NumCut(self)

    def CopyCut(self, cutplane):
        return _designer.CutList_CopyCut(self, cutplane)

    def DuplicateCut(self, var):
        return _designer.CutList_DuplicateCut(self, var)

    def DeleteCut(self, var):
        return _designer.CutList_DeleteCut(self, var)

    def GetCut(self, var):
        return _designer.CutList_GetCut(self, var)

    def NumCutPlanes(self):
        return _designer.CutList_NumCutPlanes(self)

    def CopyCutPlane(self, cutplane):
        return _designer.CutList_CopyCutPlane(self, cutplane)

    def DeleteCutPlane(self, var):
        return _designer.CutList_DeleteCutPlane(self, var)

    def GetCutPlane(self, var):
        return _designer.CutList_GetCutPlane(self, var)
CutList_swigregister = _designer.CutList_swigregister
CutList_swigregister(CutList)

class CutPlane(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CutPlane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CutPlane, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CutPlane
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CutPlane_IsValid(self)

    def SetName(self, name):
        return _designer.CutPlane_SetName(self, name)

    def GetName(self):
        return _designer.CutPlane_GetName(self)

    def SetNormal(self, normal):
        return _designer.CutPlane_SetNormal(self, normal)

    def SetNormalXYZ(self, x, y, z):
        return _designer.CutPlane_SetNormalXYZ(self, x, y, z)

    def GetNormal(self):
        return _designer.CutPlane_GetNormal(self)

    def SetOrigin(self, origin):
        return _designer.CutPlane_SetOrigin(self, origin)

    def SetOriginWithUnit(self, origin, unitName):
        return _designer.CutPlane_SetOriginWithUnit(self, origin, unitName)

    def SetOriginXYZ(self, x, y, z):
        return _designer.CutPlane_SetOriginXYZ(self, x, y, z)

    def SetOriginXYZWithUnit(self, x, y, z, unitName):
        return _designer.CutPlane_SetOriginXYZWithUnit(self, x, y, z, unitName)

    def GetOrigin(self):
        return _designer.CutPlane_GetOrigin(self)

    def GetOriginWithUnit(self, unitName):
        return _designer.CutPlane_GetOriginWithUnit(self, unitName)

    def SetRadius(self, radius):
        return _designer.CutPlane_SetRadius(self, radius)

    def SetRadiusWithUnit(self, radius, unitName):
        return _designer.CutPlane_SetRadiusWithUnit(self, radius, unitName)

    def GetRadius(self):
        return _designer.CutPlane_GetRadius(self)

    def GetRadiusWithUnit(self, unitName):
        return _designer.CutPlane_GetRadiusWithUnit(self, unitName)

    def On(self):
        return _designer.CutPlane_On(self)

    def Off(self):
        return _designer.CutPlane_Off(self)

    def IsOn(self):
        return _designer.CutPlane_IsOn(self)

    def SetDisplayType(self, typeName):
        return _designer.CutPlane_SetDisplayType(self, typeName)

    def GetDisplayType(self):
        return _designer.CutPlane_GetDisplayType(self)

    def SetShowCutOnly(self, flag):
        return _designer.CutPlane_SetShowCutOnly(self, flag)

    def GetShowCutOnly(self):
        return _designer.CutPlane_GetShowCutOnly(self)

    def SetNumCircumferentialDivisions(self, num):
        return _designer.CutPlane_SetNumCircumferentialDivisions(self, num)

    def NumCircumferentialDivisions(self):
        return _designer.CutPlane_NumCircumferentialDivisions(self)

    def SetUseCircumferentialDivisions(self, use):
        return _designer.CutPlane_SetUseCircumferentialDivisions(self, use)

    def UseCircumferentialDivisions(self):
        return _designer.CutPlane_UseCircumferentialDivisions(self)
CutPlane_swigregister = _designer.CutPlane_swigregister
CutPlane_swigregister(CutPlane)

class CoordinateSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateSystem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CoordinateSystem
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CoordinateSystem_IsValid(self)

    def SetName(self, name):
        return _designer.CoordinateSystem_SetName(self, name)

    def GetName(self):
        return _designer.CoordinateSystem_GetName(self)

    def SetFirstAxis(self, normal):
        return _designer.CoordinateSystem_SetFirstAxis(self, normal)

    def GetFirstAxis(self):
        return _designer.CoordinateSystem_GetFirstAxis(self)

    def SetFirstAxisXYZ(self, x, y, z):
        return _designer.CoordinateSystem_SetFirstAxisXYZ(self, x, y, z)

    def SetSecondAxis(self, axis):
        return _designer.CoordinateSystem_SetSecondAxis(self, axis)

    def GetSecondAxis(self):
        return _designer.CoordinateSystem_GetSecondAxis(self)

    def SetSecondAxisXYZ(self, x, y, z):
        return _designer.CoordinateSystem_SetSecondAxisXYZ(self, x, y, z)

    def SetOrigin(self, origin):
        return _designer.CoordinateSystem_SetOrigin(self, origin)

    def SetOriginWithUnit(self, origin, unitName):
        return _designer.CoordinateSystem_SetOriginWithUnit(self, origin, unitName)

    def GetOrigin(self):
        return _designer.CoordinateSystem_GetOrigin(self)

    def GetOriginWithUnit(self, unitName):
        return _designer.CoordinateSystem_GetOriginWithUnit(self, unitName)

    def SetOriginXYZ(self, x, y, z):
        return _designer.CoordinateSystem_SetOriginXYZ(self, x, y, z)

    def SetOriginXYZWithUnit(self, x, y, z, unitName):
        return _designer.CoordinateSystem_SetOriginXYZWithUnit(self, x, y, z, unitName)

    def SetFirstAxisType(self, typeName):
        return _designer.CoordinateSystem_SetFirstAxisType(self, typeName)

    def GetFirstAxisType(self):
        return _designer.CoordinateSystem_GetFirstAxisType(self)
CoordinateSystem_swigregister = _designer.CoordinateSystem_swigregister
CoordinateSystem_swigregister(CoordinateSystem)

class CoordinateSystemList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateSystemList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateSystemList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CoordinateSystemList
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CoordinateSystemList_IsValid(self)

    def CreateRectangular(self, name):
        return _designer.CoordinateSystemList_CreateRectangular(self, name)

    def CreateCylindrical(self, name):
        return _designer.CoordinateSystemList_CreateCylindrical(self, name)

    def NumCoordinateSystems(self):
        return _designer.CoordinateSystemList_NumCoordinateSystems(self)

    def DuplicateCoordinateSystem(self, var):
        return _designer.CoordinateSystemList_DuplicateCoordinateSystem(self, var)

    def DeleteCoordinateSystem(self, var):
        return _designer.CoordinateSystemList_DeleteCoordinateSystem(self, var)

    def GetCoordinateSystem(self, var):
        return _designer.CoordinateSystemList_GetCoordinateSystem(self, var)
CoordinateSystemList_swigregister = _designer.CoordinateSystemList_swigregister
CoordinateSystemList_swigregister(CoordinateSystemList)

class GroupList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroupList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroupList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_GroupList
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.GroupList_IsValid(self)

    def GetParts(self, var):
        return _designer.GroupList_GetParts(self, var)

    def CreateGroup(self, groupName):
        return _designer.GroupList_CreateGroup(self, groupName)

    def CreateGroupByMaterial(self):
        return _designer.GroupList_CreateGroupByMaterial(self)

    def CreateGroupByName(self):
        return _designer.GroupList_CreateGroupByName(self)

    def CreateGroupByNameStart(self, characters):
        return _designer.GroupList_CreateGroupByNameStart(self, characters)

    def CreateGroupBySelected(self, selection, groupName):
        return _designer.GroupList_CreateGroupBySelected(self, selection, groupName)

    def RemoveGroup(self, var):
        return _designer.GroupList_RemoveGroup(self, var)

    def RemoveAllGroups(self):
        return _designer.GroupList_RemoveAllGroups(self)

    def NumGroups(self):
        return _designer.GroupList_NumGroups(self)

    def NumParts(self, var):
        return _designer.GroupList_NumParts(self, var)

    def RenameGroup(self, var, newName):
        return _designer.GroupList_RenameGroup(self, var, newName)

    def GetGroupName(self, groupIndex):
        return _designer.GroupList_GetGroupName(self, groupIndex)

    def AddPartToGroup(self, groupVal, val):
        return _designer.GroupList_AddPartToGroup(self, groupVal, val)

    def RemovePartFromGroup(self, groupVal, val):
        return _designer.GroupList_RemovePartFromGroup(self, groupVal, val)

    def GetPartId(self, val, partIndex):
        return _designer.GroupList_GetPartId(self, val, partIndex)

    def GetGroup(self, var):
        return _designer.GroupList_GetGroup(self, var)
GroupList_swigregister = _designer.GroupList_swigregister
GroupList_swigregister(GroupList)

class MaterialLibrary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialLibrary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialLibrary, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_MaterialLibrary
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.MaterialLibrary_IsValid(self)

    def NumMaterials(self):
        return _designer.MaterialLibrary_NumMaterials(self)

    def CopyMaterial(self, val):
        return _designer.MaterialLibrary_CopyMaterial(self, val)

    def CopyMaterialByObject(self, original):
        return _designer.MaterialLibrary_CopyMaterialByObject(self, original)

    def GetMaterial(self, val):
        return _designer.MaterialLibrary_GetMaterial(self, val)

    def GetUserMaterial(self, val):
        return _designer.MaterialLibrary_GetUserMaterial(self, val)

    def NumCustomMaterials(self):
        return _designer.MaterialLibrary_NumCustomMaterials(self)

    def CreateUserMagnet(self, *args):
        return _designer.MaterialLibrary_CreateUserMagnet(self, *args)

    def CreateCustomMaterial(self, *args):
        return _designer.MaterialLibrary_CreateCustomMaterial(self, *args)

    def GetCustomMaterial(self, val):
        return _designer.MaterialLibrary_GetCustomMaterial(self, val)

    def DeleteCustomMaterialByObject(self, object):
        return _designer.MaterialLibrary_DeleteCustomMaterialByObject(self, object)

    def DeleteCustomMaterial(self, val):
        return _designer.MaterialLibrary_DeleteCustomMaterial(self, val)

    def AddBookmark(self, val):
        return _designer.MaterialLibrary_AddBookmark(self, val)

    def RemoveBookmark(self, val):
        return _designer.MaterialLibrary_RemoveBookmark(self, val)

    def ExportMaterialXML(self, filename, val):
        return _designer.MaterialLibrary_ExportMaterialXML(self, filename, val)

    def ExportFolderMaterialXML(self, filename, libPath):
        return _designer.MaterialLibrary_ExportFolderMaterialXML(self, filename, libPath)

    def ExportAllMaterialXML(self, filename):
        return _designer.MaterialLibrary_ExportAllMaterialXML(self, filename)

    def ImportMaterialXML(self, filename):
        return _designer.MaterialLibrary_ImportMaterialXML(self, filename)

    def ImportMaterial(self, filename):
        return _designer.MaterialLibrary_ImportMaterial(self, filename)

    def ImportStudioMaterial(self):
        return _designer.MaterialLibrary_ImportStudioMaterial(self)

    def SynchronizeMaterial(self):
        return _designer.MaterialLibrary_SynchronizeMaterial(self)

    def CreateNewFolder(self, name, libPath):
        return _designer.MaterialLibrary_CreateNewFolder(self, name, libPath)

    def RenameFolder(self, oldPath, newName):
        return _designer.MaterialLibrary_RenameFolder(self, oldPath, newName)

    def DeleteFolder(self, libPath):
        return _designer.MaterialLibrary_DeleteFolder(self, libPath)

    def MoveMaterial(self, val, libPath):
        return _designer.MaterialLibrary_MoveMaterial(self, val, libPath)
MaterialLibrary_swigregister = _designer.MaterialLibrary_swigregister
MaterialLibrary_swigregister(MaterialLibrary)

class UserComponent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserComponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserComponent, name)
    __repr__ = _swig_repr

    def __init__(self, rval):
        this = _designer.new_UserComponent(rval)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _designer.delete_UserComponent
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.UserComponent_IsValid(self)

    def GetName(self):
        return _designer.UserComponent_GetName(self)

    def GetDescription(self):
        return _designer.UserComponent_GetDescription(self)

    def GetExpression(self):
        return _designer.UserComponent_GetExpression(self)

    def GetAnalysisType(self):
        return _designer.UserComponent_GetAnalysisType(self)

    def SetName(self, name):
        return _designer.UserComponent_SetName(self, name)

    def SetDescription(self, description):
        return _designer.UserComponent_SetDescription(self, description)

    def SetExpression(self, expression):
        return _designer.UserComponent_SetExpression(self, expression)

    def SetAnalysisType(self, type):
        return _designer.UserComponent_SetAnalysisType(self, type)
UserComponent_swigregister = _designer.UserComponent_swigregister
UserComponent_swigregister(UserComponent)

class UserComponentList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserComponentList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserComponentList, name)
    __repr__ = _swig_repr

    def __init__(self, rval):
        this = _designer.new_UserComponentList(rval)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _designer.delete_UserComponentList
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.UserComponentList_IsValid(self)

    def NumUserComponents(self):
        return _designer.UserComponentList_NumUserComponents(self)

    def CreateUserComponent(self, name):
        return _designer.UserComponentList_CreateUserComponent(self, name)

    def GetUserComponent(self, val):
        return _designer.UserComponentList_GetUserComponent(self, val)

    def DeleteUserComponent(self, val):
        return _designer.UserComponentList_DeleteUserComponent(self, val)

    def DeleteUserComponentByObject(self, object):
        return _designer.UserComponentList_DeleteUserComponentByObject(self, object)
UserComponentList_swigregister = _designer.UserComponentList_swigregister
UserComponentList_swigregister(UserComponentList)

class Set(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Set, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Set
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Set_IsValid(self)

    def GetName(self):
        return _designer.Set_GetName(self)

    def SetName(self, name):
        return _designer.Set_SetName(self, name)

    def GetType(self):
        return _designer.Set_GetType(self)

    def GetMatcherType(self):
        return _designer.Set_GetMatcherType(self)

    def GetParameter(self, name):
        return _designer.Set_GetParameter(self, name)

    def GetParameterList(self):
        return _designer.Set_GetParameterList(self)

    def ClearParts(self):
        return _designer.Set_ClearParts(self)

    def AddSelected(self, selection):
        return _designer.Set_AddSelected(self, selection)

    def GetSelection(self):
        return _designer.Set_GetSelection(self)

    def SetMatcherType(self, type):
        return _designer.Set_SetMatcherType(self, type)

    def SetParameter(self, name, value):
        return _designer.Set_SetParameter(self, name, value)

    def SetXYZPoint(self, name, x, y, z):
        return _designer.Set_SetXYZPoint(self, name, x, y, z)

    def Rebuild(self):
        return _designer.Set_Rebuild(self)

    def NumParts(self):
        return _designer.Set_NumParts(self)

    def GetIDs(self):
        return _designer.Set_GetIDs(self)

    def UpdateByRelation(self):
        return _designer.Set_UpdateByRelation(self)

    def SetUpdateByRelation(self, update):
        return _designer.Set_SetUpdateByRelation(self, update)
Set_swigregister = _designer.Set_swigregister
Set_swigregister(Set)

class SetList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_SetList
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.SetList_IsValid(self)

    def CreatePartSet(self, *args):
        return _designer.SetList_CreatePartSet(self, *args)

    def CreateFaceSet(self, *args):
        return _designer.SetList_CreateFaceSet(self, *args)

    def CreateEdgeSet(self, *args):
        return _designer.SetList_CreateEdgeSet(self, *args)

    def CreateVertexSet(self, *args):
        return _designer.SetList_CreateVertexSet(self, *args)

    def NumSet(self):
        return _designer.SetList_NumSet(self)

    def CopySet(self, cutplane):
        return _designer.SetList_CopySet(self, cutplane)

    def DuplicateSet(self, var):
        return _designer.SetList_DuplicateSet(self, var)

    def DeleteSet(self, var):
        return _designer.SetList_DeleteSet(self, var)

    def GetSet(self, var):
        return _designer.SetList_GetSet(self, var)

    def DeleteUnusedSets(self):
        return _designer.SetList_DeleteUnusedSets(self)
SetList_swigregister = _designer.SetList_swigregister
SetList_swigregister(SetList)

class Part(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Part, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Part, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Part
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Part_IsValid(self)

    def ID(self):
        return _designer.Part_ID(self)

    def GetName(self):
        return _designer.Part_GetName(self)

    def SetName(self, name):
        return _designer.Part_SetName(self, name)

    def SetColor(self, color):
        return _designer.Part_SetColor(self, color)

    def GetColor(self):
        return _designer.Part_GetColor(self)

    def SetTransparency(self, transparency):
        return _designer.Part_SetTransparency(self, transparency)

    def GetTransparency(self):
        return _designer.Part_GetTransparency(self)

    def Volume(self):
        return _designer.Part_Volume(self)

    def Area(self):
        return _designer.Part_Area(self)

    def NumFaces(self):
        return _designer.Part_NumFaces(self)

    def NumEdges(self):
        return _designer.Part_NumEdges(self)

    def NumVertices(self):
        return _designer.Part_NumVertices(self)

    def GetFaceIDs(self):
        return _designer.Part_GetFaceIDs(self)

    def GetEdgeIDs(self):
        return _designer.Part_GetEdgeIDs(self)

    def GetVertexIDs(self):
        return _designer.Part_GetVertexIDs(self)

    def CentroidPosition(self):
        return _designer.Part_CentroidPosition(self)

    def PointInPart(self):
        return _designer.Part_PointInPart(self)

    def SetVisibility(self, visibility):
        return _designer.Part_SetVisibility(self, visibility)

    def IsVisible(self):
        return _designer.Part_IsVisible(self)
Part_swigregister = _designer.Part_swigregister
Part_swigregister(Part)

class PartGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PartGroup, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_PartGroup
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.PartGroup_IsValid(self)

    def NumParts(self):
        return _designer.PartGroup_NumParts(self)

    def GetPartByIndex(self, index):
        return _designer.PartGroup_GetPartByIndex(self, index)

    def GetPart(self, var):
        return _designer.PartGroup_GetPart(self, var)

    def Volume(self):
        return _designer.PartGroup_Volume(self)

    def Area(self):
        return _designer.PartGroup_Area(self)

    def GetName(self):
        return _designer.PartGroup_GetName(self)

    def GetPartIDs(self):
        return _designer.PartGroup_GetPartIDs(self)
PartGroup_swigregister = _designer.PartGroup_swigregister
PartGroup_swigregister(PartGroup)

class AnalysisTemplateControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisTemplateControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisTemplateControl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_AnalysisTemplateControl
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.AnalysisTemplateControl_IsValid(self)

    def GetUnsetPartsFromTemplate(self):
        return _designer.AnalysisTemplateControl_GetUnsetPartsFromTemplate(self)

    def GetUnsetSetsFromTemplate(self):
        return _designer.AnalysisTemplateControl_GetUnsetSetsFromTemplate(self)

    def GetUnsetPartsFromSetting(self):
        return _designer.AnalysisTemplateControl_GetUnsetPartsFromSetting(self)

    def GetUnsetSetsFromSetting(self):
        return _designer.AnalysisTemplateControl_GetUnsetSetsFromSetting(self)

    def GetPartsFromTemplate(self):
        return _designer.AnalysisTemplateControl_GetPartsFromTemplate(self)

    def GetPartsFromSetting(self):
        return _designer.AnalysisTemplateControl_GetPartsFromSetting(self)

    def GetSetsFromTemplate(self):
        return _designer.AnalysisTemplateControl_GetSetsFromTemplate(self)

    def GetSetsFromSetting(self):
        return _designer.AnalysisTemplateControl_GetSetsFromSetting(self)

    def IsAllPairsParts(self):
        return _designer.AnalysisTemplateControl_IsAllPairsParts(self)

    def IsAllPairsSets(self):
        return _designer.AnalysisTemplateControl_IsAllPairsSets(self)
AnalysisTemplateControl_swigregister = _designer.AnalysisTemplateControl_swigregister
AnalysisTemplateControl_swigregister(AnalysisTemplateControl)

class GraphModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphModel, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_GraphModel
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.GraphModel_IsValid(self)

    def GetName(self):
        return _designer.GraphModel_GetName(self)

    def SetName(self, name):
        return _designer.GraphModel_SetName(self, name)

    def WriteTable(self, filename):
        return _designer.GraphModel_WriteTable(self, filename)

    def WriteVisibleTable(self, filename):
        return _designer.GraphModel_WriteVisibleTable(self, filename)

    def WriteAllCaseTable(self, filename):
        return _designer.GraphModel_WriteAllCaseTable(self, filename)

    def WriteAllCaseVisibleTable(self, filename):
        return _designer.GraphModel_WriteAllCaseVisibleTable(self, filename)

    def SaveGraphImage(self, filename, width, height):
        return _designer.GraphModel_SaveGraphImage(self, filename, width, height)

    def Show(self):
        return _designer.GraphModel_Show(self)

    def Hide(self):
        return _designer.GraphModel_Hide(self)

    def GetAllXAxisTypes(self):
        return _designer.GraphModel_GetAllXAxisTypes(self)

    def GetXAxisType(self):
        return _designer.GraphModel_GetXAxisType(self)

    def SetXAxisType(self, type):
        return _designer.GraphModel_SetXAxisType(self, type)

    def AddDataSet(self, set, pos=-1):
        return _designer.GraphModel_AddDataSet(self, set, pos)

    def NumLines(self):
        return _designer.GraphModel_NumLines(self)

    def GetLineName(self, line):
        return _designer.GraphModel_GetLineName(self, line)

    def SetLineName(self, line, name):
        return _designer.GraphModel_SetLineName(self, line, name)

    def SetLineVisible(self, val, show):
        return _designer.GraphModel_SetLineVisible(self, val, show)

    def SetAverageVisible(self, val, show):
        return _designer.GraphModel_SetAverageVisible(self, val, show)

    def SetRMSVisible(self, val, show):
        return _designer.GraphModel_SetRMSVisible(self, val, show)

    def SetHCrossPoint(self, val, show):
        return _designer.GraphModel_SetHCrossPoint(self, val, show)

    def SetVCrossPoint(self, val, show):
        return _designer.GraphModel_SetVCrossPoint(self, val, show)

    def SetSymbol(self, val, value):
        return _designer.GraphModel_SetSymbol(self, val, value)

    def SetColor(self, val, value):
        return _designer.GraphModel_SetColor(self, val, value)

    def SetYAxisPosition(self, val, value):
        return _designer.GraphModel_SetYAxisPosition(self, val, value)

    def SetLineType(self, val, value):
        return _designer.GraphModel_SetLineType(self, val, value)

    def GetLineVisible(self, val):
        return _designer.GraphModel_GetLineVisible(self, val)

    def GetAverageVisible(self, val):
        return _designer.GraphModel_GetAverageVisible(self, val)

    def GetRMSVisible(self, val):
        return _designer.GraphModel_GetRMSVisible(self, val)

    def GetHCrossPoint(self, val):
        return _designer.GraphModel_GetHCrossPoint(self, val)

    def GetVCrossPoint(self, val):
        return _designer.GraphModel_GetVCrossPoint(self, val)

    def GetSymbol(self, val):
        return _designer.GraphModel_GetSymbol(self, val)

    def GetColor(self, val):
        return _designer.GraphModel_GetColor(self, val)

    def GetYAxisPosition(self, val):
        return _designer.GraphModel_GetYAxisPosition(self, val)

    def GetLineType(self, val):
        return _designer.GraphModel_GetLineType(self, val)

    def SetGraphProperty(self, name, var):
        return _designer.GraphModel_SetGraphProperty(self, name, var)

    def GetGraphProperty(self, name):
        return _designer.GraphModel_GetGraphProperty(self, name)

    def __init__(self):
        this = _designer.new_GraphModel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
GraphModel_swigregister = _designer.GraphModel_swigregister
GraphModel_swigregister(GraphModel)

class DataSetParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSetParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSetParameter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_DataSetParameter
    __del__ = lambda self: None

    def AddStudy(self, name, caseNo):
        return _designer.DataSetParameter_AddStudy(self, name, caseNo)

    def AddPart(self, name):
        return _designer.DataSetParameter_AddPart(self, name)

    def SetResultTypeName(self, name):
        return _designer.DataSetParameter_SetResultTypeName(self, name)

    def SetComponent(self, name):
        return _designer.DataSetParameter_SetComponent(self, name)

    def SetCondition(self, name):
        return _designer.DataSetParameter_SetCondition(self, name)

    def SetStepType(self, name):
        return _designer.DataSetParameter_SetStepType(self, name)

    def SetStep(self, value):
        return _designer.DataSetParameter_SetStep(self, value)

    def __init__(self):
        this = _designer.new_DataSetParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DataSetParameter_swigregister = _designer.DataSetParameter_swigregister
DataSetParameter_swigregister(DataSetParameter)

class FFTParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FFTParameter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_FFTParameter
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.FFTParameter_IsValid(self)

    def SetDataSet(self, dataset):
        return _designer.FFTParameter_SetDataSet(self, dataset)

    def AddDataSet(self, dataset):
        return _designer.FFTParameter_AddDataSet(self, dataset)

    def SetSeries(self, val):
        return _designer.FFTParameter_SetSeries(self, val)

    def SetType(self, type):
        return _designer.FFTParameter_SetType(self, type)

    def SetMin(self, val):
        return _designer.FFTParameter_SetMin(self, val)

    def SetMax(self, val):
        return _designer.FFTParameter_SetMax(self, val)

    def SetDBMultiplier(self, multiplier):
        return _designer.FFTParameter_SetDBMultiplier(self, multiplier)

    def SetCreateGraph(self, createGraph):
        return _designer.FFTParameter_SetCreateGraph(self, createGraph)

    def SetAxisType(self, mapper):
        return _designer.FFTParameter_SetAxisType(self, mapper)

    def SetLineType(self, lineType):
        return _designer.FFTParameter_SetLineType(self, lineType)

    def SetPhase(self, val):
        return _designer.FFTParameter_SetPhase(self, val)

    def SetPeriodicity(self, type):
        return _designer.FFTParameter_SetPeriodicity(self, type)

    def SetFrequencyMultiplier(self, val):
        return _designer.FFTParameter_SetFrequencyMultiplier(self, val)

    def __init__(self):
        this = _designer.new_FFTParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
FFTParameter_swigregister = _designer.FFTParameter_swigregister
FFTParameter_swigregister(FFTParameter)

class MeshGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshGroup, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_MeshGroup
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.MeshGroup_IsValid(self)

    def GetName(self):
        return _designer.MeshGroup_GetName(self)

    def SetName(self, name):
        return _designer.MeshGroup_SetName(self, name)

    def GetType(self):
        return _designer.MeshGroup_GetType(self)

    def ClearParts(self):
        return _designer.MeshGroup_ClearParts(self)

    def AddSelected(self, selection):
        return _designer.MeshGroup_AddSelected(self, selection)

    def GetSelection(self):
        return _designer.MeshGroup_GetSelection(self)

    def NumParts(self):
        return _designer.MeshGroup_NumParts(self)

    def GetDifferentElementsPerCaseFlag(self):
        return _designer.MeshGroup_GetDifferentElementsPerCaseFlag(self)

    def GetPartsFlag(self):
        return _designer.MeshGroup_GetPartsFlag(self)

    def GetLinkedPart(self):
        return _designer.MeshGroup_GetLinkedPart(self)

    def SetDifferentElementsPerCaseFlag(self, isOn):
        return _designer.MeshGroup_SetDifferentElementsPerCaseFlag(self, isOn)

    def SetPartsFlag(self, isOn):
        return _designer.MeshGroup_SetPartsFlag(self, isOn)

    def SetLinkedPart(self, var):
        return _designer.MeshGroup_SetLinkedPart(self, var)
MeshGroup_swigregister = _designer.MeshGroup_swigregister
MeshGroup_swigregister(MeshGroup)

class ParallelGroupConditionCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParallelGroupConditionCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParallelGroupConditionCreator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ParallelGroupConditionCreator
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ParallelGroupConditionCreator_IsValid(self)

    def AddMasterCondition(self, cond):
        return _designer.ParallelGroupConditionCreator_AddMasterCondition(self, cond)

    def SetPitch1(self, value):
        return _designer.ParallelGroupConditionCreator_SetPitch1(self, value)

    def SetDirection1XYZ(self, x, y, z):
        return _designer.ParallelGroupConditionCreator_SetDirection1XYZ(self, x, y, z)

    def SetPitch2(self, value):
        return _designer.ParallelGroupConditionCreator_SetPitch2(self, value)

    def SetDirection2XYZ(self, x, y, z):
        return _designer.ParallelGroupConditionCreator_SetDirection2XYZ(self, x, y, z)

    def SetTitle(self, value):
        return _designer.ParallelGroupConditionCreator_SetTitle(self, value)

    def SetTolerance(self, value):
        return _designer.ParallelGroupConditionCreator_SetTolerance(self, value)

    def Submit(self):
        return _designer.ParallelGroupConditionCreator_Submit(self)
ParallelGroupConditionCreator_swigregister = _designer.ParallelGroupConditionCreator_swigregister
ParallelGroupConditionCreator_swigregister(ParallelGroupConditionCreator)

class RotateGroupConditionCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotateGroupConditionCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RotateGroupConditionCreator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_RotateGroupConditionCreator
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.RotateGroupConditionCreator_IsValid(self)

    def AddMasterCondition(self, cond):
        return _designer.RotateGroupConditionCreator_AddMasterCondition(self, cond)

    def SetAngle(self, value):
        return _designer.RotateGroupConditionCreator_SetAngle(self, value)

    def SetAxisXYZ(self, x, y, z):
        return _designer.RotateGroupConditionCreator_SetAxisXYZ(self, x, y, z)

    def SetOriginXYZ(self, x, y, z):
        return _designer.RotateGroupConditionCreator_SetOriginXYZ(self, x, y, z)

    def SetTitle(self, value):
        return _designer.RotateGroupConditionCreator_SetTitle(self, value)

    def SetTolerance(self, value):
        return _designer.RotateGroupConditionCreator_SetTolerance(self, value)

    def Submit(self):
        return _designer.RotateGroupConditionCreator_Submit(self)
RotateGroupConditionCreator_swigregister = _designer.RotateGroupConditionCreator_swigregister
RotateGroupConditionCreator_swigregister(RotateGroupConditionCreator)

class CircuitConditionConnector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CircuitConditionConnector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CircuitConditionConnector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_CircuitConditionConnector
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.CircuitConditionConnector_IsValid(self)

    def SetCondition(self, cond):
        return _designer.CircuitConditionConnector_SetCondition(self, cond)

    def SetCircuitComponent(self, comp):
        return _designer.CircuitConditionConnector_SetCircuitComponent(self, comp)

    def PatternConnect(self, start_index, return_index, increase):
        return _designer.CircuitConditionConnector_PatternConnect(self, start_index, return_index, increase)

    def OrderConnect(self):
        return _designer.CircuitConditionConnector_OrderConnect(self)
CircuitConditionConnector_swigregister = _designer.CircuitConditionConnector_swigregister
CircuitConditionConnector_swigregister(CircuitConditionConnector)

class ResponseDataParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseDataParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseDataParameter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ResponseDataParameter
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ResponseDataParameter_IsValid(self)

    def SetTitle(self, name):
        return _designer.ResponseDataParameter_SetTitle(self, name)

    def SetCalculationType(self, type):
        return _designer.ResponseDataParameter_SetCalculationType(self, type)

    def SetThresholdValue(self, threshold):
        return _designer.ResponseDataParameter_SetThresholdValue(self, threshold)

    def SetHarmonic(self, harmonic):
        return _designer.ResponseDataParameter_SetHarmonic(self, harmonic)

    def SetPeriodicity(self, periodicity):
        return _designer.ResponseDataParameter_SetPeriodicity(self, periodicity)

    def SetStartValue(self, start):
        return _designer.ResponseDataParameter_SetStartValue(self, start)

    def SetEndValue(self, end):
        return _designer.ResponseDataParameter_SetEndValue(self, end)

    def SetRangeFromLastStep(self, value):
        return _designer.ResponseDataParameter_SetRangeFromLastStep(self, value)

    def SetUnit(self, xaxisunit):
        return _designer.ResponseDataParameter_SetUnit(self, xaxisunit)

    def SetVariable(self, variable):
        return _designer.ResponseDataParameter_SetVariable(self, variable)

    def SetLine(self, value):
        return _designer.ResponseDataParameter_SetLine(self, value)

    def SetAllLine(self, allLine):
        return _designer.ResponseDataParameter_SetAllLine(self, allLine)

    def SetCaseRangeType(self, type):
        return _designer.ResponseDataParameter_SetCaseRangeType(self, type)

    def SetCaseRangeTable(self, table):
        return _designer.ResponseDataParameter_SetCaseRangeTable(self, table)

    def __init__(self):
        this = _designer.new_ResponseDataParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ResponseDataParameter_swigregister = _designer.ResponseDataParameter_swigregister
ResponseDataParameter_swigregister(ResponseDataParameter)

class ModelCentering(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelCentering, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelCentering, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ModelCentering
    __del__ = lambda self: None

    def SetCenteringType(self, type):
        return _designer.ModelCentering_SetCenteringType(self, type)

    def SetRotationType(self, type):
        return _designer.ModelCentering_SetRotationType(self, type)

    def SetVertexId(self, id):
        return _designer.ModelCentering_SetVertexId(self, id)

    def SetAxisEdgeId(self, id):
        return _designer.ModelCentering_SetAxisEdgeId(self, id)

    def SetReferenceEdgeId(self, id):
        return _designer.ModelCentering_SetReferenceEdgeId(self, id)

    def SetIsReverseAxisEdge(self, reverse):
        return _designer.ModelCentering_SetIsReverseAxisEdge(self, reverse)

    def SetIsReverseReferenceEdge(self, reverse):
        return _designer.ModelCentering_SetIsReverseReferenceEdge(self, reverse)

    def CenteringType(self):
        return _designer.ModelCentering_CenteringType(self)

    def RotationType(self):
        return _designer.ModelCentering_RotationType(self)

    def VertexId(self):
        return _designer.ModelCentering_VertexId(self)

    def AxisEdgeId(self):
        return _designer.ModelCentering_AxisEdgeId(self)

    def ReferenceEdgeId(self):
        return _designer.ModelCentering_ReferenceEdgeId(self)

    def IsReverseAxisEdge(self):
        return _designer.ModelCentering_IsReverseAxisEdge(self)

    def IsReverseReferenceEdge(self):
        return _designer.ModelCentering_IsReverseReferenceEdge(self)

    def __init__(self):
        this = _designer.new_ModelCentering()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ModelCentering_swigregister = _designer.ModelCentering_swigregister
ModelCentering_swigregister(ModelCentering)

class Cylinder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cylinder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cylinder, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Cylinder
    __del__ = lambda self: None

    def SetCenterPoint(self, x, y, z):
        return _designer.Cylinder_SetCenterPoint(self, x, y, z)

    def SetCenterPointByPoint(self, center):
        return _designer.Cylinder_SetCenterPointByPoint(self, center)

    def SetCenterAxis(self, x, y, z):
        return _designer.Cylinder_SetCenterAxis(self, x, y, z)

    def SetCenterAxisByPoint(self, center_axis):
        return _designer.Cylinder_SetCenterAxisByPoint(self, center_axis)

    def SetXAxis(self, x, y, z):
        return _designer.Cylinder_SetXAxis(self, x, y, z)

    def SetXAxisByPoint(self, x_axis):
        return _designer.Cylinder_SetXAxisByPoint(self, x_axis)

    def SetInnerRadius(self, radius):
        return _designer.Cylinder_SetInnerRadius(self, radius)

    def SetOuterRadius(self, radius):
        return _designer.Cylinder_SetOuterRadius(self, radius)

    def SetUseHeight(self, use):
        return _designer.Cylinder_SetUseHeight(self, use)

    def SetUseAngle(self, use):
        return _designer.Cylinder_SetUseAngle(self, use)

    def SetHeightTop(self, top):
        return _designer.Cylinder_SetHeightTop(self, top)

    def SetHeightBottom(self, bottom):
        return _designer.Cylinder_SetHeightBottom(self, bottom)

    def SetStartAngle(self, angle):
        return _designer.Cylinder_SetStartAngle(self, angle)

    def SetEndAngle(self, angle):
        return _designer.Cylinder_SetEndAngle(self, angle)

    def GetCenterPoint(self):
        return _designer.Cylinder_GetCenterPoint(self)

    def GetCenterAxis(self):
        return _designer.Cylinder_GetCenterAxis(self)

    def GetXAxis(self):
        return _designer.Cylinder_GetXAxis(self)

    def GetInnerRadius(self):
        return _designer.Cylinder_GetInnerRadius(self)

    def GetOuterRadius(self):
        return _designer.Cylinder_GetOuterRadius(self)

    def GetUseHeight(self):
        return _designer.Cylinder_GetUseHeight(self)

    def GetUseAngle(self):
        return _designer.Cylinder_GetUseAngle(self)

    def GetHeightTop(self):
        return _designer.Cylinder_GetHeightTop(self)

    def GetHeightBottom(self):
        return _designer.Cylinder_GetHeightBottom(self)

    def GetStartAngle(self):
        return _designer.Cylinder_GetStartAngle(self)

    def GetEndAngle(self):
        return _designer.Cylinder_GetEndAngle(self)

    def __init__(self):
        this = _designer.new_Cylinder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Cylinder_swigregister = _designer.Cylinder_swigregister
Cylinder_swigregister(Cylinder)

class AnalysisGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisGroup, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_AnalysisGroup
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.AnalysisGroup_IsValid(self)

    def SetName(self, name):
        return _designer.AnalysisGroup_SetName(self, name)

    def GetName(self):
        return _designer.AnalysisGroup_GetName(self)

    def GetDescription(self):
        return _designer.AnalysisGroup_GetDescription(self)

    def SetDescription(self, description):
        return _designer.AnalysisGroup_SetDescription(self, description)

    def GetUuid(self):
        return _designer.AnalysisGroup_GetUuid(self)

    def AddStudyById(self, studyId):
        return _designer.AnalysisGroup_AddStudyById(self, studyId)

    def AddStudy(self, var):
        return _designer.AnalysisGroup_AddStudy(self, var)

    def GetStudyId(self, var):
        return _designer.AnalysisGroup_GetStudyId(self, var)

    def GetStudy(self, var):
        return _designer.AnalysisGroup_GetStudy(self, var)

    def NumStudies(self):
        return _designer.AnalysisGroup_NumStudies(self)

    def SetStudyOrder(self, list):
        return _designer.AnalysisGroup_SetStudyOrder(self, list)

    def GetCouplingData(self, val):
        return _designer.AnalysisGroup_GetCouplingData(self, val)

    def RunSequential(self):
        return _designer.AnalysisGroup_RunSequential(self)

    def RunSequentialAllCases(self):
        return _designer.AnalysisGroup_RunSequentialAllCases(self)

    def RunCoupled(self):
        return _designer.AnalysisGroup_RunCoupled(self)

    def RunCoupledAllCases(self):
        return _designer.AnalysisGroup_RunCoupledAllCases(self)

    def CreateJob(self):
        return _designer.AnalysisGroup_CreateJob(self)

    def CheckForNewCases(self):
        return _designer.AnalysisGroup_CheckForNewCases(self)

    def CheckForNewResults(self):
        return _designer.AnalysisGroup_CheckForNewResults(self)

    def CheckFolderResults(self, folder):
        return _designer.AnalysisGroup_CheckFolderResults(self, folder)

    def LoadRemoteResults(self, cases):
        return _designer.AnalysisGroup_LoadRemoteResults(self, cases)

    def NumPostCalculationScripts(self):
        return _designer.AnalysisGroup_NumPostCalculationScripts(self)

    def GetPostCalculationScript(self, nameOrIndex):
        return _designer.AnalysisGroup_GetPostCalculationScript(self, nameOrIndex)

    def AddPostCalculationScript(self, title):
        return _designer.AnalysisGroup_AddPostCalculationScript(self, title)

    def AddPostCalculationScriptFromFile(self, filename):
        return _designer.AnalysisGroup_AddPostCalculationScriptFromFile(self, filename)

    def DeletePostCalculationScript(self, nameOrIndex):
        return _designer.AnalysisGroup_DeletePostCalculationScript(self, nameOrIndex)

    def RunAllPostCalculationScripts(self):
        return _designer.AnalysisGroup_RunAllPostCalculationScripts(self)

    def GetResponseVariable(self, name, caseIndex):
        return _designer.AnalysisGroup_GetResponseVariable(self, name, caseIndex)

    def GetResponseData(self, name, caseIndex):
        return _designer.AnalysisGroup_GetResponseData(self, name, caseIndex)

    def GetDesignTable(self):
        return _designer.AnalysisGroup_GetDesignTable(self)

    def GetCurrentCase(self):
        return _designer.AnalysisGroup_GetCurrentCase(self)

    def SetCurrentCase(self, caseIndex):
        return _designer.AnalysisGroup_SetCurrentCase(self, caseIndex)

    def GetOptimizationTable(self):
        return _designer.AnalysisGroup_GetOptimizationTable(self)

    def CreateParametricGraphDefinition(self):
        return _designer.AnalysisGroup_CreateParametricGraphDefinition(self)

    def CouplingType(self):
        return _designer.AnalysisGroup_CouplingType(self)

    def Run(self):
        return _designer.AnalysisGroup_Run(self)

    def RunAllCases(self):
        return _designer.AnalysisGroup_RunAllCases(self)

    def RunOptimization(self):
        return _designer.AnalysisGroup_RunOptimization(self)

    def RunTopologyOptimization(self):
        return _designer.AnalysisGroup_RunTopologyOptimization(self)

    def LoadTopologyResults(self, *args):
        return _designer.AnalysisGroup_LoadTopologyResults(self, *args)

    def CreateAnalysisTemplate(self, *args):
        return _designer.AnalysisGroup_CreateAnalysisTemplate(self, *args)

    def ExportAnalysisTemplate(self, *args):
        return _designer.AnalysisGroup_ExportAnalysisTemplate(self, *args)

    def GetResultViewItemList(self):
        return _designer.AnalysisGroup_GetResultViewItemList(self)

    def GetAllCasesResultViewItemList(self):
        return _designer.AnalysisGroup_GetAllCasesResultViewItemList(self)

    def CreateFilterDefinition(self, name):
        return _designer.AnalysisGroup_CreateFilterDefinition(self, name)

    def GetFilterResultDefinition(self, val):
        return _designer.AnalysisGroup_GetFilterResultDefinition(self, val)

    def DeleteFilterResultDefinition(self, val):
        return _designer.AnalysisGroup_DeleteFilterResultDefinition(self, val)

    def ExportAnalysisParameters(self, filename, openCadLink):
        return _designer.AnalysisGroup_ExportAnalysisParameters(self, filename, openCadLink)

    def SetSimultaneousCalculationStudy(self, list):
        return _designer.AnalysisGroup_SetSimultaneousCalculationStudy(self, list)

    def GetParameterSettingStatus(self):
        return _designer.AnalysisGroup_GetParameterSettingStatus(self)
AnalysisGroup_swigregister = _designer.AnalysisGroup_swigregister
AnalysisGroup_swigregister(AnalysisGroup)

class ProjectExportParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectExportParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectExportParameter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ProjectExportParameter
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ProjectExportParameter_IsValid(self)

    def AddAnalysisGroup(self, val):
        return _designer.ProjectExportParameter_AddAnalysisGroup(self, val)

    def AddModel(self, val):
        return _designer.ProjectExportParameter_AddModel(self, val)

    def AddStudy(self, val1, val2):
        return _designer.ProjectExportParameter_AddStudy(self, val1, val2)

    def SetSaveVersion(self, version):
        return _designer.ProjectExportParameter_SetSaveVersion(self, version)

    def SetSaveResults(self, save):
        return _designer.ProjectExportParameter_SetSaveResults(self, save)

    def __init__(self):
        this = _designer.new_ProjectExportParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ProjectExportParameter_swigregister = _designer.ProjectExportParameter_swigregister
ProjectExportParameter_swigregister(ProjectExportParameter)

class ParametricGraphDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParametricGraphDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParametricGraphDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ParametricGraphDefinition
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ParametricGraphDefinition_IsValid(self)

    def SetParameter(self, key, value):
        return _designer.ParametricGraphDefinition_SetParameter(self, key, value)

    def GetParameter(self, key):
        return _designer.ParametricGraphDefinition_GetParameter(self, key)

    def AddItemFilter(self, itemName, value):
        return _designer.ParametricGraphDefinition_AddItemFilter(self, itemName, value)

    def AddConstraintFilter(self, itemName):
        return _designer.ParametricGraphDefinition_AddConstraintFilter(self, itemName)

    def SetGroupFilter(self, *args):
        return _designer.ParametricGraphDefinition_SetGroupFilter(self, *args)

    def SetCustomFilter(self, *args):
        return _designer.ParametricGraphDefinition_SetCustomFilter(self, *args)

    def CreateParametricGraph(self):
        return _designer.ParametricGraphDefinition_CreateParametricGraph(self)
ParametricGraphDefinition_swigregister = _designer.ParametricGraphDefinition_swigregister
ParametricGraphDefinition_swigregister(ParametricGraphDefinition)

class SimpleDialogBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleDialogBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleDialogBox, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_SimpleDialogBox
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.SimpleDialogBox_IsValid(self)

    def Show(self):
        return _designer.SimpleDialogBox_Show(self)

    def WasCancelled(self):
        return _designer.SimpleDialogBox_WasCancelled(self)

    def GetValue(self, name):
        return _designer.SimpleDialogBox_GetValue(self, name)

    def GetValueAsIntegerList(self, name):
        return _designer.SimpleDialogBox_GetValueAsIntegerList(self, name)

    def GetSetIndices(self, name):
        return _designer.SimpleDialogBox_GetSetIndices(self, name)

    def GetMeshGroupIndices(self, name):
        return _designer.SimpleDialogBox_GetMeshGroupIndices(self, name)

    def GetPoint(self, name):
        return _designer.SimpleDialogBox_GetPoint(self, name)

    def SetTitle(self, dialogTitle):
        return _designer.SimpleDialogBox_SetTitle(self, dialogTitle)

    def SetHelp(self, helpString):
        return _designer.SimpleDialogBox_SetHelp(self, helpString)

    def AddLabel(self, *args):
        return _designer.SimpleDialogBox_AddLabel(self, *args)

    def AddLine(self, *args):
        return _designer.SimpleDialogBox_AddLine(self, *args)

    def AddInteger(self, *args):
        return _designer.SimpleDialogBox_AddInteger(self, *args)

    def AddIntegerList(self, *args):
        return _designer.SimpleDialogBox_AddIntegerList(self, *args)

    def AddSpinBox(self, *args):
        return _designer.SimpleDialogBox_AddSpinBox(self, *args)

    def AddReal(self, *args):
        return _designer.SimpleDialogBox_AddReal(self, *args)

    def AddString(self, *args):
        return _designer.SimpleDialogBox_AddString(self, *args)

    def AddCheckBox(self, *args):
        return _designer.SimpleDialogBox_AddCheckBox(self, *args)

    def AddRadio(self, *args):
        return _designer.SimpleDialogBox_AddRadio(self, *args)

    def AddComboBox(self, *args):
        return _designer.SimpleDialogBox_AddComboBox(self, *args)

    def AddOpenFilename(self, *args):
        return _designer.SimpleDialogBox_AddOpenFilename(self, *args)

    def AddSaveFilename(self, *args):
        return _designer.SimpleDialogBox_AddSaveFilename(self, *args)

    def AddDirectoryPath(self, *args):
        return _designer.SimpleDialogBox_AddDirectoryPath(self, *args)

    def AddSelectPartList(self, *args):
        return _designer.SimpleDialogBox_AddSelectPartList(self, *args)

    def AddAxisSelection(self, *args):
        return _designer.SimpleDialogBox_AddAxisSelection(self, *args)

    def AddSelectFaceList(self, *args):
        return _designer.SimpleDialogBox_AddSelectFaceList(self, *args)

    def AddSelectEdgeList(self, *args):
        return _designer.SimpleDialogBox_AddSelectEdgeList(self, *args)

    def AddSelectVertexList(self, *args):
        return _designer.SimpleDialogBox_AddSelectVertexList(self, *args)

    def SetTooltip(self, *args):
        return _designer.SimpleDialogBox_SetTooltip(self, *args)

    def SetTranslation(self, english, japanese):
        return _designer.SimpleDialogBox_SetTranslation(self, english, japanese)

    def SetMinimum(self, name, value):
        return _designer.SimpleDialogBox_SetMinimum(self, name, value)

    def SetMaximum(self, name, value):
        return _designer.SimpleDialogBox_SetMaximum(self, name, value)

    def SetCancelButtonVisible(self, visible):
        return _designer.SimpleDialogBox_SetCancelButtonVisible(self, visible)

    def SetModal(self, on):
        return _designer.SimpleDialogBox_SetModal(self, on)
SimpleDialogBox_swigregister = _designer.SimpleDialogBox_swigregister
SimpleDialogBox_swigregister(SimpleDialogBox)

class ExtractFrequencyParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtractFrequencyParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtractFrequencyParameter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ExtractFrequencyParameter
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ExtractFrequencyParameter_IsValid(self)

    def SetDataSet(self, dataset):
        return _designer.ExtractFrequencyParameter_SetDataSet(self, dataset)

    def SetSeries(self, val):
        return _designer.ExtractFrequencyParameter_SetSeries(self, val)

    def SetMin(self, min):
        return _designer.ExtractFrequencyParameter_SetMin(self, min)

    def SetMax(self, max):
        return _designer.ExtractFrequencyParameter_SetMax(self, max)

    def SetCreateGraph(self, createGraph):
        return _designer.ExtractFrequencyParameter_SetCreateGraph(self, createGraph)

    def SetAxisType(self, mapper):
        return _designer.ExtractFrequencyParameter_SetAxisType(self, mapper)

    def SetOrder(self, order):
        return _designer.ExtractFrequencyParameter_SetOrder(self, order)

    def __init__(self):
        this = _designer.new_ExtractFrequencyParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ExtractFrequencyParameter_swigregister = _designer.ExtractFrequencyParameter_swigregister
ExtractFrequencyParameter_swigregister(ExtractFrequencyParameter)

class GraphIntegralParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphIntegralParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphIntegralParameter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_GraphIntegralParameter
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.GraphIntegralParameter_IsValid(self)

    def Title(self):
        return _designer.GraphIntegralParameter_Title(self)

    def Min(self):
        return _designer.GraphIntegralParameter_Min(self)

    def Max(self):
        return _designer.GraphIntegralParameter_Max(self)

    def RangeUnit(self):
        return _designer.GraphIntegralParameter_RangeUnit(self)

    def IsCreateGraph(self):
        return _designer.GraphIntegralParameter_IsCreateGraph(self)

    def AddDataSet(self, dataset):
        return _designer.GraphIntegralParameter_AddDataSet(self, dataset)

    def SetMin(self, val):
        return _designer.GraphIntegralParameter_SetMin(self, val)

    def SetMax(self, val):
        return _designer.GraphIntegralParameter_SetMax(self, val)

    def SetRangeUnit(self, val):
        return _designer.GraphIntegralParameter_SetRangeUnit(self, val)

    def SetCreateGraph(self, createGraph):
        return _designer.GraphIntegralParameter_SetCreateGraph(self, createGraph)

    def __init__(self):
        this = _designer.new_GraphIntegralParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
GraphIntegralParameter_swigregister = _designer.GraphIntegralParameter_swigregister
GraphIntegralParameter_swigregister(GraphIntegralParameter)

class ReferenceTargetList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceTargetList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceTargetList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_ReferenceTargetList
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.ReferenceTargetList_IsValid(self)

    def CreateFaceReferenceTarget(self, *args):
        return _designer.ReferenceTargetList_CreateFaceReferenceTarget(self, *args)

    def CreateEdgeReferenceTarget(self, *args):
        return _designer.ReferenceTargetList_CreateEdgeReferenceTarget(self, *args)

    def CreateVertexReferenceTarget(self, *args):
        return _designer.ReferenceTargetList_CreateVertexReferenceTarget(self, *args)

    def NumReferenceTarget(self):
        return _designer.ReferenceTargetList_NumReferenceTarget(self)

    def CopyReferenceTarget(self, cutplane):
        return _designer.ReferenceTargetList_CopyReferenceTarget(self, cutplane)

    def DuplicateReferenceTarget(self, var):
        return _designer.ReferenceTargetList_DuplicateReferenceTarget(self, var)

    def DeleteReferenceTarget(self, var):
        return _designer.ReferenceTargetList_DeleteReferenceTarget(self, var)

    def GetReferenceTarget(self, var):
        return _designer.ReferenceTargetList_GetReferenceTarget(self, var)

    def DeleteUnusedReferenceTargets(self):
        return _designer.ReferenceTargetList_DeleteUnusedReferenceTargets(self)
ReferenceTargetList_swigregister = _designer.ReferenceTargetList_swigregister
ReferenceTargetList_swigregister(ReferenceTargetList)

class AnalysisTemplateParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisTemplateParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisTemplateParameter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_AnalysisTemplateParameter
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.AnalysisTemplateParameter_IsValid(self)

    def SetTemplatePath(self, path):
        return _designer.AnalysisTemplateParameter_SetTemplatePath(self, path)

    def SetFilepath(self, filepath):
        return _designer.AnalysisTemplateParameter_SetFilepath(self, filepath)

    def SetModelNames(self, modelnames):
        return _designer.AnalysisTemplateParameter_SetModelNames(self, modelnames)

    def SetPartNames(self, *args):
        return _designer.AnalysisTemplateParameter_SetPartNames(self, *args)

    def SetSetNames(self, *args):
        return _designer.AnalysisTemplateParameter_SetSetNames(self, *args)

    def SetReferenceNames(self, *args):
        return _designer.AnalysisTemplateParameter_SetReferenceNames(self, *args)

    def SetEquationNames(self, modelIndex, equationnames):
        return _designer.AnalysisTemplateParameter_SetEquationNames(self, modelIndex, equationnames)

    def __init__(self):
        this = _designer.new_AnalysisTemplateParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
AnalysisTemplateParameter_swigregister = _designer.AnalysisTemplateParameter_swigregister
AnalysisTemplateParameter_swigregister(AnalysisTemplateParameter)

class CurrentResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurrentResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurrentResult, name)
    __repr__ = _swig_repr

    def IsValid(self):
        return _designer.CurrentResult_IsValid(self)

    def GetResultFileName(self):
        return _designer.CurrentResult_GetResultFileName(self)

    def GetVariableValue(self, name):
        return _designer.CurrentResult_GetVariableValue(self, name)

    def GetTableDataSet(self, name):
        return _designer.CurrentResult_GetTableDataSet(self, name)

    def GetResponseVariable(self, name):
        return _designer.CurrentResult_GetResponseVariable(self, name)

    def GetResponseData(self, name):
        return _designer.CurrentResult_GetResponseData(self, name)

    def __init__(self):
        this = _designer.new_CurrentResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _designer.delete_CurrentResult
    __del__ = lambda self: None
CurrentResult_swigregister = _designer.CurrentResult_swigregister
CurrentResult_swigregister(CurrentResult)

class EfficiencyMapResponseDataParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EfficiencyMapResponseDataParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EfficiencyMapResponseDataParameter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_EfficiencyMapResponseDataParameter
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.EfficiencyMapResponseDataParameter_IsValid(self)

    def SetTitle(self, name):
        return _designer.EfficiencyMapResponseDataParameter_SetTitle(self, name)

    def SetCalculationType(self, type):
        return _designer.EfficiencyMapResponseDataParameter_SetCalculationType(self, type)

    def SetSpeedValue(self, threshold):
        return _designer.EfficiencyMapResponseDataParameter_SetSpeedValue(self, threshold)

    def SetTorqueValue(self, start):
        return _designer.EfficiencyMapResponseDataParameter_SetTorqueValue(self, start)

    def SetEvaluateClusterPoints(self, check):
        return _designer.EfficiencyMapResponseDataParameter_SetEvaluateClusterPoints(self, check)

    def SetResultType(self, type):
        return _designer.EfficiencyMapResponseDataParameter_SetResultType(self, type)

    def SetVariable(self, variable):
        return _designer.EfficiencyMapResponseDataParameter_SetVariable(self, variable)

    def __init__(self):
        this = _designer.new_EfficiencyMapResponseDataParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
EfficiencyMapResponseDataParameter_swigregister = _designer.EfficiencyMapResponseDataParameter_swigregister
EfficiencyMapResponseDataParameter_swigregister(EfficiencyMapResponseDataParameter)


def WrapDispatch(val):
    import win32com.client
    Wrap32Dispatch = win32com.client.__WrapDispatch
    return Wrap32Dispatch(val)


class Application(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _designer.delete_Application
    __del__ = lambda self: None

    def IsValid(self):
        return _designer.Application_IsValid(self)

    def visible(self):
        return _designer.Application_visible(self)

    def SetVisible(self, visible):
        return _designer.Application_SetVisible(self, visible)

    def NewProject(self, name):
        return _designer.Application_NewProject(self, name)

    def Show(self):
        return _designer.Application_Show(self)

    def Raise(self):
        return _designer.Application_Raise(self)

    def Hide(self):
        return _designer.Application_Hide(self)

    def Quit(self):
        return _designer.Application_Quit(self)

    def SetGeometry(self, x, y, w, h):
        return _designer.Application_SetGeometry(self, x, y, w, h)

    def SetSize(self, w, h):
        return _designer.Application_SetSize(self, w, h)

    def SetPosition(self, x, y):
        return _designer.Application_SetPosition(self, x, y)

    def SetCloseWithoutTermination(self, flag):
        return _designer.Application_SetCloseWithoutTermination(self, flag)

    def GetProjectPath(self):
        return _designer.Application_GetProjectPath(self)

    def GetProjectFolderPath(self):
        return _designer.Application_GetProjectFolderPath(self)

    def GetDefaultModelFolderPath(self):
        return _designer.Application_GetDefaultModelFolderPath(self)

    def HasAlreadyLoadModelInProject(self, filename):
        return _designer.Application_HasAlreadyLoadModelInProject(self, filename)

    def GetModelNameInProjectFromFilePath(self, filename):
        return _designer.Application_GetModelNameInProjectFromFilePath(self, filename)

    def View(self):
        return _designer.Application_View(self)

    def GetDataManager(self):
        return _designer.Application_GetDataManager(self)

    def FunctionFactory(self):
        return _designer.Application_FunctionFactory(self)

    def GetMaterialLibrary(self):
        return _designer.Application_GetMaterialLibrary(self)

    def GetUserComponentList(self):
        return _designer.Application_GetUserComponentList(self)

    def CreateParallelConditionCreator(self, study):
        return _designer.Application_CreateParallelConditionCreator(self, study)

    def CreateRotateConditionCreator(self, study):
        return _designer.Application_CreateRotateConditionCreator(self, study)

    def CreateCircuitConditionConnector(self, study):
        return _designer.Application_CreateCircuitConditionConnector(self, study)

    def CreateMaterial(self, name):
        return _designer.Application_CreateMaterial(self, name)

    def CreatePoint(self, x, y, z):
        return _designer.Application_CreatePoint(self, x, y, z)

    def CreateCylinder(self):
        return _designer.Application_CreateCylinder(self)

    def CreateDialogBox(self):
        return _designer.Application_CreateDialogBox(self)

    def SetPreference(self, name, val):
        return _designer.Application_SetPreference(self, name, val)

    def GetPreference(self, name):
        return _designer.Application_GetPreference(self, name)

    def NumModels(self):
        return _designer.Application_NumModels(self)

    def NumAnalysisGroups(self):
        return _designer.Application_NumAnalysisGroups(self)

    def NumStudies(self):
        return _designer.Application_NumStudies(self)

    def SetProjectName(self, name):
        return _designer.Application_SetProjectName(self, name)

    def GetProjectName(self):
        return _designer.Application_GetProjectName(self)

    def SetDescription(self, description):
        return _designer.Application_SetDescription(self, description)

    def GetDescription(self):
        return _designer.Application_GetDescription(self)

    def SetCreatorName(self, name):
        return _designer.Application_SetCreatorName(self, name)

    def GetCreatorName(self):
        return _designer.Application_GetCreatorName(self)

    def ImportDataFromGeometryEditor(self):
        return _designer.Application_ImportDataFromGeometryEditor(self)

    def ImportDataFromTransformerEditor(self):
        return _designer.Application_ImportDataFromTransformerEditor(self)

    def ImportDataFromMotorTemplate(self):
        return _designer.Application_ImportDataFromMotorTemplate(self)

    def Import2DDataFromMotorTemplate(self, isPartial):
        return _designer.Application_Import2DDataFromMotorTemplate(self, isPartial)

    def Import3DDataFromMotorTemplate(self, isPartial, createCoilEnd):
        return _designer.Application_Import3DDataFromMotorTemplate(self, isPartial, createCoilEnd)

    def LaunchGeometryEditor(self):
        return _designer.Application_LaunchGeometryEditor(self)

    def LaunchTransformerEditor(self):
        return _designer.Application_LaunchTransformerEditor(self)

    def LaunchMotorTemplate(self):
        return _designer.Application_LaunchMotorTemplate(self)

    def AttachMotorTemplate(self, pid):
        return _designer.Application_AttachMotorTemplate(self, pid)

    def DetachMotorTemplate(self):
        return _designer.Application_DetachMotorTemplate(self)

    def Load(self, filename):
        return _designer.Application_Load(self, filename)

    def LoadMesh(self, filename):
        return _designer.Application_LoadMesh(self, filename)

    def LoadSpeedGdf(self, filename, mode):
        return _designer.Application_LoadSpeedGdf(self, filename, mode)

    def Load2DSAT(self, filename):
        return _designer.Application_Load2DSAT(self, filename)

    def SaveAs(self, filename):
        return _designer.Application_SaveAs(self, filename)

    def LoadCadData(self, filename, name):
        return _designer.Application_LoadCadData(self, filename, name)

    def LoadCadDataWithOption(self, *args):
        return _designer.Application_LoadCadDataWithOption(self, *args)

    def LoadNXCadData(self, *args):
        return _designer.Application_LoadNXCadData(self, *args)

    def LoadCATIAV5CadData(self, *args):
        return _designer.Application_LoadCATIAV5CadData(self, *args)

    def LoadCreoCadData(self, *args):
        return _designer.Application_LoadCreoCadData(self, *args)

    def Save(self):
        return _designer.Application_Save(self)

    def GetStudy(self, val):
        return _designer.Application_GetStudy(self, val)

    def GetCurrentStudy(self):
        return _designer.Application_GetCurrentStudy(self)

    def SetCurrentStudy(self, val):
        return _designer.Application_SetCurrentStudy(self, val)

    def SetStudyAsCurrent(self, study):
        return _designer.Application_SetStudyAsCurrent(self, study)

    def GetModel(self, val):
        return _designer.Application_GetModel(self, val)

    def GetCurrentModel(self):
        return _designer.Application_GetCurrentModel(self)

    def SetCurrentModel(self, val):
        return _designer.Application_SetCurrentModel(self, val)

    def SetModelAsCurrent(self, model):
        return _designer.Application_SetModelAsCurrent(self, model)

    def DeleteModel(self, val):
        return _designer.Application_DeleteModel(self, val)

    def CreateAnalysisGroup(self, *args):
        return _designer.Application_CreateAnalysisGroup(self, *args)

    def GetAnalysisGroup(self, var):
        return _designer.Application_GetAnalysisGroup(self, var)

    def DeleteAnalysisGroup(self, var):
        return _designer.Application_DeleteAnalysisGroup(self, var)

    def GetCurrentAnalysisGroup(self):
        return _designer.Application_GetCurrentAnalysisGroup(self)

    def HasError(self):
        return _designer.Application_HasError(self)

    def ClearError(self):
        return _designer.Application_ClearError(self)

    def GetLastMessage(self):
        return _designer.Application_GetLastMessage(self)

    def GetAllMessages(self):
        return _designer.Application_GetAllMessages(self)

    def GetAllMessagesToStrList(self):
        return _designer.Application_GetAllMessagesToStrList(self)

    def SetUseExceptions(self, useException):
        return _designer.Application_SetUseExceptions(self, useException)

    def SubmitAllModelsRemote(self, machine, cpu, keepremote):
        return _designer.Application_SubmitAllModelsRemote(self, machine, cpu, keepremote)

    def SubmitAllModelsLocal(self):
        return _designer.Application_SubmitAllModelsLocal(self)

    def SubmitRemoteFromJproj(self, studies, numOfJobs, machine, cpu, keepremote):
        return _designer.Application_SubmitRemoteFromJproj(self, studies, numOfJobs, machine, cpu, keepremote)

    def SubmitLocalFromJproj(self, studies, numOfJobs):
        return _designer.Application_SubmitLocalFromJproj(self, studies, numOfJobs)

    def CreateJob(self, studies):
        return _designer.Application_CreateJob(self, studies)

    def ExportImage(self, filename):
        return _designer.Application_ExportImage(self, filename)

    def ExportImageWithSize(self, filename, width, height):
        return _designer.Application_ExportImageWithSize(self, filename, width, height)

    def ExportProject(self, filename, parameter):
        return _designer.Application_ExportProject(self, filename, parameter)

    def ExportHoopsFile(self, filename):
        return _designer.Application_ExportHoopsFile(self, filename)

    def GetAppDir(self):
        return _designer.Application_GetAppDir(self)

    def CheckForNewResults(self):
        return _designer.Application_CheckForNewResults(self)

    def CheckFolderResults(self, folder):
        return _designer.Application_CheckFolderResults(self, folder)

    def VersionString(self, includeSub):
        return _designer.Application_VersionString(self, includeSub)

    def MajorVersion(self):
        return _designer.Application_MajorVersion(self)

    def MinorVersion(self):
        return _designer.Application_MinorVersion(self)

    def SubVersion(self):
        return _designer.Application_SubVersion(self)

    def GetUuid(self):
        return _designer.Application_GetUuid(self)

    def GetProjectKey(self):
        return _designer.Application_GetProjectKey(self)

    def OutputLogInfo(self, info):
        return _designer.Application_OutputLogInfo(self, info)

    def OutputLogDebugInfo(self, info):
        return _designer.Application_OutputLogDebugInfo(self, info)

    def CreateCircuitModel(self, *args):
        return _designer.Application_CreateCircuitModel(self, *args)

    def CreateGeometryEditorCOM(self):
        val = _designer.Application_CreateGeometryEditorCOM(self)

        val = WrapDispatch(val)


        return val


    def CreateTransformerEditorCOM(self):
        val = _designer.Application_CreateTransformerEditorCOM(self)

        val = WrapDispatch(val)


        return val


    def CreateMotorTemplateCOM(self):
        val = _designer.Application_CreateMotorTemplateCOM(self)

        val = WrapDispatch(val)


        return val


    def CreateGeometryEditor(self, *args):

        designer_remote.SetNextClassPrefix("modeller_")


        return _designer.Application_CreateGeometryEditor(self, *args)


    def CreateTransformerEditor(self):

        designer_remote.SetNextClassPrefix("transformer_")


        return _designer.Application_CreateTransformerEditor(self)


    def CreateMotorTemplate(self):

        designer_remote.SetNextClassPrefix("express_")


        return _designer.Application_CreateMotorTemplate(self)


    def StartBatchMaterialUpdate(self):
        return _designer.Application_StartBatchMaterialUpdate(self)

    def FinishBatchMaterialUpdate(self):
        return _designer.Application_FinishBatchMaterialUpdate(self)

    def AppendScriptXML(self, xml):
        return _designer.Application_AppendScriptXML(self, xml)

    def IsStartRecording(self):
        return _designer.Application_IsStartRecording(self)

    def IsIdRecordingMode(self):
        return _designer.Application_IsIdRecordingMode(self)

    def RunScriptFile(self, *args):
        return _designer.Application_RunScriptFile(self, *args)

    def SetMessageVisible(self, on):
        return _designer.Application_SetMessageVisible(self, on)

    def Sleep(self, milliSeconds):
        return _designer.Application_Sleep(self, milliSeconds)

    def CancelProcess(self):
        return _designer.Application_CancelProcess(self)

    def HasRunningProcess(self):
        return _designer.Application_HasRunningProcess(self)

    def Translate(self, value, context):
        return _designer.Application_Translate(self, value, context)

    def CreateDataSetParameter(self, name):
        return _designer.Application_CreateDataSetParameter(self, name)

    def CreateFFTParameter(self, name):
        return _designer.Application_CreateFFTParameter(self, name)

    def CreateResponseDataParameter(self, name):
        return _designer.Application_CreateResponseDataParameter(self, name)

    def CreateProjectExportParameter(self):
        return _designer.Application_CreateProjectExportParameter(self)

    def CreateExtractFrequencyParameter(self, name):
        return _designer.Application_CreateExtractFrequencyParameter(self, name)

    def CreateGraphIntegralParameter(self, name):
        return _designer.Application_CreateGraphIntegralParameter(self, name)

    def CreateAnalysisTemplateParameter(self):
        return _designer.Application_CreateAnalysisTemplateParameter(self)

    def CreateEfficiencyMapResponseDataParameter(self, name):
        return _designer.Application_CreateEfficiencyMapResponseDataParameter(self, name)

    def GetResultViewItemList(self):
        return _designer.Application_GetResultViewItemList(self)

    def GetAllCasesResultViewItemList(self):
        return _designer.Application_GetAllCasesResultViewItemList(self)

    def CreateRttFileParameter(self):
        return _designer.Application_CreateRttFileParameter(self)

    def ImportAnalysisTemplate(self, parameter):
        return _designer.Application_ImportAnalysisTemplate(self, parameter)

    def ApplyAnalysisTemplate(self, parameter):
        return _designer.Application_ApplyAnalysisTemplate(self, parameter)

    def SetShowProgressDialog(self, show):
        return _designer.Application_SetShowProgressDialog(self, show)

    def MainWindowTitle(self):
        return _designer.Application_MainWindowTitle(self)

    def GetOpenFile(self, *args):
        return _designer.Application_GetOpenFile(self, *args)

    def GetSaveFile(self, *args):
        return _designer.Application_GetSaveFile(self, *args)

    def SetModelOrder(self, val, position):
        return _designer.Application_SetModelOrder(self, val, position)

    def CopyToClipboard(self, data):
        return _designer.Application_CopyToClipboard(self, data)

    def ShowCircuitGrid(self, show):
        return _designer.Application_ShowCircuitGrid(self, show)

    def SetupUserProgress(self, label):
        return _designer.Application_SetupUserProgress(self, label)

    def UserProgressStart(self):
        return _designer.Application_UserProgressStart(self)

    def UserProgressStep(self):
        return _designer.Application_UserProgressStep(self)

    def UserProgressFinish(self):
        return _designer.Application_UserProgressFinish(self)

    def SetUserProgressMessage(self, label):
        return _designer.Application_SetUserProgressMessage(self, label)

    def SetUserProgressMaxSteps(self, steps):
        return _designer.Application_SetUserProgressMaxSteps(self, steps)

    def SetUserProgressUseCancel(self, useCancel):
        return _designer.Application_SetUserProgressUseCancel(self, useCancel)

    def UserProgressWasCanceled(self):
        return _designer.Application_UserProgressWasCanceled(self)

    def GetCurrentResult(self):
        return _designer.Application_GetCurrentResult(self)

    def GetStudyResult(self, studyIdentifier, caseIndex):
        return _designer.Application_GetStudyResult(self, studyIdentifier, caseIndex)

    def Undo(self):
        return _designer.Application_Undo(self)

    def Redo(self):
        return _designer.Application_Redo(self)

    def CanUndo(self):
        return _designer.Application_CanUndo(self)

    def CanRedo(self):
        return _designer.Application_CanRedo(self)

    def StartCommandGroup(self, description):
        return _designer.Application_StartCommandGroup(self, description)

    def EndCommandGroup(self):
        return _designer.Application_EndCommandGroup(self)

    def ClearUndoStack(self):
        return _designer.Application_ClearUndoStack(self)

    def PopUndoStack(self):
        return _designer.Application_PopUndoStack(self)

    def __init__(self):
        this = _designer.new_Application()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Application_swigregister = _designer.Application_swigregister
Application_swigregister(Application)

# This file is compatible with both classic and new-style classes.


